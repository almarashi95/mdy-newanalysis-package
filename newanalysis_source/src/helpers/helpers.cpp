/* Generated by Cython 0.29.21 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__newanalysis__helpers
#define __PYX_HAVE_API__newanalysis__helpers
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include <math.h>
#include <stdlib.h>
#include "BertholdHorn.h"
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "src/helpers/helpers.pyx",
  "__init__.pxd",
  "stringsource",
  "type.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":690
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":691
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":693
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":697
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":698
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":700
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":704
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":705
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":714
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":715
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":716
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":718
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":719
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":720
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":722
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":723
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":725
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":726
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":727
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":729
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":730
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":733
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":279
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* None.proto */
static void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* None.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_char(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_char(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsdsds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_char(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds___pyx_t_double_complex(PyObject *, int writable_flag);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_int(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_int(const char *itemp, PyObject *obj);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_char(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_char(const char *itemp, PyObject *obj);

/* FromPy.proto */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject*);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'newanalysis.helpers' */
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static int __pyx_f_11newanalysis_7helpers_sgn2bin(double); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_char = { "char", NULL, sizeof(char), { 0 }, 0, 'H', IS_UNSIGNED(char), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo___pyx_t_double_complex = { "double complex", NULL, sizeof(__pyx_t_double_complex), { 0 }, 0, 'C', 0, 0 };
#define __Pyx_MODULE_NAME "newanalysis.helpers"
extern int __pyx_module_is_main_newanalysis__helpers;
int __pyx_module_is_main_newanalysis__helpers = 0;

/* Implementation of 'newanalysis.helpers' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_L[] = "L";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_B1[] = "B1";
static const char __pyx_k_B2[] = "B2";
static const char __pyx_k_B3[] = "B3";
static const char __pyx_k_a1[] = "a1";
static const char __pyx_k_a2[] = "a2";
static const char __pyx_k_c1[] = "c1";
static const char __pyx_k_c2[] = "c2";
static const char __pyx_k_cI[] = "cI";
static const char __pyx_k_cL[] = "cL";
static const char __pyx_k_cn[] = "cn";
static const char __pyx_k_ds[] = "ds";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_dx[] = "dx";
static const char __pyx_k_dy[] = "dy";
static const char __pyx_k_dz[] = "dz";
static const char __pyx_k_f1[] = "f1";
static const char __pyx_k_f2[] = "f2";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_l1[] = "l1";
static const char __pyx_k_l2[] = "l2";
static const char __pyx_k_m1[] = "m1";
static const char __pyx_k_m2[] = "m2";
static const char __pyx_k_n1[] = "n1";
static const char __pyx_k_n2[] = "n2";
static const char __pyx_k_n3[] = "n3";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_nt[] = "nt";
static const char __pyx_k_qq[] = "qq";
static const char __pyx_k_r2[] = "r2";
static const char __pyx_k_rv[] = "rv";
static const char __pyx_k_tn[] = "tn";
static const char __pyx_k_ts[] = "ts";
static const char __pyx_k_wt[] = "wt";
static const char __pyx_k_Exx[] = "Exx";
static const char __pyx_k_Eyy[] = "Eyy";
static const char __pyx_k_Ezz[] = "Ezz";
static const char __pyx_k_H1x[] = "H1x";
static const char __pyx_k_H1y[] = "H1y";
static const char __pyx_k_H1z[] = "H1z";
static const char __pyx_k_H2x[] = "H2x";
static const char __pyx_k_H2y[] = "H2y";
static const char __pyx_k_H2z[] = "H2z";
static const char __pyx_k_apr[] = "apr";
static const char __pyx_k_auf[] = "auf";
static const char __pyx_k_azi[] = "azi";
static const char __pyx_k_cds[] = "cds";
static const char __pyx_k_com[] = "com";
static const char __pyx_k_ctr[] = "ctr";
static const char __pyx_k_dip[] = "dip";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_dx2[] = "dx2";
static const char __pyx_k_dy2[] = "dy2";
static const char __pyx_k_dz2[] = "dz2";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_epa[] = "epa";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_ind[] = "ind";
static const char __pyx_k_m1r[] = "m1r";
static const char __pyx_k_m2r[] = "m2r";
static const char __pyx_k_msd[] = "msd";
static const char __pyx_k_nat[] = "nat";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_pol[] = "pol";
static const char __pyx_k_pyE[] = "pyE";
static const char __pyx_k_qqr[] = "qqr";
static const char __pyx_k_rep[] = "rep";
static const char __pyx_k_rfa[] = "rfa";
static const char __pyx_k_tmp[] = "tmp";
static const char __pyx_k_tyH[] = "tyH";
static const char __pyx_k_tzH[] = "tzH";
static const char __pyx_k_vel[] = "vel";
static const char __pyx_k_vol[] = "vol";
static const char __pyx_k_wt1[] = "wt1";
static const char __pyx_k_wts[] = "wts";
static const char __pyx_k_xyz[] = "xyz";
static const char __pyx_k_actr[] = "actr";
static const char __pyx_k_auf3[] = "auf3";
static const char __pyx_k_auf6[] = "auf6";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_boxl[] = "boxl";
static const char __pyx_k_c_rv[] = "c_rv";
static const char __pyx_k_ccom[] = "ccom";
static const char __pyx_k_coct[] = "coct";
static const char __pyx_k_coms[] = "coms";
static const char __pyx_k_coor[] = "coor";
static const char __pyx_k_cxyz[] = "cxyz";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dipt[] = "dipt";
static const char __pyx_k_dist[] = "dist";
static const char __pyx_k_dot2[] = "dot2";
static const char __pyx_k_edip[] = "edip";
static const char __pyx_k_epa1[] = "epa1";
static const char __pyx_k_f2_0[] = "f2_0";
static const char __pyx_k_f2_1[] = "f2_1";
static const char __pyx_k_f2_2[] = "f2_2";
static const char __pyx_k_f2_x[] = "f2_x";
static const char __pyx_k_f2_y[] = "f2_y";
static const char __pyx_k_f2_z[] = "f2_z";
static const char __pyx_k_idx2[] = "idx2";
static const char __pyx_k_idx3[] = "idx3";
static const char __pyx_k_idx4[] = "idx4";
static const char __pyx_k_int8[] = "int8";
static const char __pyx_k_islt[] = "islt";
static const char __pyx_k_last[] = "last";
static const char __pyx_k_lmax[] = "lmax";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_nmol[] = "nmol";
static const char __pyx_k_nres[] = "nres";
static const char __pyx_k_nwat[] = "nwat";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_roxy[] = "roxy";
static const char __pyx_k_rtre[] = "rtre";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_sumr[] = "sumr";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tmpx[] = "tmpx";
static const char __pyx_k_tmpy[] = "tmpy";
static const char __pyx_k_tmpz[] = "tmpz";
static const char __pyx_k_vels[] = "vels";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_B_out[] = "B_out";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_coorA[] = "coorA";
static const char __pyx_k_coorB[] = "coorB";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dipol[] = "dipol";
static const char __pyx_k_dist2[] = "dist2";
static const char __pyx_k_drude[] = "drude";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_first[] = "first";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_frame[] = "frame";
static const char __pyx_k_gfunc[] = "gfunc";
static const char __pyx_k_hbond[] = "hbond";
static const char __pyx_k_histo[] = "histo";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_nsurr[] = "nsurr";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_py_B1[] = "py_B1";
static const char __pyx_k_py_B2[] = "py_B2";
static const char __pyx_k_py_B3[] = "py_B3";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_shell[] = "shell";
static const char __pyx_k_shift[] = "shift";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_store[] = "store";
static const char __pyx_k_tmp_x[] = "tmp_x";
static const char __pyx_k_tmp_y[] = "tmp_y";
static const char __pyx_k_tmp_z[] = "tmp_z";
static const char __pyx_k_y_mat[] = "y_mat";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_arccos[] = "arccos";
static const char __pyx_k_auf_x1[] = "auf_x1";
static const char __pyx_k_auf_x2[] = "auf_x2";
static const char __pyx_k_auf_y1[] = "auf_y1";
static const char __pyx_k_auf_y2[] = "auf_y2";
static const char __pyx_k_auf_z1[] = "auf_z1";
static const char __pyx_k_auf_z2[] = "auf_z2";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_comslt[] = "comslt";
static const char __pyx_k_cosine[] = "cosine";
static const char __pyx_k_data_x[] = "data_x";
static const char __pyx_k_data_y[] = "data_y";
static const char __pyx_k_deltaA[] = "deltaA";
static const char __pyx_k_dipTen[] = "dipTen";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_energy[] = "energy";
static const char __pyx_k_findDS[] = "findDS";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_masses[] = "masses";
static const char __pyx_k_minvec[] = "minvec";
static const char __pyx_k_n_core[] = "n_core";
static const char __pyx_k_n_surr[] = "n_surr";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_natoms[] = "natoms";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_py_xyz[] = "py_xyz";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_velcom[] = "velcom";
static const char __pyx_k_NQRself[] = "NQRself";
static const char __pyx_k_an_last[] = "an_last";
static const char __pyx_k_arctan2[] = "arctan2";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_charges[] = "charges";
static const char __pyx_k_dip_wat[] = "dip_wat";
static const char __pyx_k_epa_ind[] = "epa_ind";
static const char __pyx_k_epa_oct[] = "epa_oct";
static const char __pyx_k_epa_xyz[] = "epa_xyz";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_isolute[] = "isolute";
static const char __pyx_k_maxdist[] = "maxdist";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_mindist[] = "mindist";
static const char __pyx_k_next_id[] = "next_id";
static const char __pyx_k_nshells[] = "nshells";
static const char __pyx_k_octants[] = "octants";
static const char __pyx_k_py_dipt[] = "py_dipt";
static const char __pyx_k_qq_diff[] = "qq_diff";
static const char __pyx_k_tmp_ind[] = "tmp_ind";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_an_first[] = "an_first";
static const char __pyx_k_aufpunkt[] = "aufpunkt";
static const char __pyx_k_cat_last[] = "cat_last";
static const char __pyx_k_charges1[] = "charges1";
static const char __pyx_k_coor_oh2[] = "coor_oh2";
static const char __pyx_k_epa_perm[] = "epa_perm";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_integral[] = "integral";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_maxshell[] = "maxshell";
static const char __pyx_k_mindist2[] = "mindist2";
static const char __pyx_k_nres_wat[] = "nres_wat";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_sph_harm[] = "sph_harm";
static const char __pyx_k_tmp_ener[] = "tmp_ener";
static const char __pyx_k_tmp_perm[] = "tmp_perm";
static const char __pyx_k_tot_mass[] = "tot_mass";
static const char __pyx_k_NQRdipTen[] = "NQRdipTen";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_cat_first[] = "cat_first";
static const char __pyx_k_conjugate[] = "conjugate";
static const char __pyx_k_coor_core[] = "coor_core";
static const char __pyx_k_coor_surr[] = "coor_surr";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_histo_ind[] = "histo_ind";
static const char __pyx_k_histo_max[] = "histo_max";
static const char __pyx_k_histo_min[] = "histo_min";
static const char __pyx_k_mdcage_ts[] = "mdcage_ts";
static const char __pyx_k_mu_solute[] = "mu_solute";
static const char __pyx_k_nres_surr[] = "nres_surr";
static const char __pyx_k_numpoints[] = "numpoints";
static const char __pyx_k_oxyquinol[] = "oxyquinol";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_sumMDCage[] = "sumMDCage";
static const char __pyx_k_transform[] = "transform";
static const char __pyx_k_trehalose[] = "trehalose";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_calcOctant[] = "calcOctant";
static const char __pyx_k_checkHBond[] = "checkHBond";
static const char __pyx_k_energy_ind[] = "energy_ind";
static const char __pyx_k_energy_xyz[] = "energy_xyz";
static const char __pyx_k_histo_bins[] = "histo_bins";
static const char __pyx_k_histo_perm[] = "histo_perm";
static const char __pyx_k_laplace_im[] = "laplace_im";
static const char __pyx_k_laplace_re[] = "laplace_re";
static const char __pyx_k_nmolecules[] = "nmolecules";
static const char __pyx_k_py_charges[] = "py_charges";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_NQRselfAndB[] = "NQRselfAndB";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_energy_perm[] = "energy_perm";
static const char __pyx_k_exclude_end[] = "exclude_end";
static const char __pyx_k_histo_error[] = "histo_error";
static const char __pyx_k_histo_width[] = "histo_width";
static const char __pyx_k_SphereinCube[] = "SphereinCube";
static const char __pyx_k_calcEnergyAA[] = "calcEnergyAA";
static const char __pyx_k_comByResidue[] = "comByResidue";
static const char __pyx_k_dipByResidue[] = "dipByResidue";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_atomicCurrent[] = "atomicCurrent";
static const char __pyx_k_calcEnergyMuA[] = "calcEnergyMuA";
static const char __pyx_k_energy_octant[] = "energy_octant";
static const char __pyx_k_exclude_begin[] = "exclude_begin";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_scipy_special[] = "scipy.special";
static const char __pyx_k_sites_per_res[] = "sites_per_res";
static const char __pyx_k_sphHarmMatrix[] = "sphHarmMatrix";
static const char __pyx_k_squared_r_oxy[] = "squared_r_oxy";
static const char __pyx_k_squared_r_tre[] = "squared_r_tre";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_calcEnergyAASep[] = "calcEnergyAASep";
static const char __pyx_k_centerOrientBox[] = "centerOrientBox";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_energy_per_atom[] = "energy_per_atom";
static const char __pyx_k_findNearestAtom[] = "findNearestAtom";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_sumMDCageSingle[] = "sumMDCageSingle";
static const char __pyx_k_velcomByResidue[] = "velcomByResidue";
static const char __pyx_k_calcEnergyAtomic[] = "calcEnergyAtomic";
static const char __pyx_k_calcEnergyDouble[] = "calcEnergyDouble";
static const char __pyx_k_atoms_per_residue[] = "atoms_per_residue";
static const char __pyx_k_calcEnergyAAhisto[] = "calcEnergyAAhisto";
static const char __pyx_k_calcInertiaTensor[] = "calcInertiaTensor";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_calcEnergyAAhisto1[] = "calcEnergyAAhisto1";
static const char __pyx_k_calcRotationMatrix[] = "calcRotationMatrix";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_residue_first_atom[] = "residue_first_atom";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_applyRotationMatrix[] = "applyRotationMatrix";
static const char __pyx_k_calcAngularMomentum[] = "calcAngularMomentum";
static const char __pyx_k_calcEnergyAApermind[] = "calcEnergyAApermind";
static const char __pyx_k_energy_xyz_per_atom[] = "energy_xyz_per_atom";
static const char __pyx_k_newanalysis_helpers[] = "newanalysis.helpers";
static const char __pyx_k_waterRotationMatrix[] = "waterRotationMatrix";
static const char __pyx_k_calcEnergyAtomicVoro[] = "calcEnergyAtomicVoro";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_calcDipDipEnergyAtomic[] = "calcDipDipEnergyAtomic";
static const char __pyx_k_centerToPointOrientBox[] = "centerToPointOrientBox";
static const char __pyx_k_energy_octant_per_atom[] = "energy_octant_per_atom";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_calcAngularDisplacement[] = "calcAngularDisplacement";
static const char __pyx_k_calcResidenceTimeseries[] = "calcResidenceTimeseries";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_src_helpers_helpers_pyx[] = "src/helpers/helpers.pyx";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_calcEnergyAApermindhisto[] = "calcEnergyAApermindhisto";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_calcFourierLaplaceTransform[] = "calcFourierLaplaceTransform";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_dipoleMomentNeutralSelection[] = "dipoleMomentNeutralSelection";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Incompatible_checksums_s_vs_0xb0[] = "Incompatible checksums (%s vs 0xb068931 = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_collectiveDipoleMomentWaterShell[] = "collectiveDipoleMomentWaterShells";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_B1;
static PyObject *__pyx_n_s_B2;
static PyObject *__pyx_n_s_B3;
static PyObject *__pyx_n_s_B_out;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_E;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_Exx;
static PyObject *__pyx_n_s_Eyy;
static PyObject *__pyx_n_s_Ezz;
static PyObject *__pyx_n_s_H1x;
static PyObject *__pyx_n_s_H1y;
static PyObject *__pyx_n_s_H1z;
static PyObject *__pyx_n_s_H2x;
static PyObject *__pyx_n_s_H2y;
static PyObject *__pyx_n_s_H2z;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_n_s_NQRdipTen;
static PyObject *__pyx_n_s_NQRself;
static PyObject *__pyx_n_s_NQRselfAndB;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_R;
static PyObject *__pyx_n_s_SphereinCube;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_a1;
static PyObject *__pyx_n_s_a2;
static PyObject *__pyx_n_s_actr;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_an_first;
static PyObject *__pyx_n_s_an_last;
static PyObject *__pyx_n_s_applyRotationMatrix;
static PyObject *__pyx_n_s_apr;
static PyObject *__pyx_n_s_arccos;
static PyObject *__pyx_n_s_arctan2;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_atomicCurrent;
static PyObject *__pyx_n_s_atoms_per_residue;
static PyObject *__pyx_n_s_auf;
static PyObject *__pyx_n_s_auf3;
static PyObject *__pyx_n_s_auf6;
static PyObject *__pyx_n_s_auf_x1;
static PyObject *__pyx_n_s_auf_x2;
static PyObject *__pyx_n_s_auf_y1;
static PyObject *__pyx_n_s_auf_y2;
static PyObject *__pyx_n_s_auf_z1;
static PyObject *__pyx_n_s_auf_z2;
static PyObject *__pyx_n_s_aufpunkt;
static PyObject *__pyx_n_s_azi;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_boxl;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_c1;
static PyObject *__pyx_n_s_c2;
static PyObject *__pyx_n_s_cI;
static PyObject *__pyx_n_s_cL;
static PyObject *__pyx_n_s_c_rv;
static PyObject *__pyx_n_s_calcAngularDisplacement;
static PyObject *__pyx_n_s_calcAngularMomentum;
static PyObject *__pyx_n_s_calcDipDipEnergyAtomic;
static PyObject *__pyx_n_s_calcEnergyAA;
static PyObject *__pyx_n_s_calcEnergyAASep;
static PyObject *__pyx_n_s_calcEnergyAAhisto;
static PyObject *__pyx_n_s_calcEnergyAAhisto1;
static PyObject *__pyx_n_s_calcEnergyAApermind;
static PyObject *__pyx_n_s_calcEnergyAApermindhisto;
static PyObject *__pyx_n_s_calcEnergyAtomic;
static PyObject *__pyx_n_s_calcEnergyAtomicVoro;
static PyObject *__pyx_n_s_calcEnergyDouble;
static PyObject *__pyx_n_s_calcEnergyMuA;
static PyObject *__pyx_n_s_calcFourierLaplaceTransform;
static PyObject *__pyx_n_s_calcInertiaTensor;
static PyObject *__pyx_n_s_calcOctant;
static PyObject *__pyx_n_s_calcResidenceTimeseries;
static PyObject *__pyx_n_s_calcRotationMatrix;
static PyObject *__pyx_n_s_cat_first;
static PyObject *__pyx_n_s_cat_last;
static PyObject *__pyx_n_s_ccom;
static PyObject *__pyx_n_s_cds;
static PyObject *__pyx_n_s_center;
static PyObject *__pyx_n_s_centerOrientBox;
static PyObject *__pyx_n_s_centerToPointOrientBox;
static PyObject *__pyx_n_s_charges;
static PyObject *__pyx_n_s_charges1;
static PyObject *__pyx_n_s_checkHBond;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cn;
static PyObject *__pyx_n_s_coct;
static PyObject *__pyx_n_s_collectiveDipoleMomentWaterShell;
static PyObject *__pyx_n_s_com;
static PyObject *__pyx_n_s_comByResidue;
static PyObject *__pyx_n_s_coms;
static PyObject *__pyx_n_s_comslt;
static PyObject *__pyx_n_s_conjugate;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_coor;
static PyObject *__pyx_n_s_coorA;
static PyObject *__pyx_n_s_coorB;
static PyObject *__pyx_n_s_coor_core;
static PyObject *__pyx_n_s_coor_oh2;
static PyObject *__pyx_n_s_coor_surr;
static PyObject *__pyx_n_s_cosine;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_ctr;
static PyObject *__pyx_n_s_cxyz;
static PyObject *__pyx_n_s_data_x;
static PyObject *__pyx_n_s_data_y;
static PyObject *__pyx_n_s_deltaA;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dip;
static PyObject *__pyx_n_s_dipByResidue;
static PyObject *__pyx_n_s_dipTen;
static PyObject *__pyx_n_s_dip_wat;
static PyObject *__pyx_n_s_dipol;
static PyObject *__pyx_n_s_dipoleMomentNeutralSelection;
static PyObject *__pyx_n_s_dipt;
static PyObject *__pyx_n_s_dist;
static PyObject *__pyx_n_s_dist2;
static PyObject *__pyx_n_s_dot;
static PyObject *__pyx_n_s_dot2;
static PyObject *__pyx_n_s_drude;
static PyObject *__pyx_n_s_ds;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_dx;
static PyObject *__pyx_n_s_dx2;
static PyObject *__pyx_n_s_dy;
static PyObject *__pyx_n_s_dy2;
static PyObject *__pyx_n_s_dz;
static PyObject *__pyx_n_s_dz2;
static PyObject *__pyx_n_s_edip;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_energy;
static PyObject *__pyx_n_s_energy_ind;
static PyObject *__pyx_n_s_energy_octant;
static PyObject *__pyx_n_s_energy_octant_per_atom;
static PyObject *__pyx_n_s_energy_per_atom;
static PyObject *__pyx_n_s_energy_perm;
static PyObject *__pyx_n_s_energy_xyz;
static PyObject *__pyx_n_s_energy_xyz_per_atom;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_epa;
static PyObject *__pyx_n_s_epa1;
static PyObject *__pyx_n_s_epa_ind;
static PyObject *__pyx_n_s_epa_oct;
static PyObject *__pyx_n_s_epa_perm;
static PyObject *__pyx_n_s_epa_xyz;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exclude_begin;
static PyObject *__pyx_n_s_exclude_end;
static PyObject *__pyx_n_s_f1;
static PyObject *__pyx_n_s_f2;
static PyObject *__pyx_n_s_f2_0;
static PyObject *__pyx_n_s_f2_1;
static PyObject *__pyx_n_s_f2_2;
static PyObject *__pyx_n_s_f2_x;
static PyObject *__pyx_n_s_f2_y;
static PyObject *__pyx_n_s_f2_z;
static PyObject *__pyx_n_s_findDS;
static PyObject *__pyx_n_s_findNearestAtom;
static PyObject *__pyx_n_s_first;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_frame;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gfunc;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_hbond;
static PyObject *__pyx_n_s_histo;
static PyObject *__pyx_n_s_histo_bins;
static PyObject *__pyx_n_s_histo_error;
static PyObject *__pyx_n_s_histo_ind;
static PyObject *__pyx_n_s_histo_max;
static PyObject *__pyx_n_s_histo_min;
static PyObject *__pyx_n_s_histo_perm;
static PyObject *__pyx_n_s_histo_width;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_idx2;
static PyObject *__pyx_n_s_idx3;
static PyObject *__pyx_n_s_idx4;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_ind;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int8;
static PyObject *__pyx_n_s_integral;
static PyObject *__pyx_n_s_islt;
static PyObject *__pyx_n_s_isolute;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_l1;
static PyObject *__pyx_n_s_l2;
static PyObject *__pyx_n_s_laplace_im;
static PyObject *__pyx_n_s_laplace_re;
static PyObject *__pyx_n_s_last;
static PyObject *__pyx_n_s_lmax;
static PyObject *__pyx_n_s_m1;
static PyObject *__pyx_n_s_m1r;
static PyObject *__pyx_n_s_m2;
static PyObject *__pyx_n_s_m2r;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_masses;
static PyObject *__pyx_n_s_maxdist;
static PyObject *__pyx_n_s_maxshell;
static PyObject *__pyx_n_s_mdcage_ts;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mindist;
static PyObject *__pyx_n_s_mindist2;
static PyObject *__pyx_n_s_minvec;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_msd;
static PyObject *__pyx_n_s_mu_solute;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n1;
static PyObject *__pyx_n_s_n2;
static PyObject *__pyx_n_s_n3;
static PyObject *__pyx_n_s_n_core;
static PyObject *__pyx_n_s_n_surr;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_nat;
static PyObject *__pyx_n_s_natoms;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_newanalysis_helpers;
static PyObject *__pyx_n_s_next_id;
static PyObject *__pyx_n_s_nmol;
static PyObject *__pyx_n_s_nmolecules;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_nres;
static PyObject *__pyx_n_s_nres_surr;
static PyObject *__pyx_n_s_nres_wat;
static PyObject *__pyx_n_s_nshells;
static PyObject *__pyx_n_s_nsurr;
static PyObject *__pyx_n_s_nt;
static PyObject *__pyx_n_s_numpoints;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_nwat;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_octants;
static PyObject *__pyx_n_s_oxyquinol;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pol;
static PyObject *__pyx_n_s_pyE;
static PyObject *__pyx_n_s_py_B1;
static PyObject *__pyx_n_s_py_B2;
static PyObject *__pyx_n_s_py_B3;
static PyObject *__pyx_n_s_py_charges;
static PyObject *__pyx_n_s_py_dipt;
static PyObject *__pyx_n_s_py_xyz;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_q;
static PyObject *__pyx_n_s_qq;
static PyObject *__pyx_n_s_qq_diff;
static PyObject *__pyx_n_s_qqr;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_r2;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_rep;
static PyObject *__pyx_n_s_residue_first_atom;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_rfa;
static PyObject *__pyx_n_s_roxy;
static PyObject *__pyx_n_s_rtre;
static PyObject *__pyx_n_s_rv;
static PyObject *__pyx_n_s_scipy_special;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shell;
static PyObject *__pyx_n_s_shift;
static PyObject *__pyx_n_s_sites_per_res;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sphHarmMatrix;
static PyObject *__pyx_n_s_sph_harm;
static PyObject *__pyx_n_s_squared_r_oxy;
static PyObject *__pyx_n_s_squared_r_tre;
static PyObject *__pyx_kp_s_src_helpers_helpers_pyx;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_store;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_sumMDCage;
static PyObject *__pyx_n_s_sumMDCageSingle;
static PyObject *__pyx_n_s_sumr;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tmp;
static PyObject *__pyx_n_s_tmp_ener;
static PyObject *__pyx_n_s_tmp_ind;
static PyObject *__pyx_n_s_tmp_perm;
static PyObject *__pyx_n_s_tmp_x;
static PyObject *__pyx_n_s_tmp_y;
static PyObject *__pyx_n_s_tmp_z;
static PyObject *__pyx_n_s_tmpx;
static PyObject *__pyx_n_s_tmpy;
static PyObject *__pyx_n_s_tmpz;
static PyObject *__pyx_n_s_tn;
static PyObject *__pyx_n_s_tot_mass;
static PyObject *__pyx_n_s_transform;
static PyObject *__pyx_n_s_trehalose;
static PyObject *__pyx_n_s_ts;
static PyObject *__pyx_n_s_tyH;
static PyObject *__pyx_n_s_tzH;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_vel;
static PyObject *__pyx_n_s_velcom;
static PyObject *__pyx_n_s_velcomByResidue;
static PyObject *__pyx_n_s_vels;
static PyObject *__pyx_n_s_vol;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_waterRotationMatrix;
static PyObject *__pyx_n_s_wt;
static PyObject *__pyx_n_s_wt1;
static PyObject *__pyx_n_s_wts;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xyz;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y_mat;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_11newanalysis_7helpers_SphereinCube(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_A, int __pyx_v_numpoints, double __pyx_v_gfunc, double __pyx_v_deltaA); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_2velcomByResidue(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_vels, __Pyx_memviewslice __pyx_v_masses, int __pyx_v_nres, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_4comByResidue(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_masses, int __pyx_v_nres, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_6dipByResidue(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, CYTHON_UNUSED __Pyx_memviewslice __pyx_v_masses, int __pyx_v_nres, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, __Pyx_memviewslice __pyx_v_com); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_8dipoleMomentNeutralSelection(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_10collectiveDipoleMomentWaterShells(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_ds, int __pyx_v_nshells); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_12atomicCurrent(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_vel, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_result, int __pyx_v_ctr); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_14centerOrientBox(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_com, __Pyx_memviewslice __pyx_v_coor, double __pyx_v_boxl, int __pyx_v_isolute, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, __Pyx_memviewslice __pyx_v_coorA, __Pyx_memviewslice __pyx_v_coorB); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_16centerToPointOrientBox(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_com, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_center, double __pyx_v_boxl, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, __Pyx_memviewslice __pyx_v_coorA, __Pyx_memviewslice __pyx_v_coorB); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_18calcEnergyAA(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_20calcEnergyMuA(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, __Pyx_memviewslice __pyx_v_mu_solute); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_22calcEnergyAApermind(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, CYTHON_UNUSED __Pyx_memviewslice __pyx_v_coms, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_first, int __pyx_v_last, __Pyx_memviewslice __pyx_v_drude); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_24calcEnergyAAhisto(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_coms, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, double __pyx_v_histo_min, double __pyx_v_histo_max, int __pyx_v_histo_bins, __Pyx_memviewslice __pyx_v_trehalose, __Pyx_memviewslice __pyx_v_oxyquinol); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_26calcEnergyAAhisto1(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_coms, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, double __pyx_v_histo_min, double __pyx_v_histo_max, int __pyx_v_histo_bins, __Pyx_memviewslice __pyx_v_trehalose); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_28calcEnergyAApermindhisto(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_coms, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_first, int __pyx_v_last, __Pyx_memviewslice __pyx_v_drude, double __pyx_v_histo_min, double __pyx_v_histo_max, int __pyx_v_histo_bins); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_30calcEnergyAtomic(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, int __pyx_v_exclude_begin, int __pyx_v_exclude_end); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_32calcEnergyDouble(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges1, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, int __pyx_v_start, int __pyx_v_end); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_34calcDipDipEnergyAtomic(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coms, __Pyx_memviewslice __pyx_v_dipol, int __pyx_v_isolute, int __pyx_v_nmol, int __pyx_v_exclude_begin, int __pyx_v_exclude_end); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_36calcEnergyAtomicVoro(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, __Pyx_memviewslice __pyx_v_ds, int __pyx_v_maxshell); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_38calcEnergyAASep(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_xyz, PyArrayObject *__pyx_v_charges, PyArrayObject *__pyx_v_atoms_per_residue, PyArrayObject *__pyx_v_residue_first_atom, PyArrayObject *__pyx_v_ds, PyObject *__pyx_v_isolute, PyObject *__pyx_v_nmolecules, PyObject *__pyx_v_cat_first, PyObject *__pyx_v_cat_last, PyObject *__pyx_v_an_first, PyObject *__pyx_v_an_last, PyArrayObject *__pyx_v_octants); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_40findDS(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_ds, __Pyx_memviewslice __pyx_v_cn, CYTHON_UNUSED int __pyx_v_n1, int __pyx_v_n2, int __pyx_v_shell, int __pyx_v_t); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_42dipTen(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_rv, __pyx_t_5numpy_float64_t __pyx_v_r2); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_44NQRself(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_py_xyz); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_46waterRotationMatrix(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_48NQRselfAndB(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_py_xyz); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_50NQRdipTen(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_py_xyz, PyArrayObject *__pyx_v_py_charges, PyObject *__pyx_v_aufpunkt); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_52calcOctant(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_com, PyObject *__pyx_v_isolute, PyObject *__pyx_v_nmolecules); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_54sumMDCage(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_mdcage_ts, __Pyx_memviewslice __pyx_v_dip_wat, int __pyx_v_nres_wat, __Pyx_memviewslice __pyx_v_ds, int __pyx_v_maxshell, int __pyx_v_rep, int __pyx_v_frame); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_56sumMDCageSingle(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_mdcage_ts, __Pyx_memviewslice __pyx_v_dip_wat, __Pyx_memviewslice __pyx_v_ds, int __pyx_v_maxshell, int __pyx_v_frame); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_58calcAngularMomentum(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_vel, __Pyx_memviewslice __pyx_v_masses, int __pyx_v_natoms); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_60calcInertiaTensor(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_masses, int __pyx_v_natoms); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_62calcResidenceTimeseries(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_ds, int __pyx_v_nshells); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_64calcAngularDisplacement(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_wts, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_66findNearestAtom(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor_core, __Pyx_memviewslice __pyx_v_coor_surr, __Pyx_memviewslice __pyx_v_mindist, __Pyx_memviewslice __pyx_v_mindist2, __Pyx_memviewslice __pyx_v_minvec, __Pyx_memviewslice __pyx_v_next_id); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_68checkHBond(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor_surr, __Pyx_memviewslice __pyx_v_coor_oh2, int __pyx_v_nres_surr, double __pyx_v_maxdist); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_70sphHarmMatrix(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_y_mat, int __pyx_v_lmax); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_72calcFourierLaplaceTransform(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_data_x, __Pyx_memviewslice __pyx_v_data_y, double __pyx_v_w); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_74calcRotationMatrix(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coorA, __Pyx_memviewslice __pyx_v_coorB); /* proto */
static PyObject *__pyx_pf_11newanalysis_7helpers_76applyRotationMatrix(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_R); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_2400;
static PyObject *__pyx_float_1_8086;
static PyObject *__pyx_float_1390_02;
static PyObject *__pyx_float_neg_2_0487;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_slice__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__110;
/* Late includes */

/* "src/helpers/helpers.pyx":20
 *     void GetRotation(double *R_ptr, int n, double *APoints_ptr, double *BPoints_ptr, int debug)
 * 
 * cdef int sgn2bin(double val):             # <<<<<<<<<<<<<<
 *      return (<double> 0.0 < val)
 * 
 */

static int __pyx_f_11newanalysis_7helpers_sgn2bin(double __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgn2bin", 0);

  /* "src/helpers/helpers.pyx":21
 * 
 * cdef int sgn2bin(double val):
 *      return (<double> 0.0 < val)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = (((double)0.0) < __pyx_v_val);
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":20
 *     void GetRotation(double *R_ptr, int n, double *APoints_ptr, double *BPoints_ptr, int debug)
 * 
 * cdef int sgn2bin(double val):             # <<<<<<<<<<<<<<
 *      return (<double> 0.0 < val)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":24
 * 
 * @cython.boundscheck(False)
 * def SphereinCube(double A, int numpoints, double gfunc, double deltaA):             # <<<<<<<<<<<<<<
 *     cdef int i, j, k, sumr
 *     cdef double vol,x,y,z
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_1SphereinCube(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_1SphereinCube = {"SphereinCube", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_1SphereinCube, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_1SphereinCube(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_A;
  int __pyx_v_numpoints;
  double __pyx_v_gfunc;
  double __pyx_v_deltaA;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SphereinCube (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_numpoints,&__pyx_n_s_gfunc,&__pyx_n_s_deltaA,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_numpoints)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SphereinCube", 1, 4, 4, 1); __PYX_ERR(0, 24, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gfunc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SphereinCube", 1, 4, 4, 2); __PYX_ERR(0, 24, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_deltaA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SphereinCube", 1, 4, 4, 3); __PYX_ERR(0, 24, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SphereinCube") < 0)) __PYX_ERR(0, 24, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_A = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L3_error)
    __pyx_v_numpoints = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_numpoints == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L3_error)
    __pyx_v_gfunc = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_gfunc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L3_error)
    __pyx_v_deltaA = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_deltaA == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SphereinCube", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 24, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.SphereinCube", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_SphereinCube(__pyx_self, __pyx_v_A, __pyx_v_numpoints, __pyx_v_gfunc, __pyx_v_deltaA);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_SphereinCube(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_A, int __pyx_v_numpoints, double __pyx_v_gfunc, double __pyx_v_deltaA) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_sumr;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SphereinCube", 0);

  /* "src/helpers/helpers.pyx":28
 *     cdef double vol,x,y,z
 * 
 *     sumr=0             # <<<<<<<<<<<<<<
 *     for i in prange(numpoints,nogil=True):
 *         x=-A/2+(i+0.5)*deltaA
 */
  __pyx_v_sumr = 0;

  /* "src/helpers/helpers.pyx":29
 * 
 *     sumr=0
 *     for i in prange(numpoints,nogil=True):             # <<<<<<<<<<<<<<
 *         x=-A/2+(i+0.5)*deltaA
 *         for j in range(numpoints):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_1 = __pyx_v_numpoints;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_3 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel reduction(+:__pyx_v_sumr) private(__pyx_t_10, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j) lastprivate(__pyx_v_k) lastprivate(__pyx_v_x) lastprivate(__pyx_v_y) lastprivate(__pyx_v_z)
                    #endif /* _OPENMP */
                    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_2);
                            /* Initialize private variables to invalid values */
                            __pyx_v_j = ((int)0xbad0bad0);
                            __pyx_v_k = ((int)0xbad0bad0);
                            __pyx_v_x = ((double)__PYX_NAN());
                            __pyx_v_y = ((double)__PYX_NAN());
                            __pyx_v_z = ((double)__PYX_NAN());

                            /* "src/helpers/helpers.pyx":30
 *     sumr=0
 *     for i in prange(numpoints,nogil=True):
 *         x=-A/2+(i+0.5)*deltaA             # <<<<<<<<<<<<<<
 *         for j in range(numpoints):
 *             y=-A/2+(j+0.5)*deltaA
 */
                            __pyx_v_x = (((-__pyx_v_A) / 2.0) + ((__pyx_v_i + 0.5) * __pyx_v_deltaA));

                            /* "src/helpers/helpers.pyx":31
 *     for i in prange(numpoints,nogil=True):
 *         x=-A/2+(i+0.5)*deltaA
 *         for j in range(numpoints):             # <<<<<<<<<<<<<<
 *             y=-A/2+(j+0.5)*deltaA
 *             for k in range(numpoints):
 */
                            __pyx_t_4 = __pyx_v_numpoints;
                            __pyx_t_5 = __pyx_t_4;
                            for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
                              __pyx_v_j = __pyx_t_6;

                              /* "src/helpers/helpers.pyx":32
 *         x=-A/2+(i+0.5)*deltaA
 *         for j in range(numpoints):
 *             y=-A/2+(j+0.5)*deltaA             # <<<<<<<<<<<<<<
 *             for k in range(numpoints):
 *                 z=-A/2+(k+0.5)*deltaA
 */
                              __pyx_v_y = (((-__pyx_v_A) / 2.0) + ((__pyx_v_j + 0.5) * __pyx_v_deltaA));

                              /* "src/helpers/helpers.pyx":33
 *         for j in range(numpoints):
 *             y=-A/2+(j+0.5)*deltaA
 *             for k in range(numpoints):             # <<<<<<<<<<<<<<
 *                 z=-A/2+(k+0.5)*deltaA
 * 
 */
                              __pyx_t_7 = __pyx_v_numpoints;
                              __pyx_t_8 = __pyx_t_7;
                              for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
                                __pyx_v_k = __pyx_t_9;

                                /* "src/helpers/helpers.pyx":34
 *             y=-A/2+(j+0.5)*deltaA
 *             for k in range(numpoints):
 *                 z=-A/2+(k+0.5)*deltaA             # <<<<<<<<<<<<<<
 * 
 *                 if x*x+y*y+z*z <= gfunc**2:
 */
                                __pyx_v_z = (((-__pyx_v_A) / 2.0) + ((__pyx_v_k + 0.5) * __pyx_v_deltaA));

                                /* "src/helpers/helpers.pyx":36
 *                 z=-A/2+(k+0.5)*deltaA
 * 
 *                 if x*x+y*y+z*z <= gfunc**2:             # <<<<<<<<<<<<<<
 *                     sumr+=1
 *     return(sumr)
 */
                                __pyx_t_10 = (((((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y)) + (__pyx_v_z * __pyx_v_z)) <= pow(__pyx_v_gfunc, 2.0)) != 0);
                                if (__pyx_t_10) {

                                  /* "src/helpers/helpers.pyx":37
 * 
 *                 if x*x+y*y+z*z <= gfunc**2:
 *                     sumr+=1             # <<<<<<<<<<<<<<
 *     return(sumr)
 * 
 */
                                  __pyx_v_sumr = (__pyx_v_sumr + 1);

                                  /* "src/helpers/helpers.pyx":36
 *                 z=-A/2+(k+0.5)*deltaA
 * 
 *                 if x*x+y*y+z*z <= gfunc**2:             # <<<<<<<<<<<<<<
 *                     sumr+=1
 *     return(sumr)
 */
                                }
                              }
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":29
 * 
 *     sumr=0
 *     for i in prange(numpoints,nogil=True):             # <<<<<<<<<<<<<<
 *         x=-A/2+(i+0.5)*deltaA
 *         for j in range(numpoints):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":38
 *                 if x*x+y*y+z*z <= gfunc**2:
 *                     sumr+=1
 *     return(sumr)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_sumr); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_r = __pyx_t_11;
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":24
 * 
 * @cython.boundscheck(False)
 * def SphereinCube(double A, int numpoints, double gfunc, double deltaA):             # <<<<<<<<<<<<<<
 *     cdef int i, j, k, sumr
 *     cdef double vol,x,y,z
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("newanalysis.helpers.SphereinCube", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":41
 * 
 * @cython.boundscheck(False)
 * def velcomByResidue(double [:,:] vels, double [:] masses, int nres, int [:] apr, int [:] rfa):             # <<<<<<<<<<<<<<
 *     """
 *     velcomByResidue(vels,masses,nres,atoms_per_residue)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_3velcomByResidue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_2velcomByResidue[] = "\n    velcomByResidue(vels,masses,nres,atoms_per_residue)\n\n    Calculates the center-of-mass velocities for a given selection.\n\n    ####\n    NOTE\n    ####\n    Don't call this function directly, use the AtomGroup interface instead!\n    E.g. for an atom selection 'sel', call \n\n    velcom = sel.velcomByResidue()    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_3velcomByResidue = {"velcomByResidue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_3velcomByResidue, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_2velcomByResidue};
static PyObject *__pyx_pw_11newanalysis_7helpers_3velcomByResidue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_vels = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_masses = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_nres;
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("velcomByResidue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vels,&__pyx_n_s_masses,&__pyx_n_s_nres,&__pyx_n_s_apr,&__pyx_n_s_rfa,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vels)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_masses)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("velcomByResidue", 1, 5, 5, 1); __PYX_ERR(0, 41, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nres)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("velcomByResidue", 1, 5, 5, 2); __PYX_ERR(0, 41, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("velcomByResidue", 1, 5, 5, 3); __PYX_ERR(0, 41, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("velcomByResidue", 1, 5, 5, 4); __PYX_ERR(0, 41, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "velcomByResidue") < 0)) __PYX_ERR(0, 41, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_vels = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_vels.memview)) __PYX_ERR(0, 41, __pyx_L3_error)
    __pyx_v_masses = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_masses.memview)) __PYX_ERR(0, 41, __pyx_L3_error)
    __pyx_v_nres = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nres == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 41, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 41, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 41, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("velcomByResidue", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 41, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.velcomByResidue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_2velcomByResidue(__pyx_self, __pyx_v_vels, __pyx_v_masses, __pyx_v_nres, __pyx_v_apr, __pyx_v_rfa);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_2velcomByResidue(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_vels, __Pyx_memviewslice __pyx_v_masses, int __pyx_v_nres, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa) {
  __Pyx_memviewslice __pyx_v_velcom = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_actr;
  double __pyx_v_tot_mass;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("velcomByResidue", 0);

  /* "src/helpers/helpers.pyx":56
 *     """
 * 
 *     cdef double [:,:] velcom = np.zeros((nres,3))             # <<<<<<<<<<<<<<
 *     cdef int i, j, k, actr
 *     cdef double tot_mass
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_nres); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_velcom = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "src/helpers/helpers.pyx":60
 *     cdef double tot_mass
 * 
 *     for i in prange(nres, nogil=True):             # <<<<<<<<<<<<<<
 *         tot_mass = 0.0
 *         for j in range(apr[i]):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_6 = __pyx_v_nres;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_8 = (__pyx_t_6 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_8 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel reduction(+:__pyx_v_tot_mass) private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_9)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for lastprivate(__pyx_v_actr) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j) lastprivate(__pyx_v_k)
                    #endif /* _OPENMP */
                    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_8; __pyx_t_7++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_7);
                            /* Initialize private variables to invalid values */
                            __pyx_v_actr = ((int)0xbad0bad0);
                            __pyx_v_j = ((int)0xbad0bad0);
                            __pyx_v_k = ((int)0xbad0bad0);

                            /* "src/helpers/helpers.pyx":61
 * 
 *     for i in prange(nres, nogil=True):
 *         tot_mass = 0.0             # <<<<<<<<<<<<<<
 *         for j in range(apr[i]):
 *             actr = rfa[i] + j
 */
                            __pyx_v_tot_mass = 0.0;

                            /* "src/helpers/helpers.pyx":62
 *     for i in prange(nres, nogil=True):
 *         tot_mass = 0.0
 *         for j in range(apr[i]):             # <<<<<<<<<<<<<<
 *             actr = rfa[i] + j
 *             for k in range(3):
 */
                            __pyx_t_9 = __pyx_v_i;
                            if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_apr.shape[0];
                            __pyx_t_10 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_9 * __pyx_v_apr.strides[0]) )));
                            __pyx_t_11 = __pyx_t_10;
                            for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
                              __pyx_v_j = __pyx_t_12;

                              /* "src/helpers/helpers.pyx":63
 *         tot_mass = 0.0
 *         for j in range(apr[i]):
 *             actr = rfa[i] + j             # <<<<<<<<<<<<<<
 *             for k in range(3):
 *                 velcom[i,k] += vels[actr,k] * masses[actr]
 */
                              __pyx_t_9 = __pyx_v_i;
                              if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_rfa.shape[0];
                              __pyx_v_actr = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_9 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_j);

                              /* "src/helpers/helpers.pyx":64
 *         for j in range(apr[i]):
 *             actr = rfa[i] + j
 *             for k in range(3):             # <<<<<<<<<<<<<<
 *                 velcom[i,k] += vels[actr,k] * masses[actr]
 *             tot_mass += masses[actr]
 */
                              for (__pyx_t_13 = 0; __pyx_t_13 < 3; __pyx_t_13+=1) {
                                __pyx_v_k = __pyx_t_13;

                                /* "src/helpers/helpers.pyx":65
 *             actr = rfa[i] + j
 *             for k in range(3):
 *                 velcom[i,k] += vels[actr,k] * masses[actr]             # <<<<<<<<<<<<<<
 *             tot_mass += masses[actr]
 *         for k in range(3):
 */
                                __pyx_t_9 = __pyx_v_actr;
                                __pyx_t_14 = __pyx_v_k;
                                if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_vels.shape[0];
                                if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_vels.shape[1];
                                __pyx_t_15 = __pyx_v_actr;
                                if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_masses.shape[0];
                                __pyx_t_16 = __pyx_v_i;
                                __pyx_t_17 = __pyx_v_k;
                                if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_velcom.shape[0];
                                if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_velcom.shape[1];
                                *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_velcom.data + __pyx_t_16 * __pyx_v_velcom.strides[0]) ) + __pyx_t_17 * __pyx_v_velcom.strides[1]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vels.data + __pyx_t_9 * __pyx_v_vels.strides[0]) ) + __pyx_t_14 * __pyx_v_vels.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_15 * __pyx_v_masses.strides[0]) ))));
                              }

                              /* "src/helpers/helpers.pyx":66
 *             for k in range(3):
 *                 velcom[i,k] += vels[actr,k] * masses[actr]
 *             tot_mass += masses[actr]             # <<<<<<<<<<<<<<
 *         for k in range(3):
 *             velcom[i,k] /= tot_mass
 */
                              __pyx_t_15 = __pyx_v_actr;
                              if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_masses.shape[0];
                              __pyx_v_tot_mass = (__pyx_v_tot_mass + (*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_15 * __pyx_v_masses.strides[0]) ))));
                            }

                            /* "src/helpers/helpers.pyx":67
 *                 velcom[i,k] += vels[actr,k] * masses[actr]
 *             tot_mass += masses[actr]
 *         for k in range(3):             # <<<<<<<<<<<<<<
 *             velcom[i,k] /= tot_mass
 * 
 */
                            for (__pyx_t_10 = 0; __pyx_t_10 < 3; __pyx_t_10+=1) {
                              __pyx_v_k = __pyx_t_10;

                              /* "src/helpers/helpers.pyx":68
 *             tot_mass += masses[actr]
 *         for k in range(3):
 *             velcom[i,k] /= tot_mass             # <<<<<<<<<<<<<<
 * 
 *     return np.asarray(velcom)
 */
                              __pyx_t_15 = __pyx_v_i;
                              __pyx_t_14 = __pyx_v_k;
                              if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_velcom.shape[0];
                              if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_velcom.shape[1];
                              *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_velcom.data + __pyx_t_15 * __pyx_v_velcom.strides[0]) ) + __pyx_t_14 * __pyx_v_velcom.strides[1]) )) /= __pyx_v_tot_mass;
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":60
 *     cdef double tot_mass
 * 
 *     for i in prange(nres, nogil=True):             # <<<<<<<<<<<<<<
 *         tot_mass = 0.0
 *         for j in range(apr[i]):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":70
 *             velcom[i,k] /= tot_mass
 * 
 *     return np.asarray(velcom)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_velcom, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":41
 * 
 * @cython.boundscheck(False)
 * def velcomByResidue(double [:,:] vels, double [:] masses, int nres, int [:] apr, int [:] rfa):             # <<<<<<<<<<<<<<
 *     """
 *     velcomByResidue(vels,masses,nres,atoms_per_residue)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __Pyx_AddTraceback("newanalysis.helpers.velcomByResidue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_velcom, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_vels, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_masses, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":73
 * 
 * @cython.boundscheck(False)
 * def comByResidue(double [:,:] coor, double [:] masses, int nres, int [:] apr, int [:] rfa):             # <<<<<<<<<<<<<<
 *     """
 *     comByResidue(coor,masses,nres,atoms_per_residue)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_5comByResidue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_4comByResidue[] = "\n    comByResidue(coor,masses,nres,atoms_per_residue)\n\n    Calculates the center-of-mass coordinates for a given selection.\n\n    ####\n    NOTE\n    ####\n    Don't call this function directly, use the AtomGroup interface instead!\n    E.g. for an atom selection 'sel', call \n\n    com = sel.comByResidue()    \n\n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_5comByResidue = {"comByResidue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_5comByResidue, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_4comByResidue};
static PyObject *__pyx_pw_11newanalysis_7helpers_5comByResidue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_masses = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_nres;
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("comByResidue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_masses,&__pyx_n_s_nres,&__pyx_n_s_apr,&__pyx_n_s_rfa,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_masses)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("comByResidue", 1, 5, 5, 1); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nres)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("comByResidue", 1, 5, 5, 2); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("comByResidue", 1, 5, 5, 3); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("comByResidue", 1, 5, 5, 4); __PYX_ERR(0, 73, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "comByResidue") < 0)) __PYX_ERR(0, 73, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 73, __pyx_L3_error)
    __pyx_v_masses = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_masses.memview)) __PYX_ERR(0, 73, __pyx_L3_error)
    __pyx_v_nres = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nres == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 73, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 73, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("comByResidue", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 73, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.comByResidue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_4comByResidue(__pyx_self, __pyx_v_coor, __pyx_v_masses, __pyx_v_nres, __pyx_v_apr, __pyx_v_rfa);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_4comByResidue(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_masses, int __pyx_v_nres, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa) {
  __Pyx_memviewslice __pyx_v_com = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_actr;
  double __pyx_v_tot_mass;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("comByResidue", 0);

  /* "src/helpers/helpers.pyx":89
 *     """
 * 
 *     cdef double [:,:] com = np.zeros((nres,3))             # <<<<<<<<<<<<<<
 *     cdef int i, j, k, actr
 *     cdef double tot_mass
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_nres); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_com = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "src/helpers/helpers.pyx":93
 *     cdef double tot_mass
 * 
 *     for i in prange(nres, nogil=True):             # <<<<<<<<<<<<<<
 *         tot_mass = 0.0
 *         for j in range(apr[i]):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_6 = __pyx_v_nres;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_8 = (__pyx_t_6 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_8 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel reduction(+:__pyx_v_tot_mass) private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_9)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for lastprivate(__pyx_v_actr) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j) lastprivate(__pyx_v_k)
                    #endif /* _OPENMP */
                    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_8; __pyx_t_7++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_7);
                            /* Initialize private variables to invalid values */
                            __pyx_v_actr = ((int)0xbad0bad0);
                            __pyx_v_j = ((int)0xbad0bad0);
                            __pyx_v_k = ((int)0xbad0bad0);

                            /* "src/helpers/helpers.pyx":94
 * 
 *     for i in prange(nres, nogil=True):
 *         tot_mass = 0.0             # <<<<<<<<<<<<<<
 *         for j in range(apr[i]):
 *             actr = rfa[i] + j
 */
                            __pyx_v_tot_mass = 0.0;

                            /* "src/helpers/helpers.pyx":95
 *     for i in prange(nres, nogil=True):
 *         tot_mass = 0.0
 *         for j in range(apr[i]):             # <<<<<<<<<<<<<<
 *             actr = rfa[i] + j
 *             for k in range(3):
 */
                            __pyx_t_9 = __pyx_v_i;
                            if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_apr.shape[0];
                            __pyx_t_10 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_9 * __pyx_v_apr.strides[0]) )));
                            __pyx_t_11 = __pyx_t_10;
                            for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
                              __pyx_v_j = __pyx_t_12;

                              /* "src/helpers/helpers.pyx":96
 *         tot_mass = 0.0
 *         for j in range(apr[i]):
 *             actr = rfa[i] + j             # <<<<<<<<<<<<<<
 *             for k in range(3):
 *                 com[i,k] += coor[actr,k] * masses[actr]
 */
                              __pyx_t_9 = __pyx_v_i;
                              if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_rfa.shape[0];
                              __pyx_v_actr = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_9 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_j);

                              /* "src/helpers/helpers.pyx":97
 *         for j in range(apr[i]):
 *             actr = rfa[i] + j
 *             for k in range(3):             # <<<<<<<<<<<<<<
 *                 com[i,k] += coor[actr,k] * masses[actr]
 *             tot_mass += masses[actr]
 */
                              for (__pyx_t_13 = 0; __pyx_t_13 < 3; __pyx_t_13+=1) {
                                __pyx_v_k = __pyx_t_13;

                                /* "src/helpers/helpers.pyx":98
 *             actr = rfa[i] + j
 *             for k in range(3):
 *                 com[i,k] += coor[actr,k] * masses[actr]             # <<<<<<<<<<<<<<
 *             tot_mass += masses[actr]
 *         for k in range(3):
 */
                                __pyx_t_9 = __pyx_v_actr;
                                __pyx_t_14 = __pyx_v_k;
                                if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[0];
                                if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[1];
                                __pyx_t_15 = __pyx_v_actr;
                                if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_masses.shape[0];
                                __pyx_t_16 = __pyx_v_i;
                                __pyx_t_17 = __pyx_v_k;
                                if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_com.shape[0];
                                if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_com.shape[1];
                                *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_com.data + __pyx_t_16 * __pyx_v_com.strides[0]) ) + __pyx_t_17 * __pyx_v_com.strides[1]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_9 * __pyx_v_coor.strides[0]) ) + __pyx_t_14 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_15 * __pyx_v_masses.strides[0]) ))));
                              }

                              /* "src/helpers/helpers.pyx":99
 *             for k in range(3):
 *                 com[i,k] += coor[actr,k] * masses[actr]
 *             tot_mass += masses[actr]             # <<<<<<<<<<<<<<
 *         for k in range(3):
 *             com[i,k] /= tot_mass
 */
                              __pyx_t_15 = __pyx_v_actr;
                              if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_masses.shape[0];
                              __pyx_v_tot_mass = (__pyx_v_tot_mass + (*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_15 * __pyx_v_masses.strides[0]) ))));
                            }

                            /* "src/helpers/helpers.pyx":100
 *                 com[i,k] += coor[actr,k] * masses[actr]
 *             tot_mass += masses[actr]
 *         for k in range(3):             # <<<<<<<<<<<<<<
 *             com[i,k] /= tot_mass
 * 
 */
                            for (__pyx_t_10 = 0; __pyx_t_10 < 3; __pyx_t_10+=1) {
                              __pyx_v_k = __pyx_t_10;

                              /* "src/helpers/helpers.pyx":101
 *             tot_mass += masses[actr]
 *         for k in range(3):
 *             com[i,k] /= tot_mass             # <<<<<<<<<<<<<<
 * 
 *     return np.asarray(com)
 */
                              __pyx_t_15 = __pyx_v_i;
                              __pyx_t_14 = __pyx_v_k;
                              if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_com.shape[0];
                              if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_com.shape[1];
                              *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_com.data + __pyx_t_15 * __pyx_v_com.strides[0]) ) + __pyx_t_14 * __pyx_v_com.strides[1]) )) /= __pyx_v_tot_mass;
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":93
 *     cdef double tot_mass
 * 
 *     for i in prange(nres, nogil=True):             # <<<<<<<<<<<<<<
 *         tot_mass = 0.0
 *         for j in range(apr[i]):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":103
 *             com[i,k] /= tot_mass
 * 
 *     return np.asarray(com)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_com, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":73
 * 
 * @cython.boundscheck(False)
 * def comByResidue(double [:,:] coor, double [:] masses, int nres, int [:] apr, int [:] rfa):             # <<<<<<<<<<<<<<
 *     """
 *     comByResidue(coor,masses,nres,atoms_per_residue)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __Pyx_AddTraceback("newanalysis.helpers.comByResidue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_com, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_masses, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":106
 * 
 * @cython.boundscheck(False)
 * def dipByResidue(double [:,:] coor, double [:] charges, double [:] masses, int nres, int [:] apr, int [:] rfa, double [:,:] com):             # <<<<<<<<<<<<<<
 *     """
 *     dipByResidue(coor,charges,masses,nresidues,atoms_per_residue,com)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_7dipByResidue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_6dipByResidue[] = "\n    dipByResidue(coor,charges,masses,nresidues,atoms_per_residue,com)\n\n    Calculates the molecular dipole moments, each referenced to the respective center of mass, \n    for a given selection.\n\n    ####\n    NOTE\n    ####\n    Don't call this function directly, use the AtomGroup interface instead!\n    E.g. for an atom selection 'sel', call \n\n    dip = sel.dipByResidue()    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_7dipByResidue = {"dipByResidue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_7dipByResidue, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_6dipByResidue};
static PyObject *__pyx_pw_11newanalysis_7helpers_7dipByResidue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  CYTHON_UNUSED __Pyx_memviewslice __pyx_v_masses = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_nres;
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_com = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dipByResidue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_charges,&__pyx_n_s_masses,&__pyx_n_s_nres,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_com,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dipByResidue", 1, 7, 7, 1); __PYX_ERR(0, 106, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_masses)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dipByResidue", 1, 7, 7, 2); __PYX_ERR(0, 106, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nres)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dipByResidue", 1, 7, 7, 3); __PYX_ERR(0, 106, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dipByResidue", 1, 7, 7, 4); __PYX_ERR(0, 106, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dipByResidue", 1, 7, 7, 5); __PYX_ERR(0, 106, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_com)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dipByResidue", 1, 7, 7, 6); __PYX_ERR(0, 106, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dipByResidue") < 0)) __PYX_ERR(0, 106, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 106, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 106, __pyx_L3_error)
    __pyx_v_masses = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_masses.memview)) __PYX_ERR(0, 106, __pyx_L3_error)
    __pyx_v_nres = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nres == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 106, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 106, __pyx_L3_error)
    __pyx_v_com = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_com.memview)) __PYX_ERR(0, 106, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dipByResidue", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 106, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.dipByResidue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_6dipByResidue(__pyx_self, __pyx_v_coor, __pyx_v_charges, __pyx_v_masses, __pyx_v_nres, __pyx_v_apr, __pyx_v_rfa, __pyx_v_com);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_6dipByResidue(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, CYTHON_UNUSED __Pyx_memviewslice __pyx_v_masses, int __pyx_v_nres, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, __Pyx_memviewslice __pyx_v_com) {
  __Pyx_memviewslice __pyx_v_dip = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_actr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dipByResidue", 0);

  /* "src/helpers/helpers.pyx":121
 *     dip = sel.dipByResidue()
 *     """
 *     cdef double [:,:] dip = np.zeros((nres,3))             # <<<<<<<<<<<<<<
 *     cdef int i, j, k, actr
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_nres); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dip = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "src/helpers/helpers.pyx":124
 *     cdef int i, j, k, actr
 * 
 *     for i in prange(nres, nogil=True):             # <<<<<<<<<<<<<<
 *         for j in range(apr[i]):
 *             actr = rfa[i] + j
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_6 = __pyx_v_nres;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_8 = (__pyx_t_6 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_8 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_9)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for lastprivate(__pyx_v_actr) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j) lastprivate(__pyx_v_k)
                    #endif /* _OPENMP */
                    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_8; __pyx_t_7++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_7);
                            /* Initialize private variables to invalid values */
                            __pyx_v_actr = ((int)0xbad0bad0);
                            __pyx_v_j = ((int)0xbad0bad0);
                            __pyx_v_k = ((int)0xbad0bad0);

                            /* "src/helpers/helpers.pyx":125
 * 
 *     for i in prange(nres, nogil=True):
 *         for j in range(apr[i]):             # <<<<<<<<<<<<<<
 *             actr = rfa[i] + j
 *             for k in range(3):
 */
                            __pyx_t_9 = __pyx_v_i;
                            if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_apr.shape[0];
                            __pyx_t_10 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_9 * __pyx_v_apr.strides[0]) )));
                            __pyx_t_11 = __pyx_t_10;
                            for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
                              __pyx_v_j = __pyx_t_12;

                              /* "src/helpers/helpers.pyx":126
 *     for i in prange(nres, nogil=True):
 *         for j in range(apr[i]):
 *             actr = rfa[i] + j             # <<<<<<<<<<<<<<
 *             for k in range(3):
 *                 dip[i,k] += (coor[actr,k] - com[i,k]) * charges[actr]
 */
                              __pyx_t_9 = __pyx_v_i;
                              if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_rfa.shape[0];
                              __pyx_v_actr = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_9 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_j);

                              /* "src/helpers/helpers.pyx":127
 *         for j in range(apr[i]):
 *             actr = rfa[i] + j
 *             for k in range(3):             # <<<<<<<<<<<<<<
 *                 dip[i,k] += (coor[actr,k] - com[i,k]) * charges[actr]
 * 
 */
                              for (__pyx_t_13 = 0; __pyx_t_13 < 3; __pyx_t_13+=1) {
                                __pyx_v_k = __pyx_t_13;

                                /* "src/helpers/helpers.pyx":128
 *             actr = rfa[i] + j
 *             for k in range(3):
 *                 dip[i,k] += (coor[actr,k] - com[i,k]) * charges[actr]             # <<<<<<<<<<<<<<
 * 
 *     return np.asarray(dip)
 */
                                __pyx_t_9 = __pyx_v_actr;
                                __pyx_t_14 = __pyx_v_k;
                                if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[0];
                                if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[1];
                                __pyx_t_15 = __pyx_v_i;
                                __pyx_t_16 = __pyx_v_k;
                                if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_com.shape[0];
                                if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_com.shape[1];
                                __pyx_t_17 = __pyx_v_actr;
                                if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_charges.shape[0];
                                __pyx_t_18 = __pyx_v_i;
                                __pyx_t_19 = __pyx_v_k;
                                if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_dip.shape[0];
                                if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_dip.shape[1];
                                *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dip.data + __pyx_t_18 * __pyx_v_dip.strides[0]) ) + __pyx_t_19 * __pyx_v_dip.strides[1]) )) += (((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_9 * __pyx_v_coor.strides[0]) ) + __pyx_t_14 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_com.data + __pyx_t_15 * __pyx_v_com.strides[0]) ) + __pyx_t_16 * __pyx_v_com.strides[1]) )))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_17 * __pyx_v_charges.strides[0]) ))));
                              }
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":124
 *     cdef int i, j, k, actr
 * 
 *     for i in prange(nres, nogil=True):             # <<<<<<<<<<<<<<
 *         for j in range(apr[i]):
 *             actr = rfa[i] + j
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":130
 *                 dip[i,k] += (coor[actr,k] - com[i,k]) * charges[actr]
 * 
 *     return np.asarray(dip)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dip, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":106
 * 
 * @cython.boundscheck(False)
 * def dipByResidue(double [:,:] coor, double [:] charges, double [:] masses, int nres, int [:] apr, int [:] rfa, double [:,:] com):             # <<<<<<<<<<<<<<
 *     """
 *     dipByResidue(coor,charges,masses,nresidues,atoms_per_residue,com)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __Pyx_AddTraceback("newanalysis.helpers.dipByResidue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_dip, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_masses, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_com, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":133
 * 
 * @cython.boundscheck(False)
 * def dipoleMomentNeutralSelection(double [:,:] coor, double [:] charges):             # <<<<<<<<<<<<<<
 * 
 *     cdef double [:] dip = np.zeros(3)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_9dipoleMomentNeutralSelection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_9dipoleMomentNeutralSelection = {"dipoleMomentNeutralSelection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_9dipoleMomentNeutralSelection, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_9dipoleMomentNeutralSelection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dipoleMomentNeutralSelection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_charges,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dipoleMomentNeutralSelection", 1, 2, 2, 1); __PYX_ERR(0, 133, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dipoleMomentNeutralSelection") < 0)) __PYX_ERR(0, 133, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 133, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 133, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dipoleMomentNeutralSelection", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 133, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.dipoleMomentNeutralSelection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_8dipoleMomentNeutralSelection(__pyx_self, __pyx_v_coor, __pyx_v_charges);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_8dipoleMomentNeutralSelection(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges) {
  __Pyx_memviewslice __pyx_v_dip = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_natoms;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dipoleMomentNeutralSelection", 0);

  /* "src/helpers/helpers.pyx":135
 * def dipoleMomentNeutralSelection(double [:,:] coor, double [:] charges):
 * 
 *     cdef double [:] dip = np.zeros(3)             # <<<<<<<<<<<<<<
 *     cdef int i, natoms = coor.shape[0]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_int_3) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dip = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "src/helpers/helpers.pyx":136
 * 
 *     cdef double [:] dip = np.zeros(3)
 *     cdef int i, natoms = coor.shape[0]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(natoms):
 */
  __pyx_v_natoms = (__pyx_v_coor.shape[0]);

  /* "src/helpers/helpers.pyx":138
 *     cdef int i, natoms = coor.shape[0]
 * 
 *     for i in range(natoms):             # <<<<<<<<<<<<<<
 *         dip[0] += coor[i,0] * charges[i]
 *         dip[1] += coor[i,1] * charges[i]
 */
  __pyx_t_5 = __pyx_v_natoms;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "src/helpers/helpers.pyx":139
 * 
 *     for i in range(natoms):
 *         dip[0] += coor[i,0] * charges[i]             # <<<<<<<<<<<<<<
 *         dip[1] += coor[i,1] * charges[i]
 *         dip[2] += coor[i,2] * charges[i]
 */
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = 0;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[1];
    __pyx_t_10 = __pyx_v_i;
    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_charges.shape[0];
    __pyx_t_11 = 0;
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_dip.shape[0];
    *((double *) ( /* dim=0 */ (__pyx_v_dip.data + __pyx_t_11 * __pyx_v_dip.strides[0]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_8 * __pyx_v_coor.strides[0]) ) + __pyx_t_9 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_10 * __pyx_v_charges.strides[0]) ))));

    /* "src/helpers/helpers.pyx":140
 *     for i in range(natoms):
 *         dip[0] += coor[i,0] * charges[i]
 *         dip[1] += coor[i,1] * charges[i]             # <<<<<<<<<<<<<<
 *         dip[2] += coor[i,2] * charges[i]
 * 
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_9 = 1;
    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[1];
    __pyx_t_8 = __pyx_v_i;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_charges.shape[0];
    __pyx_t_11 = 1;
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_dip.shape[0];
    *((double *) ( /* dim=0 */ (__pyx_v_dip.data + __pyx_t_11 * __pyx_v_dip.strides[0]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_10 * __pyx_v_coor.strides[0]) ) + __pyx_t_9 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_8 * __pyx_v_charges.strides[0]) ))));

    /* "src/helpers/helpers.pyx":141
 *         dip[0] += coor[i,0] * charges[i]
 *         dip[1] += coor[i,1] * charges[i]
 *         dip[2] += coor[i,2] * charges[i]             # <<<<<<<<<<<<<<
 * 
 *     return np.asarray(dip)
 */
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = 2;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[1];
    __pyx_t_10 = __pyx_v_i;
    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_charges.shape[0];
    __pyx_t_11 = 2;
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_dip.shape[0];
    *((double *) ( /* dim=0 */ (__pyx_v_dip.data + __pyx_t_11 * __pyx_v_dip.strides[0]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_8 * __pyx_v_coor.strides[0]) ) + __pyx_t_9 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_10 * __pyx_v_charges.strides[0]) ))));
  }

  /* "src/helpers/helpers.pyx":143
 *         dip[2] += coor[i,2] * charges[i]
 * 
 *     return np.asarray(dip)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dip, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_12, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":133
 * 
 * @cython.boundscheck(False)
 * def dipoleMomentNeutralSelection(double [:,:] coor, double [:] charges):             # <<<<<<<<<<<<<<
 * 
 *     cdef double [:] dip = np.zeros(3)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("newanalysis.helpers.dipoleMomentNeutralSelection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_dip, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":147
 * 
 * @cython.boundscheck(False)
 * def collectiveDipoleMomentWaterShells(double [:,:] coor, double [:] charges, int [:] ds, int nshells):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i,j,shell
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_11collectiveDipoleMomentWaterShells(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_11collectiveDipoleMomentWaterShells = {"collectiveDipoleMomentWaterShells", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_11collectiveDipoleMomentWaterShells, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_11collectiveDipoleMomentWaterShells(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_ds = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_nshells;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("collectiveDipoleMomentWaterShells (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_charges,&__pyx_n_s_ds,&__pyx_n_s_nshells,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("collectiveDipoleMomentWaterShells", 1, 4, 4, 1); __PYX_ERR(0, 147, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("collectiveDipoleMomentWaterShells", 1, 4, 4, 2); __PYX_ERR(0, 147, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nshells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("collectiveDipoleMomentWaterShells", 1, 4, 4, 3); __PYX_ERR(0, 147, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "collectiveDipoleMomentWaterShells") < 0)) __PYX_ERR(0, 147, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 147, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 147, __pyx_L3_error)
    __pyx_v_ds = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_ds.memview)) __PYX_ERR(0, 147, __pyx_L3_error)
    __pyx_v_nshells = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nshells == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("collectiveDipoleMomentWaterShells", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 147, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.collectiveDipoleMomentWaterShells", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_10collectiveDipoleMomentWaterShells(__pyx_self, __pyx_v_coor, __pyx_v_charges, __pyx_v_ds, __pyx_v_nshells);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_10collectiveDipoleMomentWaterShells(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_ds, int __pyx_v_nshells) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_shell;
  CYTHON_UNUSED int __pyx_v_natoms;
  int __pyx_v_nmol;
  __Pyx_memviewslice __pyx_v_dip = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("collectiveDipoleMomentWaterShells", 0);

  /* "src/helpers/helpers.pyx":150
 * 
 *     cdef int i,j,shell
 *     cdef int natoms = coor.shape[0]             # <<<<<<<<<<<<<<
 *     cdef int nmol = len(ds)
 *     cdef double [:,:] dip = np.zeros((nshells,3))
 */
  __pyx_v_natoms = (__pyx_v_coor.shape[0]);

  /* "src/helpers/helpers.pyx":151
 *     cdef int i,j,shell
 *     cdef int natoms = coor.shape[0]
 *     cdef int nmol = len(ds)             # <<<<<<<<<<<<<<
 *     cdef double [:,:] dip = np.zeros((nshells,3))
 * 
 */
  __pyx_t_1 = __Pyx_MemoryView_Len(__pyx_v_ds); 
  __pyx_v_nmol = __pyx_t_1;

  /* "src/helpers/helpers.pyx":152
 *     cdef int natoms = coor.shape[0]
 *     cdef int nmol = len(ds)
 *     cdef double [:,:] dip = np.zeros((nshells,3))             # <<<<<<<<<<<<<<
 * 
 *     for shell in prange(nshells,nogil=True):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_nshells); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dip = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":154
 *     cdef double [:,:] dip = np.zeros((nshells,3))
 * 
 *     for shell in prange(nshells,nogil=True):             # <<<<<<<<<<<<<<
 *         for i in range(nmol):
 *             if ds[i] == shell+1:
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_7 = __pyx_v_nshells;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_9 = (__pyx_t_7 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_9 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for lastprivate(__pyx_v_i) lastprivate(__pyx_v_j) firstprivate(__pyx_v_shell) lastprivate(__pyx_v_shell)
                    #endif /* _OPENMP */
                    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_9; __pyx_t_8++){
                        {
                            __pyx_v_shell = (int)(0 + 1 * __pyx_t_8);
                            /* Initialize private variables to invalid values */
                            __pyx_v_i = ((int)0xbad0bad0);
                            __pyx_v_j = ((int)0xbad0bad0);

                            /* "src/helpers/helpers.pyx":155
 * 
 *     for shell in prange(nshells,nogil=True):
 *         for i in range(nmol):             # <<<<<<<<<<<<<<
 *             if ds[i] == shell+1:
 *                 for j in range(3):
 */
                            __pyx_t_10 = __pyx_v_nmol;
                            __pyx_t_11 = __pyx_t_10;
                            for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
                              __pyx_v_i = __pyx_t_12;

                              /* "src/helpers/helpers.pyx":156
 *     for shell in prange(nshells,nogil=True):
 *         for i in range(nmol):
 *             if ds[i] == shell+1:             # <<<<<<<<<<<<<<
 *                 for j in range(3):
 *                     dip[shell,0] += coor[i*3+j,0] * charges[i*3+j]
 */
                              __pyx_t_13 = __pyx_v_i;
                              if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_ds.shape[0];
                              __pyx_t_14 = (((*((int *) ( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_13 * __pyx_v_ds.strides[0]) ))) == (__pyx_v_shell + 1)) != 0);
                              if (__pyx_t_14) {

                                /* "src/helpers/helpers.pyx":157
 *         for i in range(nmol):
 *             if ds[i] == shell+1:
 *                 for j in range(3):             # <<<<<<<<<<<<<<
 *                     dip[shell,0] += coor[i*3+j,0] * charges[i*3+j]
 *                     dip[shell,1] += coor[i*3+j,1] * charges[i*3+j]
 */
                                for (__pyx_t_15 = 0; __pyx_t_15 < 3; __pyx_t_15+=1) {
                                  __pyx_v_j = __pyx_t_15;

                                  /* "src/helpers/helpers.pyx":158
 *             if ds[i] == shell+1:
 *                 for j in range(3):
 *                     dip[shell,0] += coor[i*3+j,0] * charges[i*3+j]             # <<<<<<<<<<<<<<
 *                     dip[shell,1] += coor[i*3+j,1] * charges[i*3+j]
 *                     dip[shell,2] += coor[i*3+j,2] * charges[i*3+j]
 */
                                  __pyx_t_13 = ((__pyx_v_i * 3) + __pyx_v_j);
                                  __pyx_t_16 = 0;
                                  if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coor.shape[0];
                                  if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coor.shape[1];
                                  __pyx_t_17 = ((__pyx_v_i * 3) + __pyx_v_j);
                                  if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_charges.shape[0];
                                  __pyx_t_18 = __pyx_v_shell;
                                  __pyx_t_19 = 0;
                                  if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_dip.shape[0];
                                  if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_dip.shape[1];
                                  *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dip.data + __pyx_t_18 * __pyx_v_dip.strides[0]) ) + __pyx_t_19 * __pyx_v_dip.strides[1]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_13 * __pyx_v_coor.strides[0]) ) + __pyx_t_16 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_17 * __pyx_v_charges.strides[0]) ))));

                                  /* "src/helpers/helpers.pyx":159
 *                 for j in range(3):
 *                     dip[shell,0] += coor[i*3+j,0] * charges[i*3+j]
 *                     dip[shell,1] += coor[i*3+j,1] * charges[i*3+j]             # <<<<<<<<<<<<<<
 *                     dip[shell,2] += coor[i*3+j,2] * charges[i*3+j]
 *     return np.asarray(dip)
 */
                                  __pyx_t_17 = ((__pyx_v_i * 3) + __pyx_v_j);
                                  __pyx_t_16 = 1;
                                  if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coor.shape[0];
                                  if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coor.shape[1];
                                  __pyx_t_13 = ((__pyx_v_i * 3) + __pyx_v_j);
                                  if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_charges.shape[0];
                                  __pyx_t_19 = __pyx_v_shell;
                                  __pyx_t_18 = 1;
                                  if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_dip.shape[0];
                                  if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_dip.shape[1];
                                  *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dip.data + __pyx_t_19 * __pyx_v_dip.strides[0]) ) + __pyx_t_18 * __pyx_v_dip.strides[1]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_17 * __pyx_v_coor.strides[0]) ) + __pyx_t_16 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_13 * __pyx_v_charges.strides[0]) ))));

                                  /* "src/helpers/helpers.pyx":160
 *                     dip[shell,0] += coor[i*3+j,0] * charges[i*3+j]
 *                     dip[shell,1] += coor[i*3+j,1] * charges[i*3+j]
 *                     dip[shell,2] += coor[i*3+j,2] * charges[i*3+j]             # <<<<<<<<<<<<<<
 *     return np.asarray(dip)
 * 
 */
                                  __pyx_t_13 = ((__pyx_v_i * 3) + __pyx_v_j);
                                  __pyx_t_16 = 2;
                                  if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coor.shape[0];
                                  if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coor.shape[1];
                                  __pyx_t_17 = ((__pyx_v_i * 3) + __pyx_v_j);
                                  if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_charges.shape[0];
                                  __pyx_t_18 = __pyx_v_shell;
                                  __pyx_t_19 = 2;
                                  if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_dip.shape[0];
                                  if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_dip.shape[1];
                                  *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dip.data + __pyx_t_18 * __pyx_v_dip.strides[0]) ) + __pyx_t_19 * __pyx_v_dip.strides[1]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_13 * __pyx_v_coor.strides[0]) ) + __pyx_t_16 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_17 * __pyx_v_charges.strides[0]) ))));
                                }

                                /* "src/helpers/helpers.pyx":156
 *     for shell in prange(nshells,nogil=True):
 *         for i in range(nmol):
 *             if ds[i] == shell+1:             # <<<<<<<<<<<<<<
 *                 for j in range(3):
 *                     dip[shell,0] += coor[i*3+j,0] * charges[i*3+j]
 */
                              }
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":154
 *     cdef double [:,:] dip = np.zeros((nshells,3))
 * 
 *     for shell in prange(nshells,nogil=True):             # <<<<<<<<<<<<<<
 *         for i in range(nmol):
 *             if ds[i] == shell+1:
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":161
 *                     dip[shell,1] += coor[i*3+j,1] * charges[i*3+j]
 *                     dip[shell,2] += coor[i*3+j,2] * charges[i*3+j]
 *     return np.asarray(dip)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_dip, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":147
 * 
 * @cython.boundscheck(False)
 * def collectiveDipoleMomentWaterShells(double [:,:] coor, double [:] charges, int [:] ds, int nshells):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i,j,shell
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("newanalysis.helpers.collectiveDipoleMomentWaterShells", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_dip, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":166
 * 
 * @cython.boundscheck(False)
 * def atomicCurrent(double [:,:] vel, double [:] charges, double [:,:] result, int ctr):             # <<<<<<<<<<<<<<
 *     cdef int i, natoms=len(vel)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_13atomicCurrent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_13atomicCurrent = {"atomicCurrent", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_13atomicCurrent, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_13atomicCurrent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_vel = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_result = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_ctr;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("atomicCurrent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vel,&__pyx_n_s_charges,&__pyx_n_s_result,&__pyx_n_s_ctr,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("atomicCurrent", 1, 4, 4, 1); __PYX_ERR(0, 166, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_result)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("atomicCurrent", 1, 4, 4, 2); __PYX_ERR(0, 166, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ctr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("atomicCurrent", 1, 4, 4, 3); __PYX_ERR(0, 166, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "atomicCurrent") < 0)) __PYX_ERR(0, 166, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_vel = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_vel.memview)) __PYX_ERR(0, 166, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 166, __pyx_L3_error)
    __pyx_v_result = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_result.memview)) __PYX_ERR(0, 166, __pyx_L3_error)
    __pyx_v_ctr = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_ctr == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("atomicCurrent", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 166, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.atomicCurrent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_12atomicCurrent(__pyx_self, __pyx_v_vel, __pyx_v_charges, __pyx_v_result, __pyx_v_ctr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_12atomicCurrent(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_vel, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_result, int __pyx_v_ctr) {
  int __pyx_v_i;
  int __pyx_v_natoms;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("atomicCurrent", 0);

  /* "src/helpers/helpers.pyx":167
 * @cython.boundscheck(False)
 * def atomicCurrent(double [:,:] vel, double [:] charges, double [:,:] result, int ctr):
 *     cdef int i, natoms=len(vel)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(natoms):
 */
  __pyx_t_1 = __Pyx_MemoryView_Len(__pyx_v_vel); 
  __pyx_v_natoms = __pyx_t_1;

  /* "src/helpers/helpers.pyx":169
 *     cdef int i, natoms=len(vel)
 * 
 *     for i in range(natoms):             # <<<<<<<<<<<<<<
 *         result[ctr,0] += vel[i,0] * charges[i]
 *         result[ctr,1] += vel[i,1] * charges[i]
 */
  __pyx_t_2 = __pyx_v_natoms;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "src/helpers/helpers.pyx":170
 * 
 *     for i in range(natoms):
 *         result[ctr,0] += vel[i,0] * charges[i]             # <<<<<<<<<<<<<<
 *         result[ctr,1] += vel[i,1] * charges[i]
 *         result[ctr,2] += vel[i,2] * charges[i]
 */
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 0;
    if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_vel.shape[0];
    if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_vel.shape[1];
    __pyx_t_7 = __pyx_v_i;
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_charges.shape[0];
    __pyx_t_8 = __pyx_v_ctr;
    __pyx_t_9 = 0;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_result.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_result.shape[1];
    *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_result.data + __pyx_t_8 * __pyx_v_result.strides[0]) ) + __pyx_t_9 * __pyx_v_result.strides[1]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vel.data + __pyx_t_5 * __pyx_v_vel.strides[0]) ) + __pyx_t_6 * __pyx_v_vel.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_7 * __pyx_v_charges.strides[0]) ))));

    /* "src/helpers/helpers.pyx":171
 *     for i in range(natoms):
 *         result[ctr,0] += vel[i,0] * charges[i]
 *         result[ctr,1] += vel[i,1] * charges[i]             # <<<<<<<<<<<<<<
 *         result[ctr,2] += vel[i,2] * charges[i]
 * 
 */
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_6 = 1;
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_vel.shape[0];
    if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_vel.shape[1];
    __pyx_t_5 = __pyx_v_i;
    if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_charges.shape[0];
    __pyx_t_9 = __pyx_v_ctr;
    __pyx_t_8 = 1;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_result.shape[0];
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_result.shape[1];
    *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_result.data + __pyx_t_9 * __pyx_v_result.strides[0]) ) + __pyx_t_8 * __pyx_v_result.strides[1]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vel.data + __pyx_t_7 * __pyx_v_vel.strides[0]) ) + __pyx_t_6 * __pyx_v_vel.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_5 * __pyx_v_charges.strides[0]) ))));

    /* "src/helpers/helpers.pyx":172
 *         result[ctr,0] += vel[i,0] * charges[i]
 *         result[ctr,1] += vel[i,1] * charges[i]
 *         result[ctr,2] += vel[i,2] * charges[i]             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 2;
    if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_vel.shape[0];
    if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_vel.shape[1];
    __pyx_t_7 = __pyx_v_i;
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_charges.shape[0];
    __pyx_t_8 = __pyx_v_ctr;
    __pyx_t_9 = 2;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_result.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_result.shape[1];
    *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_result.data + __pyx_t_8 * __pyx_v_result.strides[0]) ) + __pyx_t_9 * __pyx_v_result.strides[1]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vel.data + __pyx_t_5 * __pyx_v_vel.strides[0]) ) + __pyx_t_6 * __pyx_v_vel.strides[1]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_7 * __pyx_v_charges.strides[0]) ))));
  }

  /* "src/helpers/helpers.pyx":166
 * 
 * @cython.boundscheck(False)
 * def atomicCurrent(double [:,:] vel, double [:] charges, double [:,:] result, int ctr):             # <<<<<<<<<<<<<<
 *     cdef int i, natoms=len(vel)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __PYX_XDEC_MEMVIEW(&__pyx_v_vel, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_result, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":175
 * 
 * @cython.boundscheck(False)
 * def centerOrientBox(double [:,:] com, double [:,:] coor, double boxl, int isolute,             # <<<<<<<<<<<<<<
 *                     int [:] apr, int [:] rfa, double [:,:] coorA, double [:,:] coorB):
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_15centerOrientBox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_14centerOrientBox[] = "\n    centerOrientBox(com, xyz, boxlength, isolute, atoms_per_residue, residue_first_atom, coorA, coorB)\n\n    Centers the box to the center of mass of a given molecule and rotates the box so that two sets of coordinates\n    are as identical as possible.\n\n    Args:\n        com                .. centers of mass of all molecules in the box\n        xyz                .. coordinates of all atoms\n        boxlength          .. edge length of the cubic box\n        isolute            .. index of the solute / center molecule (count starts with 0)\n        atoms_per_residue  .. array showing how many atoms each residue contains\n        residue_first_atom .. index of the first atom of each residue\n        coorA              .. template coordinates\n        coorB              .. corresponding coordinates of the current frame\n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_15centerOrientBox = {"centerOrientBox", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_15centerOrientBox, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_14centerOrientBox};
static PyObject *__pyx_pw_11newanalysis_7helpers_15centerOrientBox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_com = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_boxl;
  int __pyx_v_isolute;
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coorA = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coorB = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("centerOrientBox (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_com,&__pyx_n_s_coor,&__pyx_n_s_boxl,&__pyx_n_s_isolute,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_coorA,&__pyx_n_s_coorB,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_com)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerOrientBox", 1, 8, 8, 1); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boxl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerOrientBox", 1, 8, 8, 2); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerOrientBox", 1, 8, 8, 3); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerOrientBox", 1, 8, 8, 4); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerOrientBox", 1, 8, 8, 5); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coorA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerOrientBox", 1, 8, 8, 6); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coorB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerOrientBox", 1, 8, 8, 7); __PYX_ERR(0, 175, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "centerOrientBox") < 0)) __PYX_ERR(0, 175, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_com = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_com.memview)) __PYX_ERR(0, 175, __pyx_L3_error)
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 175, __pyx_L3_error)
    __pyx_v_boxl = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_boxl == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_coorA = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coorA.memview)) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_coorB = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[7], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coorB.memview)) __PYX_ERR(0, 176, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("centerOrientBox", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.centerOrientBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_14centerOrientBox(__pyx_self, __pyx_v_com, __pyx_v_coor, __pyx_v_boxl, __pyx_v_isolute, __pyx_v_apr, __pyx_v_rfa, __pyx_v_coorA, __pyx_v_coorB);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_14centerOrientBox(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_com, __Pyx_memviewslice __pyx_v_coor, double __pyx_v_boxl, int __pyx_v_isolute, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, __Pyx_memviewslice __pyx_v_coorA, __Pyx_memviewslice __pyx_v_coorB) {
  double __pyx_v_shift[3];
  double __pyx_v_comslt[3];
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_nmol;
  __Pyx_memviewslice __pyx_v_R = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_tmpx;
  double __pyx_v_tmpy;
  double __pyx_v_tmpz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("centerOrientBox", 0);

  /* "src/helpers/helpers.pyx":195
 *     cdef double[3] shift
 *     cdef double[3] comslt
 *     cdef int i, j, k, nmol = com.shape[0]             # <<<<<<<<<<<<<<
 *     cdef double [:,:] R = np.zeros((3,3))
 *     cdef double tmpx, tmpy, tmpz
 */
  __pyx_v_nmol = (__pyx_v_com.shape[0]);

  /* "src/helpers/helpers.pyx":196
 *     cdef double[3] comslt
 *     cdef int i, j, k, nmol = com.shape[0]
 *     cdef double [:,:] R = np.zeros((3,3))             # <<<<<<<<<<<<<<
 *     cdef double tmpx, tmpy, tmpz
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_tuple_) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_tuple_);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_R = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "src/helpers/helpers.pyx":199
 *     cdef double tmpx, tmpy, tmpz
 * 
 *     for j in range(3):             # <<<<<<<<<<<<<<
 *         comslt[j] = com[isolute,j]
 * 
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
    __pyx_v_j = __pyx_t_5;

    /* "src/helpers/helpers.pyx":200
 * 
 *     for j in range(3):
 *         comslt[j] = com[isolute,j]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(nmol):
 */
    __pyx_t_6 = __pyx_v_isolute;
    __pyx_t_7 = __pyx_v_j;
    if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_com.shape[0];
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_com.shape[1];
    (__pyx_v_comslt[__pyx_v_j]) = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_com.data + __pyx_t_6 * __pyx_v_com.strides[0]) ) + __pyx_t_7 * __pyx_v_com.strides[1]) )));
  }

  /* "src/helpers/helpers.pyx":202
 *         comslt[j] = com[isolute,j]
 * 
 *     for i in range(nmol):             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             com[i,j] -= comslt[j]
 */
  __pyx_t_5 = __pyx_v_nmol;
  __pyx_t_8 = __pyx_t_5;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "src/helpers/helpers.pyx":203
 * 
 *     for i in range(nmol):
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             com[i,j] -= comslt[j]
 *             shift[j] = boxl * floor(com[i,j] / boxl + 0.5)
 */
    for (__pyx_t_10 = 0; __pyx_t_10 < 3; __pyx_t_10+=1) {
      __pyx_v_j = __pyx_t_10;

      /* "src/helpers/helpers.pyx":204
 *     for i in range(nmol):
 *         for j in range(3):
 *             com[i,j] -= comslt[j]             # <<<<<<<<<<<<<<
 *             shift[j] = boxl * floor(com[i,j] / boxl + 0.5)
 *             com[i,j] -= shift[j]
 */
      __pyx_t_7 = __pyx_v_i;
      __pyx_t_6 = __pyx_v_j;
      if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_com.shape[0];
      if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_com.shape[1];
      *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_com.data + __pyx_t_7 * __pyx_v_com.strides[0]) ) + __pyx_t_6 * __pyx_v_com.strides[1]) )) -= (__pyx_v_comslt[__pyx_v_j]);

      /* "src/helpers/helpers.pyx":205
 *         for j in range(3):
 *             com[i,j] -= comslt[j]
 *             shift[j] = boxl * floor(com[i,j] / boxl + 0.5)             # <<<<<<<<<<<<<<
 *             com[i,j] -= shift[j]
 * 
 */
      __pyx_t_6 = __pyx_v_i;
      __pyx_t_7 = __pyx_v_j;
      if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_com.shape[0];
      if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_com.shape[1];
      __pyx_t_11 = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_com.data + __pyx_t_6 * __pyx_v_com.strides[0]) ) + __pyx_t_7 * __pyx_v_com.strides[1]) )));
      if (unlikely(__pyx_v_boxl == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 205, __pyx_L1_error)
      }
      (__pyx_v_shift[__pyx_v_j]) = (__pyx_v_boxl * floor(((__pyx_t_11 / __pyx_v_boxl) + 0.5)));

      /* "src/helpers/helpers.pyx":206
 *             com[i,j] -= comslt[j]
 *             shift[j] = boxl * floor(com[i,j] / boxl + 0.5)
 *             com[i,j] -= shift[j]             # <<<<<<<<<<<<<<
 * 
 *         for k in range(rfa[i], rfa[i] + apr[i]):
 */
      __pyx_t_7 = __pyx_v_i;
      __pyx_t_6 = __pyx_v_j;
      if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_com.shape[0];
      if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_com.shape[1];
      *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_com.data + __pyx_t_7 * __pyx_v_com.strides[0]) ) + __pyx_t_6 * __pyx_v_com.strides[1]) )) -= (__pyx_v_shift[__pyx_v_j]);
    }

    /* "src/helpers/helpers.pyx":208
 *             com[i,j] -= shift[j]
 * 
 *         for k in range(rfa[i], rfa[i] + apr[i]):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 coor[k,j] -= comslt[j] - shift[j]
 */
    __pyx_t_6 = __pyx_v_i;
    if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_rfa.shape[0];
    __pyx_t_7 = __pyx_v_i;
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_apr.shape[0];
    __pyx_t_10 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_6 * __pyx_v_rfa.strides[0]) ))) + (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_7 * __pyx_v_apr.strides[0]) ))));
    __pyx_t_7 = __pyx_v_i;
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_rfa.shape[0];
    __pyx_t_12 = __pyx_t_10;
    for (__pyx_t_13 = (*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_7 * __pyx_v_rfa.strides[0]) ))); __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_k = __pyx_t_13;

      /* "src/helpers/helpers.pyx":209
 * 
 *         for k in range(rfa[i], rfa[i] + apr[i]):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 coor[k,j] -= comslt[j] - shift[j]
 * 
 */
      for (__pyx_t_14 = 0; __pyx_t_14 < 3; __pyx_t_14+=1) {
        __pyx_v_j = __pyx_t_14;

        /* "src/helpers/helpers.pyx":210
 *         for k in range(rfa[i], rfa[i] + apr[i]):
 *             for j in range(3):
 *                 coor[k,j] -= comslt[j] - shift[j]             # <<<<<<<<<<<<<<
 * 
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)
 */
        __pyx_t_6 = __pyx_v_k;
        __pyx_t_15 = __pyx_v_j;
        if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_coor.shape[0];
        if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[1];
        *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_6 * __pyx_v_coor.strides[0]) ) + __pyx_t_15 * __pyx_v_coor.strides[1]) )) -= ((__pyx_v_comslt[__pyx_v_j]) - (__pyx_v_shift[__pyx_v_j]));
      }
    }
  }

  /* "src/helpers/helpers.pyx":212
 *                 coor[k,j] -= comslt[j] - shift[j]
 * 
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)             # <<<<<<<<<<<<<<
 * 
 *     for i in prange(coor.shape[0], nogil=True):
 */
  __pyx_t_7 = 0;
  __pyx_t_15 = 0;
  if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_R.shape[0];
  if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_R.shape[1];
  __pyx_t_6 = 0;
  __pyx_t_16 = 0;
  if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_coorA.shape[0];
  if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coorA.shape[1];
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coorB.shape[0];
  if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coorB.shape[1];
  GetRotation((&(*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_7 * __pyx_v_R.strides[0]) ) + __pyx_t_15 * __pyx_v_R.strides[1]) )))), (__pyx_v_coorA.shape[0]), (&(*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coorA.data + __pyx_t_6 * __pyx_v_coorA.strides[0]) ) + __pyx_t_16 * __pyx_v_coorA.strides[1]) )))), (&(*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coorB.data + __pyx_t_17 * __pyx_v_coorB.strides[0]) ) + __pyx_t_18 * __pyx_v_coorB.strides[1]) )))), 0);

  /* "src/helpers/helpers.pyx":214
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)
 * 
 *     for i in prange(coor.shape[0], nogil=True):             # <<<<<<<<<<<<<<
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        if (unlikely(!__pyx_v_coor.memview)) { __Pyx_RaiseUnboundMemoryviewSliceNogil("coor"); __PYX_ERR(0, 214, __pyx_L14_error) }
        __pyx_t_19 = (__pyx_v_coor.shape[0]);
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_21 = (__pyx_t_19 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_21 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_t_25, __pyx_t_26, __pyx_t_27, __pyx_t_6, __pyx_t_7)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_tmpx) lastprivate(__pyx_v_tmpy) lastprivate(__pyx_v_tmpz)
                    #endif /* _OPENMP */
                    for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_21; __pyx_t_20++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_20);
                            /* Initialize private variables to invalid values */
                            __pyx_v_tmpx = ((double)__PYX_NAN());
                            __pyx_v_tmpy = ((double)__PYX_NAN());
                            __pyx_v_tmpz = ((double)__PYX_NAN());

                            /* "src/helpers/helpers.pyx":215
 * 
 *     for i in prange(coor.shape[0], nogil=True):
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]             # <<<<<<<<<<<<<<
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 */
                            __pyx_t_18 = 0;
                            __pyx_t_17 = 0;
                            if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_R.shape[0];
                            if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_R.shape[1];
                            __pyx_t_16 = __pyx_v_i;
                            __pyx_t_6 = 0;
                            if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coor.shape[0];
                            if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_coor.shape[1];
                            __pyx_t_15 = 0;
                            __pyx_t_7 = 1;
                            if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_R.shape[0];
                            if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_R.shape[1];
                            __pyx_t_22 = __pyx_v_i;
                            __pyx_t_23 = 1;
                            if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_coor.shape[0];
                            if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_coor.shape[1];
                            __pyx_t_24 = 0;
                            __pyx_t_25 = 2;
                            if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_R.shape[0];
                            if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_R.shape[1];
                            __pyx_t_26 = __pyx_v_i;
                            __pyx_t_27 = 2;
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[0];
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[1];
                            __pyx_v_tmpx = ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_18 * __pyx_v_R.strides[0]) ) + __pyx_t_17 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_16 * __pyx_v_coor.strides[0]) ) + __pyx_t_6 * __pyx_v_coor.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_15 * __pyx_v_R.strides[0]) ) + __pyx_t_7 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_22 * __pyx_v_coor.strides[0]) ) + __pyx_t_23 * __pyx_v_coor.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_24 * __pyx_v_R.strides[0]) ) + __pyx_t_25 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_26 * __pyx_v_coor.strides[0]) ) + __pyx_t_27 * __pyx_v_coor.strides[1]) )))));

                            /* "src/helpers/helpers.pyx":216
 *     for i in prange(coor.shape[0], nogil=True):
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]             # <<<<<<<<<<<<<<
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 *         coor[i,0] = tmpx
 */
                            __pyx_t_27 = 1;
                            __pyx_t_26 = 0;
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_R.shape[0];
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_R.shape[1];
                            __pyx_t_25 = __pyx_v_i;
                            __pyx_t_24 = 0;
                            if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_coor.shape[0];
                            if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_coor.shape[1];
                            __pyx_t_23 = 1;
                            __pyx_t_22 = 1;
                            if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_R.shape[0];
                            if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_R.shape[1];
                            __pyx_t_7 = __pyx_v_i;
                            __pyx_t_15 = 1;
                            if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_coor.shape[0];
                            if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[1];
                            __pyx_t_6 = 1;
                            __pyx_t_16 = 2;
                            if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_R.shape[0];
                            if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_R.shape[1];
                            __pyx_t_17 = __pyx_v_i;
                            __pyx_t_18 = 2;
                            if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coor.shape[0];
                            if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
                            __pyx_v_tmpy = ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_27 * __pyx_v_R.strides[0]) ) + __pyx_t_26 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_25 * __pyx_v_coor.strides[0]) ) + __pyx_t_24 * __pyx_v_coor.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_23 * __pyx_v_R.strides[0]) ) + __pyx_t_22 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_7 * __pyx_v_coor.strides[0]) ) + __pyx_t_15 * __pyx_v_coor.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_6 * __pyx_v_R.strides[0]) ) + __pyx_t_16 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_17 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) )))));

                            /* "src/helpers/helpers.pyx":217
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]             # <<<<<<<<<<<<<<
 *         coor[i,0] = tmpx
 *         coor[i,1] = tmpy
 */
                            __pyx_t_18 = 2;
                            __pyx_t_17 = 0;
                            if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_R.shape[0];
                            if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_R.shape[1];
                            __pyx_t_16 = __pyx_v_i;
                            __pyx_t_6 = 0;
                            if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coor.shape[0];
                            if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_coor.shape[1];
                            __pyx_t_15 = 2;
                            __pyx_t_7 = 1;
                            if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_R.shape[0];
                            if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_R.shape[1];
                            __pyx_t_22 = __pyx_v_i;
                            __pyx_t_23 = 1;
                            if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_coor.shape[0];
                            if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_coor.shape[1];
                            __pyx_t_24 = 2;
                            __pyx_t_25 = 2;
                            if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_R.shape[0];
                            if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_R.shape[1];
                            __pyx_t_26 = __pyx_v_i;
                            __pyx_t_27 = 2;
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[0];
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[1];
                            __pyx_v_tmpz = ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_18 * __pyx_v_R.strides[0]) ) + __pyx_t_17 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_16 * __pyx_v_coor.strides[0]) ) + __pyx_t_6 * __pyx_v_coor.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_15 * __pyx_v_R.strides[0]) ) + __pyx_t_7 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_22 * __pyx_v_coor.strides[0]) ) + __pyx_t_23 * __pyx_v_coor.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_24 * __pyx_v_R.strides[0]) ) + __pyx_t_25 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_26 * __pyx_v_coor.strides[0]) ) + __pyx_t_27 * __pyx_v_coor.strides[1]) )))));

                            /* "src/helpers/helpers.pyx":218
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 *         coor[i,0] = tmpx             # <<<<<<<<<<<<<<
 *         coor[i,1] = tmpy
 *         coor[i,2] = tmpz
 */
                            __pyx_t_27 = __pyx_v_i;
                            __pyx_t_26 = 0;
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[0];
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_27 * __pyx_v_coor.strides[0]) ) + __pyx_t_26 * __pyx_v_coor.strides[1]) )) = __pyx_v_tmpx;

                            /* "src/helpers/helpers.pyx":219
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 *         coor[i,0] = tmpx
 *         coor[i,1] = tmpy             # <<<<<<<<<<<<<<
 *         coor[i,2] = tmpz
 * 
 */
                            __pyx_t_26 = __pyx_v_i;
                            __pyx_t_27 = 1;
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[0];
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_26 * __pyx_v_coor.strides[0]) ) + __pyx_t_27 * __pyx_v_coor.strides[1]) )) = __pyx_v_tmpy;

                            /* "src/helpers/helpers.pyx":220
 *         coor[i,0] = tmpx
 *         coor[i,1] = tmpy
 *         coor[i,2] = tmpz             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
                            __pyx_t_27 = __pyx_v_i;
                            __pyx_t_26 = 2;
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[0];
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_27 * __pyx_v_coor.strides[0]) ) + __pyx_t_26 * __pyx_v_coor.strides[1]) )) = __pyx_v_tmpz;
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":214
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)
 * 
 *     for i in prange(coor.shape[0], nogil=True):             # <<<<<<<<<<<<<<
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L15;
        }
        __pyx_L14_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L15:;
      }
  }

  /* "src/helpers/helpers.pyx":175
 * 
 * @cython.boundscheck(False)
 * def centerOrientBox(double [:,:] com, double [:,:] coor, double boxl, int isolute,             # <<<<<<<<<<<<<<
 *                     int [:] apr, int [:] rfa, double [:,:] coorA, double [:,:] coorB):
 *     """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_AddTraceback("newanalysis.helpers.centerOrientBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_R, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_com, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coorA, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coorB, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":223
 * 
 * @cython.boundscheck(False)
 * def centerToPointOrientBox(double [:,:] com, double [:,:] coor, double [:] center, double boxl,             # <<<<<<<<<<<<<<
 *                            int [:] apr, int [:] rfa, double [:,:] coorA, double [:,:] coorB):
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_17centerToPointOrientBox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_16centerToPointOrientBox[] = "\n    centerOrientToPointBox(com, xyz, center, boxlength, atoms_per_residue, residue_first_atom, coorA, coorB)\n\n    Centers the box to the center of mass of a given molecule and rotates the box so that two sets of coordinates\n    are as identical as possible.\n\n    Args:\n        com                .. centers of mass of all molecules in the box\n        xyz                .. coordinates of all atoms\n        boxlength          .. edge length of the cubic box\n        atoms_per_residue  .. array showing how many atoms each residue contains\n        residue_first_atom .. index of the first atom of each residue\n        coorA              .. template coordinates\n        coorB              .. corresponding coordinates of the current frame\n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_17centerToPointOrientBox = {"centerToPointOrientBox", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_17centerToPointOrientBox, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_16centerToPointOrientBox};
static PyObject *__pyx_pw_11newanalysis_7helpers_17centerToPointOrientBox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_com = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_center = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_boxl;
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coorA = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coorB = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("centerToPointOrientBox (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_com,&__pyx_n_s_coor,&__pyx_n_s_center,&__pyx_n_s_boxl,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_coorA,&__pyx_n_s_coorB,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_com)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerToPointOrientBox", 1, 8, 8, 1); __PYX_ERR(0, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerToPointOrientBox", 1, 8, 8, 2); __PYX_ERR(0, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boxl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerToPointOrientBox", 1, 8, 8, 3); __PYX_ERR(0, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerToPointOrientBox", 1, 8, 8, 4); __PYX_ERR(0, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerToPointOrientBox", 1, 8, 8, 5); __PYX_ERR(0, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coorA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerToPointOrientBox", 1, 8, 8, 6); __PYX_ERR(0, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coorB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("centerToPointOrientBox", 1, 8, 8, 7); __PYX_ERR(0, 223, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "centerToPointOrientBox") < 0)) __PYX_ERR(0, 223, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_com = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_com.memview)) __PYX_ERR(0, 223, __pyx_L3_error)
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 223, __pyx_L3_error)
    __pyx_v_center = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_center.memview)) __PYX_ERR(0, 223, __pyx_L3_error)
    __pyx_v_boxl = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_boxl == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 223, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 224, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 224, __pyx_L3_error)
    __pyx_v_coorA = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coorA.memview)) __PYX_ERR(0, 224, __pyx_L3_error)
    __pyx_v_coorB = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[7], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coorB.memview)) __PYX_ERR(0, 224, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("centerToPointOrientBox", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 223, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.centerToPointOrientBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_16centerToPointOrientBox(__pyx_self, __pyx_v_com, __pyx_v_coor, __pyx_v_center, __pyx_v_boxl, __pyx_v_apr, __pyx_v_rfa, __pyx_v_coorA, __pyx_v_coorB);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_16centerToPointOrientBox(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_com, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_center, double __pyx_v_boxl, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, __Pyx_memviewslice __pyx_v_coorA, __Pyx_memviewslice __pyx_v_coorB) {
  double __pyx_v_shift[3];
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_nmol;
  __Pyx_memviewslice __pyx_v_R = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_tmpx;
  double __pyx_v_tmpy;
  double __pyx_v_tmpz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  double __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("centerToPointOrientBox", 0);

  /* "src/helpers/helpers.pyx":241
 *     """
 *     cdef double[3] shift
 *     cdef int i, j, k, nmol = com.shape[0]             # <<<<<<<<<<<<<<
 *     cdef double [:,:] R = np.zeros((3,3))
 *     cdef double tmpx, tmpy, tmpz
 */
  __pyx_v_nmol = (__pyx_v_com.shape[0]);

  /* "src/helpers/helpers.pyx":242
 *     cdef double[3] shift
 *     cdef int i, j, k, nmol = com.shape[0]
 *     cdef double [:,:] R = np.zeros((3,3))             # <<<<<<<<<<<<<<
 *     cdef double tmpx, tmpy, tmpz
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_tuple_) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_tuple_);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_R = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "src/helpers/helpers.pyx":245
 *     cdef double tmpx, tmpy, tmpz
 * 
 *     for i in range(nmol):             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             com[i,j] -= center[j]
 */
  __pyx_t_5 = __pyx_v_nmol;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "src/helpers/helpers.pyx":246
 * 
 *     for i in range(nmol):
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             com[i,j] -= center[j]
 *             shift[j] = boxl * floor(com[i,j] / boxl + 0.5)
 */
    for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "src/helpers/helpers.pyx":247
 *     for i in range(nmol):
 *         for j in range(3):
 *             com[i,j] -= center[j]             # <<<<<<<<<<<<<<
 *             shift[j] = boxl * floor(com[i,j] / boxl + 0.5)
 *             com[i,j] -= shift[j]
 */
      __pyx_t_9 = __pyx_v_j;
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_center.shape[0];
      __pyx_t_10 = __pyx_v_i;
      __pyx_t_11 = __pyx_v_j;
      if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_com.shape[0];
      if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_com.shape[1];
      *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_com.data + __pyx_t_10 * __pyx_v_com.strides[0]) ) + __pyx_t_11 * __pyx_v_com.strides[1]) )) -= (*((double *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_9 * __pyx_v_center.strides[0]) )));

      /* "src/helpers/helpers.pyx":248
 *         for j in range(3):
 *             com[i,j] -= center[j]
 *             shift[j] = boxl * floor(com[i,j] / boxl + 0.5)             # <<<<<<<<<<<<<<
 *             com[i,j] -= shift[j]
 * 
 */
      __pyx_t_9 = __pyx_v_i;
      __pyx_t_11 = __pyx_v_j;
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_com.shape[0];
      if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_com.shape[1];
      __pyx_t_12 = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_com.data + __pyx_t_9 * __pyx_v_com.strides[0]) ) + __pyx_t_11 * __pyx_v_com.strides[1]) )));
      if (unlikely(__pyx_v_boxl == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 248, __pyx_L1_error)
      }
      (__pyx_v_shift[__pyx_v_j]) = (__pyx_v_boxl * floor(((__pyx_t_12 / __pyx_v_boxl) + 0.5)));

      /* "src/helpers/helpers.pyx":249
 *             com[i,j] -= center[j]
 *             shift[j] = boxl * floor(com[i,j] / boxl + 0.5)
 *             com[i,j] -= shift[j]             # <<<<<<<<<<<<<<
 * 
 *         for k in range(rfa[i], rfa[i] + apr[i]):
 */
      __pyx_t_11 = __pyx_v_i;
      __pyx_t_9 = __pyx_v_j;
      if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_com.shape[0];
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_com.shape[1];
      *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_com.data + __pyx_t_11 * __pyx_v_com.strides[0]) ) + __pyx_t_9 * __pyx_v_com.strides[1]) )) -= (__pyx_v_shift[__pyx_v_j]);
    }

    /* "src/helpers/helpers.pyx":251
 *             com[i,j] -= shift[j]
 * 
 *         for k in range(rfa[i], rfa[i] + apr[i]):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 coor[k,j] -= center[j] - shift[j]
 */
    __pyx_t_9 = __pyx_v_i;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_rfa.shape[0];
    __pyx_t_11 = __pyx_v_i;
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_apr.shape[0];
    __pyx_t_8 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_9 * __pyx_v_rfa.strides[0]) ))) + (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_11 * __pyx_v_apr.strides[0]) ))));
    __pyx_t_11 = __pyx_v_i;
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_rfa.shape[0];
    __pyx_t_13 = __pyx_t_8;
    for (__pyx_t_14 = (*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_11 * __pyx_v_rfa.strides[0]) ))); __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_k = __pyx_t_14;

      /* "src/helpers/helpers.pyx":252
 * 
 *         for k in range(rfa[i], rfa[i] + apr[i]):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 coor[k,j] -= center[j] - shift[j]
 * 
 */
      for (__pyx_t_15 = 0; __pyx_t_15 < 3; __pyx_t_15+=1) {
        __pyx_v_j = __pyx_t_15;

        /* "src/helpers/helpers.pyx":253
 *         for k in range(rfa[i], rfa[i] + apr[i]):
 *             for j in range(3):
 *                 coor[k,j] -= center[j] - shift[j]             # <<<<<<<<<<<<<<
 * 
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)
 */
        __pyx_t_9 = __pyx_v_j;
        if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_center.shape[0];
        __pyx_t_10 = __pyx_v_k;
        __pyx_t_16 = __pyx_v_j;
        if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor.shape[0];
        if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coor.shape[1];
        *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_10 * __pyx_v_coor.strides[0]) ) + __pyx_t_16 * __pyx_v_coor.strides[1]) )) -= ((*((double *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_9 * __pyx_v_center.strides[0]) ))) - (__pyx_v_shift[__pyx_v_j]));
      }
    }
  }

  /* "src/helpers/helpers.pyx":255
 *                 coor[k,j] -= center[j] - shift[j]
 * 
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)             # <<<<<<<<<<<<<<
 * 
 *     for i in prange(coor.shape[0], nogil=True):
 */
  __pyx_t_11 = 0;
  __pyx_t_9 = 0;
  if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_R.shape[0];
  if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_R.shape[1];
  __pyx_t_16 = 0;
  __pyx_t_10 = 0;
  if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coorA.shape[0];
  if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coorA.shape[1];
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coorB.shape[0];
  if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coorB.shape[1];
  GetRotation((&(*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_11 * __pyx_v_R.strides[0]) ) + __pyx_t_9 * __pyx_v_R.strides[1]) )))), (__pyx_v_coorA.shape[0]), (&(*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coorA.data + __pyx_t_16 * __pyx_v_coorA.strides[0]) ) + __pyx_t_10 * __pyx_v_coorA.strides[1]) )))), (&(*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coorB.data + __pyx_t_17 * __pyx_v_coorB.strides[0]) ) + __pyx_t_18 * __pyx_v_coorB.strides[1]) )))), 0);

  /* "src/helpers/helpers.pyx":257
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)
 * 
 *     for i in prange(coor.shape[0], nogil=True):             # <<<<<<<<<<<<<<
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        if (unlikely(!__pyx_v_coor.memview)) { __Pyx_RaiseUnboundMemoryviewSliceNogil("coor"); __PYX_ERR(0, 257, __pyx_L12_error) }
        __pyx_t_19 = (__pyx_v_coor.shape[0]);
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_21 = (__pyx_t_19 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_21 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_10, __pyx_t_11, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_t_25, __pyx_t_26, __pyx_t_27, __pyx_t_9)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_tmpx) lastprivate(__pyx_v_tmpy) lastprivate(__pyx_v_tmpz)
                    #endif /* _OPENMP */
                    for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_21; __pyx_t_20++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_20);
                            /* Initialize private variables to invalid values */
                            __pyx_v_tmpx = ((double)__PYX_NAN());
                            __pyx_v_tmpy = ((double)__PYX_NAN());
                            __pyx_v_tmpz = ((double)__PYX_NAN());

                            /* "src/helpers/helpers.pyx":258
 * 
 *     for i in prange(coor.shape[0], nogil=True):
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]             # <<<<<<<<<<<<<<
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 */
                            __pyx_t_18 = 0;
                            __pyx_t_17 = 0;
                            if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_R.shape[0];
                            if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_R.shape[1];
                            __pyx_t_10 = __pyx_v_i;
                            __pyx_t_16 = 0;
                            if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor.shape[0];
                            if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coor.shape[1];
                            __pyx_t_9 = 0;
                            __pyx_t_11 = 1;
                            if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_R.shape[0];
                            if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_R.shape[1];
                            __pyx_t_22 = __pyx_v_i;
                            __pyx_t_23 = 1;
                            if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_coor.shape[0];
                            if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_coor.shape[1];
                            __pyx_t_24 = 0;
                            __pyx_t_25 = 2;
                            if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_R.shape[0];
                            if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_R.shape[1];
                            __pyx_t_26 = __pyx_v_i;
                            __pyx_t_27 = 2;
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[0];
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[1];
                            __pyx_v_tmpx = ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_18 * __pyx_v_R.strides[0]) ) + __pyx_t_17 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_10 * __pyx_v_coor.strides[0]) ) + __pyx_t_16 * __pyx_v_coor.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_9 * __pyx_v_R.strides[0]) ) + __pyx_t_11 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_22 * __pyx_v_coor.strides[0]) ) + __pyx_t_23 * __pyx_v_coor.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_24 * __pyx_v_R.strides[0]) ) + __pyx_t_25 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_26 * __pyx_v_coor.strides[0]) ) + __pyx_t_27 * __pyx_v_coor.strides[1]) )))));

                            /* "src/helpers/helpers.pyx":259
 *     for i in prange(coor.shape[0], nogil=True):
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]             # <<<<<<<<<<<<<<
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 *         coor[i,0] = tmpx
 */
                            __pyx_t_27 = 1;
                            __pyx_t_26 = 0;
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_R.shape[0];
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_R.shape[1];
                            __pyx_t_25 = __pyx_v_i;
                            __pyx_t_24 = 0;
                            if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_coor.shape[0];
                            if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_coor.shape[1];
                            __pyx_t_23 = 1;
                            __pyx_t_22 = 1;
                            if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_R.shape[0];
                            if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_R.shape[1];
                            __pyx_t_11 = __pyx_v_i;
                            __pyx_t_9 = 1;
                            if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[0];
                            if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[1];
                            __pyx_t_16 = 1;
                            __pyx_t_10 = 2;
                            if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_R.shape[0];
                            if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_R.shape[1];
                            __pyx_t_17 = __pyx_v_i;
                            __pyx_t_18 = 2;
                            if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coor.shape[0];
                            if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
                            __pyx_v_tmpy = ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_27 * __pyx_v_R.strides[0]) ) + __pyx_t_26 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_25 * __pyx_v_coor.strides[0]) ) + __pyx_t_24 * __pyx_v_coor.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_23 * __pyx_v_R.strides[0]) ) + __pyx_t_22 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_11 * __pyx_v_coor.strides[0]) ) + __pyx_t_9 * __pyx_v_coor.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_16 * __pyx_v_R.strides[0]) ) + __pyx_t_10 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_17 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) )))));

                            /* "src/helpers/helpers.pyx":260
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]             # <<<<<<<<<<<<<<
 *         coor[i,0] = tmpx
 *         coor[i,1] = tmpy
 */
                            __pyx_t_18 = 2;
                            __pyx_t_17 = 0;
                            if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_R.shape[0];
                            if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_R.shape[1];
                            __pyx_t_10 = __pyx_v_i;
                            __pyx_t_16 = 0;
                            if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor.shape[0];
                            if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coor.shape[1];
                            __pyx_t_9 = 2;
                            __pyx_t_11 = 1;
                            if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_R.shape[0];
                            if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_R.shape[1];
                            __pyx_t_22 = __pyx_v_i;
                            __pyx_t_23 = 1;
                            if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_coor.shape[0];
                            if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_coor.shape[1];
                            __pyx_t_24 = 2;
                            __pyx_t_25 = 2;
                            if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_R.shape[0];
                            if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_R.shape[1];
                            __pyx_t_26 = __pyx_v_i;
                            __pyx_t_27 = 2;
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[0];
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[1];
                            __pyx_v_tmpz = ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_18 * __pyx_v_R.strides[0]) ) + __pyx_t_17 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_10 * __pyx_v_coor.strides[0]) ) + __pyx_t_16 * __pyx_v_coor.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_9 * __pyx_v_R.strides[0]) ) + __pyx_t_11 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_22 * __pyx_v_coor.strides[0]) ) + __pyx_t_23 * __pyx_v_coor.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_24 * __pyx_v_R.strides[0]) ) + __pyx_t_25 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_26 * __pyx_v_coor.strides[0]) ) + __pyx_t_27 * __pyx_v_coor.strides[1]) )))));

                            /* "src/helpers/helpers.pyx":261
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 *         coor[i,0] = tmpx             # <<<<<<<<<<<<<<
 *         coor[i,1] = tmpy
 *         coor[i,2] = tmpz
 */
                            __pyx_t_27 = __pyx_v_i;
                            __pyx_t_26 = 0;
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[0];
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_27 * __pyx_v_coor.strides[0]) ) + __pyx_t_26 * __pyx_v_coor.strides[1]) )) = __pyx_v_tmpx;

                            /* "src/helpers/helpers.pyx":262
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 *         coor[i,0] = tmpx
 *         coor[i,1] = tmpy             # <<<<<<<<<<<<<<
 *         coor[i,2] = tmpz
 * 
 */
                            __pyx_t_26 = __pyx_v_i;
                            __pyx_t_27 = 1;
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[0];
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_26 * __pyx_v_coor.strides[0]) ) + __pyx_t_27 * __pyx_v_coor.strides[1]) )) = __pyx_v_tmpy;

                            /* "src/helpers/helpers.pyx":263
 *         coor[i,0] = tmpx
 *         coor[i,1] = tmpy
 *         coor[i,2] = tmpz             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
                            __pyx_t_27 = __pyx_v_i;
                            __pyx_t_26 = 2;
                            if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[0];
                            if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_27 * __pyx_v_coor.strides[0]) ) + __pyx_t_26 * __pyx_v_coor.strides[1]) )) = __pyx_v_tmpz;
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":257
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)
 * 
 *     for i in prange(coor.shape[0], nogil=True):             # <<<<<<<<<<<<<<
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L13;
        }
        __pyx_L12_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L13:;
      }
  }

  /* "src/helpers/helpers.pyx":223
 * 
 * @cython.boundscheck(False)
 * def centerToPointOrientBox(double [:,:] com, double [:,:] coor, double [:] center, double boxl,             # <<<<<<<<<<<<<<
 *                            int [:] apr, int [:] rfa, double [:,:] coorA, double [:,:] coorB):
 *     """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_AddTraceback("newanalysis.helpers.centerToPointOrientBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_R, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_com, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_center, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coorA, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coorB, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":266
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAA(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_19calcEnergyAA(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_18calcEnergyAA[] = "\n    energy = calcEnergyAA(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules)\n\n    Calculates the solvation energy of a solute in any solvent for a specific coordinate set.\n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_19calcEnergyAA = {"calcEnergyAA", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_19calcEnergyAA, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_18calcEnergyAA};
static PyObject *__pyx_pw_11newanalysis_7helpers_19calcEnergyAA(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_isolute;
  int __pyx_v_nmol;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEnergyAA (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_charges,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_isolute,&__pyx_n_s_nmol,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAA", 1, 6, 6, 1); __PYX_ERR(0, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAA", 1, 6, 6, 2); __PYX_ERR(0, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAA", 1, 6, 6, 3); __PYX_ERR(0, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAA", 1, 6, 6, 4); __PYX_ERR(0, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nmol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAA", 1, 6, 6, 5); __PYX_ERR(0, 266, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEnergyAA") < 0)) __PYX_ERR(0, 266, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 266, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 266, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 266, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 266, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L3_error)
    __pyx_v_nmol = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nmol == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEnergyAA", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 266, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_18calcEnergyAA(__pyx_self, __pyx_v_coor, __pyx_v_charges, __pyx_v_apr, __pyx_v_rfa, __pyx_v_isolute, __pyx_v_nmol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_18calcEnergyAA(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_idx;
  int __pyx_v_idx2;
  __Pyx_memviewslice __pyx_v_epa = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_r;
  PyObject *__pyx_v_energy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  double __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcEnergyAA", 0);

  /* "src/helpers/helpers.pyx":274
 *     """
 *     cdef int i, j, k, idx, idx2
 *     cdef double [:] epa = np.zeros(apr[isolute])             # <<<<<<<<<<<<<<
 *     cdef double dx, dy, dz, r
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_2 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_epa = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":277
 *     cdef double dx, dy, dz, r
 * 
 *     energy = 0.0             # <<<<<<<<<<<<<<
 * 
 *     # loop over solute atoms
 */
  __Pyx_INCREF(__pyx_float_0_0);
  __pyx_v_energy = __pyx_float_0_0;

  /* "src/helpers/helpers.pyx":281
 *     # loop over solute atoms
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 */
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_7 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "src/helpers/helpers.pyx":282
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):
 *         idx = rfa[isolute] + i             # <<<<<<<<<<<<<<
 *         # loop over solvent molecules
 *         for j in range(nmol):
 */
    __pyx_t_4 = __pyx_v_isolute;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
    __pyx_v_idx = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_i);

    /* "src/helpers/helpers.pyx":284
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 *         for j in range(nmol):             # <<<<<<<<<<<<<<
 *             if j == isolute:
 *                 continue
 */
    __pyx_t_10 = __pyx_v_nmol;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "src/helpers/helpers.pyx":285
 *         # loop over solvent molecules
 *         for j in range(nmol):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             for k in range(apr[j]):
 */
      __pyx_t_13 = ((__pyx_v_j == __pyx_v_isolute) != 0);
      if (__pyx_t_13) {

        /* "src/helpers/helpers.pyx":286
 *         for j in range(nmol):
 *             if j == isolute:
 *                 continue             # <<<<<<<<<<<<<<
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 */
        goto __pyx_L5_continue;

        /* "src/helpers/helpers.pyx":285
 *         # loop over solvent molecules
 *         for j in range(nmol):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             for k in range(apr[j]):
 */
      }

      /* "src/helpers/helpers.pyx":287
 *             if j == isolute:
 *                 continue
 *             for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 */
      __pyx_t_4 = __pyx_v_j;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
      __pyx_t_14 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
      __pyx_t_15 = __pyx_t_14;
      for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
        __pyx_v_k = __pyx_t_16;

        /* "src/helpers/helpers.pyx":288
 *                 continue
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k             # <<<<<<<<<<<<<<
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 */
        __pyx_t_4 = __pyx_v_j;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
        __pyx_v_idx2 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_k);

        /* "src/helpers/helpers.pyx":289
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]             # <<<<<<<<<<<<<<
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_17 = 0;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coor.shape[1];
        __pyx_t_18 = __pyx_v_idx2;
        __pyx_t_19 = 0;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[0];
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[1];
        __pyx_v_dx = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_17 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_18 * __pyx_v_coor.strides[0]) ) + __pyx_t_19 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":290
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]             # <<<<<<<<<<<<<<
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 */
        __pyx_t_19 = __pyx_v_idx;
        __pyx_t_18 = 1;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_17 = __pyx_v_idx2;
        __pyx_t_4 = 1;
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coor.shape[0];
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[1];
        __pyx_v_dy = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_17 * __pyx_v_coor.strides[0]) ) + __pyx_t_4 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":291
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]             # <<<<<<<<<<<<<<
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 epa[i] += charges[idx] * charges[idx2] / r
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_17 = 2;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coor.shape[1];
        __pyx_t_18 = __pyx_v_idx2;
        __pyx_t_19 = 2;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[0];
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[1];
        __pyx_v_dz = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_17 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_18 * __pyx_v_coor.strides[0]) ) + __pyx_t_19 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":292
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)             # <<<<<<<<<<<<<<
 *                 epa[i] += charges[idx] * charges[idx2] / r
 * 
 */
        __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

        /* "src/helpers/helpers.pyx":293
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 epa[i] += charges[idx] * charges[idx2] / r             # <<<<<<<<<<<<<<
 * 
 *     for i in range(apr[isolute]):
 */
        __pyx_t_19 = __pyx_v_idx;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_charges.shape[0];
        __pyx_t_18 = __pyx_v_idx2;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_charges.shape[0];
        __pyx_t_20 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_19 * __pyx_v_charges.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_18 * __pyx_v_charges.strides[0]) ))));
        if (unlikely(__pyx_v_r == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 293, __pyx_L1_error)
        }
        __pyx_t_18 = __pyx_v_i;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_epa.shape[0];
        *((double *) ( /* dim=0 */ (__pyx_v_epa.data + __pyx_t_18 * __pyx_v_epa.strides[0]) )) += (__pyx_t_20 / __pyx_v_r);
      }
      __pyx_L5_continue:;
    }
  }

  /* "src/helpers/helpers.pyx":295
 *                 epa[i] += charges[idx] * charges[idx2] / r
 * 
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         energy += epa[i]
 * 
 */
  __pyx_t_18 = __pyx_v_isolute;
  if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_apr.shape[0];
  __pyx_t_7 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_18 * __pyx_v_apr.strides[0]) )));
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "src/helpers/helpers.pyx":296
 * 
 *     for i in range(apr[isolute]):
 *         energy += epa[i]             # <<<<<<<<<<<<<<
 * 
 *     return energy * 1390.02
 */
    __pyx_t_18 = __pyx_v_i;
    if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_epa.shape[0];
    __pyx_t_1 = PyFloat_FromDouble((*((double *) ( /* dim=0 */ (__pyx_v_epa.data + __pyx_t_18 * __pyx_v_epa.strides[0]) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_energy, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_energy, __pyx_t_3);
    __pyx_t_3 = 0;
  }

  /* "src/helpers/helpers.pyx":298
 *         energy += epa[i]
 * 
 *     return energy * 1390.02             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_energy, __pyx_float_1390_02); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":266
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAA(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_epa, 1);
  __Pyx_XDECREF(__pyx_v_energy);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":301
 * 
 * @cython.boundscheck(False)
 * def calcEnergyMuA(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double [:] mu_solute):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyMuA(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules,mu_solute)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_21calcEnergyMuA(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_20calcEnergyMuA[] = "\n    energy = calcEnergyMuA(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules,mu_solute)\n\n    Calculates the solvation energy of a solute in any solvent for a specific coordinate set.\n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_21calcEnergyMuA = {"calcEnergyMuA", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_21calcEnergyMuA, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_20calcEnergyMuA};
static PyObject *__pyx_pw_11newanalysis_7helpers_21calcEnergyMuA(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_isolute;
  int __pyx_v_nmol;
  __Pyx_memviewslice __pyx_v_mu_solute = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEnergyMuA (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_charges,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_isolute,&__pyx_n_s_nmol,&__pyx_n_s_mu_solute,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyMuA", 1, 7, 7, 1); __PYX_ERR(0, 301, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyMuA", 1, 7, 7, 2); __PYX_ERR(0, 301, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyMuA", 1, 7, 7, 3); __PYX_ERR(0, 301, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyMuA", 1, 7, 7, 4); __PYX_ERR(0, 301, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nmol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyMuA", 1, 7, 7, 5); __PYX_ERR(0, 301, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mu_solute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyMuA", 1, 7, 7, 6); __PYX_ERR(0, 301, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEnergyMuA") < 0)) __PYX_ERR(0, 301, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 301, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 301, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 301, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 301, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L3_error)
    __pyx_v_nmol = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nmol == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L3_error)
    __pyx_v_mu_solute = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_mu_solute.memview)) __PYX_ERR(0, 301, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEnergyMuA", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 301, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyMuA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_20calcEnergyMuA(__pyx_self, __pyx_v_coor, __pyx_v_charges, __pyx_v_apr, __pyx_v_rfa, __pyx_v_isolute, __pyx_v_nmol, __pyx_v_mu_solute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_20calcEnergyMuA(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, __Pyx_memviewslice __pyx_v_mu_solute) {
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_idx2;
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_r;
  double __pyx_v_energy;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcEnergyMuA", 0);

  /* "src/helpers/helpers.pyx":311
 *     cdef double dx, dy, dz, r, energy
 * 
 *     energy = 0.0             # <<<<<<<<<<<<<<
 * 
 *     # loop over solvent molecules
 */
  __pyx_v_energy = 0.0;

  /* "src/helpers/helpers.pyx":314
 * 
 *     # loop over solvent molecules
 *     for j in range(nmol):             # <<<<<<<<<<<<<<
 *         if j == isolute:
 *             continue
 */
  __pyx_t_1 = __pyx_v_nmol;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_j = __pyx_t_3;

    /* "src/helpers/helpers.pyx":315
 *     # loop over solvent molecules
 *     for j in range(nmol):
 *         if j == isolute:             # <<<<<<<<<<<<<<
 *             continue
 *         for k in range(apr[j]):
 */
    __pyx_t_4 = ((__pyx_v_j == __pyx_v_isolute) != 0);
    if (__pyx_t_4) {

      /* "src/helpers/helpers.pyx":316
 *     for j in range(nmol):
 *         if j == isolute:
 *             continue             # <<<<<<<<<<<<<<
 *         for k in range(apr[j]):
 *             idx2 = rfa[j] + k
 */
      goto __pyx_L3_continue;

      /* "src/helpers/helpers.pyx":315
 *     # loop over solvent molecules
 *     for j in range(nmol):
 *         if j == isolute:             # <<<<<<<<<<<<<<
 *             continue
 *         for k in range(apr[j]):
 */
    }

    /* "src/helpers/helpers.pyx":317
 *         if j == isolute:
 *             continue
 *         for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *             idx2 = rfa[j] + k
 *             dx = coor[idx2,0]
 */
    __pyx_t_5 = __pyx_v_j;
    if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_apr.shape[0];
    __pyx_t_6 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_5 * __pyx_v_apr.strides[0]) )));
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_k = __pyx_t_8;

      /* "src/helpers/helpers.pyx":318
 *             continue
 *         for k in range(apr[j]):
 *             idx2 = rfa[j] + k             # <<<<<<<<<<<<<<
 *             dx = coor[idx2,0]
 *             dy = coor[idx2,1]
 */
      __pyx_t_5 = __pyx_v_j;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_rfa.shape[0];
      __pyx_v_idx2 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_5 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_k);

      /* "src/helpers/helpers.pyx":319
 *         for k in range(apr[j]):
 *             idx2 = rfa[j] + k
 *             dx = coor[idx2,0]             # <<<<<<<<<<<<<<
 *             dy = coor[idx2,1]
 *             dz = coor[idx2,2]
 */
      __pyx_t_5 = __pyx_v_idx2;
      __pyx_t_9 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_coor.shape[0];
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[1];
      __pyx_v_dx = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_5 * __pyx_v_coor.strides[0]) ) + __pyx_t_9 * __pyx_v_coor.strides[1]) )));

      /* "src/helpers/helpers.pyx":320
 *             idx2 = rfa[j] + k
 *             dx = coor[idx2,0]
 *             dy = coor[idx2,1]             # <<<<<<<<<<<<<<
 *             dz = coor[idx2,2]
 *             r  = sqrt(dx*dx + dy*dy + dz*dz)
 */
      __pyx_t_9 = __pyx_v_idx2;
      __pyx_t_5 = 1;
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[0];
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_coor.shape[1];
      __pyx_v_dy = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_9 * __pyx_v_coor.strides[0]) ) + __pyx_t_5 * __pyx_v_coor.strides[1]) )));

      /* "src/helpers/helpers.pyx":321
 *             dx = coor[idx2,0]
 *             dy = coor[idx2,1]
 *             dz = coor[idx2,2]             # <<<<<<<<<<<<<<
 *             r  = sqrt(dx*dx + dy*dy + dz*dz)
 * 
 */
      __pyx_t_5 = __pyx_v_idx2;
      __pyx_t_9 = 2;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_coor.shape[0];
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[1];
      __pyx_v_dz = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_5 * __pyx_v_coor.strides[0]) ) + __pyx_t_9 * __pyx_v_coor.strides[1]) )));

      /* "src/helpers/helpers.pyx":322
 *             dy = coor[idx2,1]
 *             dz = coor[idx2,2]
 *             r  = sqrt(dx*dx + dy*dy + dz*dz)             # <<<<<<<<<<<<<<
 * 
 *             energy+=charges[idx2]*(mu_solute[0]*dx+mu_solute[1]*dy+mu_solute[2]*dz)/(r*r*r)
 */
      __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

      /* "src/helpers/helpers.pyx":324
 *             r  = sqrt(dx*dx + dy*dy + dz*dz)
 * 
 *             energy+=charges[idx2]*(mu_solute[0]*dx+mu_solute[1]*dy+mu_solute[2]*dz)/(r*r*r)             # <<<<<<<<<<<<<<
 * 
 *     return energy * 1390.02
 */
      __pyx_t_9 = __pyx_v_idx2;
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_charges.shape[0];
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_mu_solute.shape[0];
      __pyx_t_10 = 1;
      if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_mu_solute.shape[0];
      __pyx_t_11 = 2;
      if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_mu_solute.shape[0];
      __pyx_t_12 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_9 * __pyx_v_charges.strides[0]) ))) * ((((*((double *) ( /* dim=0 */ (__pyx_v_mu_solute.data + __pyx_t_5 * __pyx_v_mu_solute.strides[0]) ))) * __pyx_v_dx) + ((*((double *) ( /* dim=0 */ (__pyx_v_mu_solute.data + __pyx_t_10 * __pyx_v_mu_solute.strides[0]) ))) * __pyx_v_dy)) + ((*((double *) ( /* dim=0 */ (__pyx_v_mu_solute.data + __pyx_t_11 * __pyx_v_mu_solute.strides[0]) ))) * __pyx_v_dz)));
      __pyx_t_13 = ((__pyx_v_r * __pyx_v_r) * __pyx_v_r);
      if (unlikely(__pyx_t_13 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 324, __pyx_L1_error)
      }
      __pyx_v_energy = (__pyx_v_energy + (__pyx_t_12 / __pyx_t_13));
    }
    __pyx_L3_continue:;
  }

  /* "src/helpers/helpers.pyx":326
 *             energy+=charges[idx2]*(mu_solute[0]*dx+mu_solute[1]*dy+mu_solute[2]*dz)/(r*r*r)
 * 
 *     return energy * 1390.02             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_14 = PyFloat_FromDouble((__pyx_v_energy * 1390.02)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_r = __pyx_t_14;
  __pyx_t_14 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":301
 * 
 * @cython.boundscheck(False)
 * def calcEnergyMuA(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double [:] mu_solute):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyMuA(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules,mu_solute)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyMuA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_mu_solute, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":329
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAApermind(double [:,:] coor, double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int first, int last, double[:] drude):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, resnum_from, resnum_to, drude_list)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_23calcEnergyAApermind(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_22calcEnergyAApermind[] = "\n    energy = calcEnergyAA(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, resnum_from, resnum_to, drude_list)\n\n    Calculates the permanent and induced part of the solvation energy of a solute in any solvent for a specific coordinate set.\n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_23calcEnergyAApermind = {"calcEnergyAApermind", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_23calcEnergyAApermind, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_22calcEnergyAApermind};
static PyObject *__pyx_pw_11newanalysis_7helpers_23calcEnergyAApermind(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  CYTHON_UNUSED __Pyx_memviewslice __pyx_v_coms = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_isolute;
  int __pyx_v_first;
  int __pyx_v_last;
  __Pyx_memviewslice __pyx_v_drude = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEnergyAApermind (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_coms,&__pyx_n_s_charges,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_isolute,&__pyx_n_s_first,&__pyx_n_s_last,&__pyx_n_s_drude,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermind", 1, 9, 9, 1); __PYX_ERR(0, 329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermind", 1, 9, 9, 2); __PYX_ERR(0, 329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermind", 1, 9, 9, 3); __PYX_ERR(0, 329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermind", 1, 9, 9, 4); __PYX_ERR(0, 329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermind", 1, 9, 9, 5); __PYX_ERR(0, 329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_first)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermind", 1, 9, 9, 6); __PYX_ERR(0, 329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermind", 1, 9, 9, 7); __PYX_ERR(0, 329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_drude)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermind", 1, 9, 9, 8); __PYX_ERR(0, 329, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEnergyAApermind") < 0)) __PYX_ERR(0, 329, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 329, __pyx_L3_error)
    __pyx_v_coms = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coms.memview)) __PYX_ERR(0, 329, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 329, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 329, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 329, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
    __pyx_v_first = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_first == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
    __pyx_v_last = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_last == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
    __pyx_v_drude = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[8], PyBUF_WRITABLE); if (unlikely(!__pyx_v_drude.memview)) __PYX_ERR(0, 329, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEnergyAApermind", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 329, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAApermind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_22calcEnergyAApermind(__pyx_self, __pyx_v_coor, __pyx_v_coms, __pyx_v_charges, __pyx_v_apr, __pyx_v_rfa, __pyx_v_isolute, __pyx_v_first, __pyx_v_last, __pyx_v_drude);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_22calcEnergyAApermind(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, CYTHON_UNUSED __Pyx_memviewslice __pyx_v_coms, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_first, int __pyx_v_last, __Pyx_memviewslice __pyx_v_drude) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_idx;
  int __pyx_v_idx2;
  __Pyx_memviewslice __pyx_v_epa_ind = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_epa_perm = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_r;
  double __pyx_v_qq;
  double __pyx_v_energy_perm;
  double __pyx_v_energy_ind;
  double __pyx_v_qq_diff;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  double __pyx_t_20;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcEnergyAApermind", 0);

  /* "src/helpers/helpers.pyx":337
 *     """
 *     cdef int i, j, k, idx, idx2, histo_error
 *     cdef double [:] epa_ind = np.zeros(apr[isolute])             # <<<<<<<<<<<<<<
 *     cdef double [:] epa_perm = np.zeros(apr[isolute])
 *     cdef double dx, dy, dz, r, qq, energy_perm, energy_ind, qq_diff
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_2 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_epa_ind = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":338
 *     cdef int i, j, k, idx, idx2, histo_error
 *     cdef double [:] epa_ind = np.zeros(apr[isolute])
 *     cdef double [:] epa_perm = np.zeros(apr[isolute])             # <<<<<<<<<<<<<<
 *     cdef double dx, dy, dz, r, qq, energy_perm, energy_ind, qq_diff
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_3 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_epa_perm = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":341
 *     cdef double dx, dy, dz, r, qq, energy_perm, energy_ind, qq_diff
 * 
 *     energy_perm = 0.0             # <<<<<<<<<<<<<<
 *     energy_ind = 0.0
 * 
 */
  __pyx_v_energy_perm = 0.0;

  /* "src/helpers/helpers.pyx":342
 * 
 *     energy_perm = 0.0
 *     energy_ind = 0.0             # <<<<<<<<<<<<<<
 * 
 *     # loop over solute atoms
 */
  __pyx_v_energy_ind = 0.0;

  /* "src/helpers/helpers.pyx":346
 *     # loop over solute atoms
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 */
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_7 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "src/helpers/helpers.pyx":347
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):
 *         idx = rfa[isolute] + i             # <<<<<<<<<<<<<<
 *         # loop over solvent molecules
 *         for j in range(first,last+1):
 */
    __pyx_t_4 = __pyx_v_isolute;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
    __pyx_v_idx = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_i);

    /* "src/helpers/helpers.pyx":349
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 *         for j in range(first,last+1):             # <<<<<<<<<<<<<<
 *             if j == isolute:
 *                 continue
 */
    __pyx_t_10 = (__pyx_v_last + 1);
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = __pyx_v_first; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "src/helpers/helpers.pyx":350
 *         # loop over solvent molecules
 *         for j in range(first,last+1):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             for k in range(apr[j]):
 */
      __pyx_t_13 = ((__pyx_v_j == __pyx_v_isolute) != 0);
      if (__pyx_t_13) {

        /* "src/helpers/helpers.pyx":351
 *         for j in range(first,last+1):
 *             if j == isolute:
 *                 continue             # <<<<<<<<<<<<<<
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 */
        goto __pyx_L5_continue;

        /* "src/helpers/helpers.pyx":350
 *         # loop over solvent molecules
 *         for j in range(first,last+1):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             for k in range(apr[j]):
 */
      }

      /* "src/helpers/helpers.pyx":352
 *             if j == isolute:
 *                 continue
 *             for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 */
      __pyx_t_4 = __pyx_v_j;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
      __pyx_t_14 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
      __pyx_t_15 = __pyx_t_14;
      for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
        __pyx_v_k = __pyx_t_16;

        /* "src/helpers/helpers.pyx":353
 *                 continue
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k             # <<<<<<<<<<<<<<
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 */
        __pyx_t_4 = __pyx_v_j;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
        __pyx_v_idx2 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_k);

        /* "src/helpers/helpers.pyx":354
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]             # <<<<<<<<<<<<<<
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_17 = 0;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coor.shape[1];
        __pyx_t_18 = __pyx_v_idx2;
        __pyx_t_19 = 0;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[0];
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[1];
        __pyx_v_dx = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_17 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_18 * __pyx_v_coor.strides[0]) ) + __pyx_t_19 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":355
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]             # <<<<<<<<<<<<<<
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 */
        __pyx_t_19 = __pyx_v_idx;
        __pyx_t_18 = 1;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_17 = __pyx_v_idx2;
        __pyx_t_4 = 1;
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coor.shape[0];
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[1];
        __pyx_v_dy = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_17 * __pyx_v_coor.strides[0]) ) + __pyx_t_4 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":356
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]             # <<<<<<<<<<<<<<
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 qq = charges[idx] * charges[idx2] / r
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_17 = 2;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coor.shape[1];
        __pyx_t_18 = __pyx_v_idx2;
        __pyx_t_19 = 2;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[0];
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[1];
        __pyx_v_dz = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_17 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_18 * __pyx_v_coor.strides[0]) ) + __pyx_t_19 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":357
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)             # <<<<<<<<<<<<<<
 *                 qq = charges[idx] * charges[idx2] / r
 * 
 */
        __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

        /* "src/helpers/helpers.pyx":358
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 qq = charges[idx] * charges[idx2] / r             # <<<<<<<<<<<<<<
 * 
 *                 if drude[k]==1:
 */
        __pyx_t_19 = __pyx_v_idx;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_charges.shape[0];
        __pyx_t_18 = __pyx_v_idx2;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_charges.shape[0];
        __pyx_t_20 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_19 * __pyx_v_charges.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_18 * __pyx_v_charges.strides[0]) ))));
        if (unlikely(__pyx_v_r == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 358, __pyx_L1_error)
        }
        __pyx_v_qq = (__pyx_t_20 / __pyx_v_r);

        /* "src/helpers/helpers.pyx":360
 *                 qq = charges[idx] * charges[idx2] / r
 * 
 *                 if drude[k]==1:             # <<<<<<<<<<<<<<
 *                     epa_ind[i]+=qq
 *                 else:
 */
        __pyx_t_18 = __pyx_v_k;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_drude.shape[0];
        __pyx_t_13 = (((*((double *) ( /* dim=0 */ (__pyx_v_drude.data + __pyx_t_18 * __pyx_v_drude.strides[0]) ))) == 1.0) != 0);
        if (__pyx_t_13) {

          /* "src/helpers/helpers.pyx":361
 * 
 *                 if drude[k]==1:
 *                     epa_ind[i]+=qq             # <<<<<<<<<<<<<<
 *                 else:
 *                     epa_perm[i]+=qq
 */
          __pyx_t_18 = __pyx_v_i;
          if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_epa_ind.shape[0];
          *((double *) ( /* dim=0 */ (__pyx_v_epa_ind.data + __pyx_t_18 * __pyx_v_epa_ind.strides[0]) )) += __pyx_v_qq;

          /* "src/helpers/helpers.pyx":360
 *                 qq = charges[idx] * charges[idx2] / r
 * 
 *                 if drude[k]==1:             # <<<<<<<<<<<<<<
 *                     epa_ind[i]+=qq
 *                 else:
 */
          goto __pyx_L10;
        }

        /* "src/helpers/helpers.pyx":363
 *                     epa_ind[i]+=qq
 *                 else:
 *                     epa_perm[i]+=qq             # <<<<<<<<<<<<<<
 *                     if k<apr[j]-1 and drude[k+1]==1:
 *                         qq_diff=charges[idx]*charges[idx2+1] / r
 */
        /*else*/ {
          __pyx_t_18 = __pyx_v_i;
          if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_epa_perm.shape[0];
          *((double *) ( /* dim=0 */ (__pyx_v_epa_perm.data + __pyx_t_18 * __pyx_v_epa_perm.strides[0]) )) += __pyx_v_qq;

          /* "src/helpers/helpers.pyx":364
 *                 else:
 *                     epa_perm[i]+=qq
 *                     if k<apr[j]-1 and drude[k+1]==1:             # <<<<<<<<<<<<<<
 *                         qq_diff=charges[idx]*charges[idx2+1] / r
 *                         epa_ind[i] -= qq_diff
 */
          __pyx_t_18 = __pyx_v_j;
          if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_apr.shape[0];
          __pyx_t_21 = ((__pyx_v_k < ((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_18 * __pyx_v_apr.strides[0]) ))) - 1)) != 0);
          if (__pyx_t_21) {
          } else {
            __pyx_t_13 = __pyx_t_21;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_18 = (__pyx_v_k + 1);
          if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_drude.shape[0];
          __pyx_t_21 = (((*((double *) ( /* dim=0 */ (__pyx_v_drude.data + __pyx_t_18 * __pyx_v_drude.strides[0]) ))) == 1.0) != 0);
          __pyx_t_13 = __pyx_t_21;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_13) {

            /* "src/helpers/helpers.pyx":365
 *                     epa_perm[i]+=qq
 *                     if k<apr[j]-1 and drude[k+1]==1:
 *                         qq_diff=charges[idx]*charges[idx2+1] / r             # <<<<<<<<<<<<<<
 *                         epa_ind[i] -= qq_diff
 *                         epa_perm[i]+= qq_diff
 */
            __pyx_t_18 = __pyx_v_idx;
            if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_charges.shape[0];
            __pyx_t_19 = (__pyx_v_idx2 + 1);
            if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_charges.shape[0];
            __pyx_t_20 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_18 * __pyx_v_charges.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_19 * __pyx_v_charges.strides[0]) ))));
            if (unlikely(__pyx_v_r == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 365, __pyx_L1_error)
            }
            __pyx_v_qq_diff = (__pyx_t_20 / __pyx_v_r);

            /* "src/helpers/helpers.pyx":366
 *                     if k<apr[j]-1 and drude[k+1]==1:
 *                         qq_diff=charges[idx]*charges[idx2+1] / r
 *                         epa_ind[i] -= qq_diff             # <<<<<<<<<<<<<<
 *                         epa_perm[i]+= qq_diff
 * 
 */
            __pyx_t_19 = __pyx_v_i;
            if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_epa_ind.shape[0];
            *((double *) ( /* dim=0 */ (__pyx_v_epa_ind.data + __pyx_t_19 * __pyx_v_epa_ind.strides[0]) )) -= __pyx_v_qq_diff;

            /* "src/helpers/helpers.pyx":367
 *                         qq_diff=charges[idx]*charges[idx2+1] / r
 *                         epa_ind[i] -= qq_diff
 *                         epa_perm[i]+= qq_diff             # <<<<<<<<<<<<<<
 * 
 *     for i in range(apr[isolute]):
 */
            __pyx_t_19 = __pyx_v_i;
            if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_epa_perm.shape[0];
            *((double *) ( /* dim=0 */ (__pyx_v_epa_perm.data + __pyx_t_19 * __pyx_v_epa_perm.strides[0]) )) += __pyx_v_qq_diff;

            /* "src/helpers/helpers.pyx":364
 *                 else:
 *                     epa_perm[i]+=qq
 *                     if k<apr[j]-1 and drude[k+1]==1:             # <<<<<<<<<<<<<<
 *                         qq_diff=charges[idx]*charges[idx2+1] / r
 *                         epa_ind[i] -= qq_diff
 */
          }
        }
        __pyx_L10:;
      }
      __pyx_L5_continue:;
    }
  }

  /* "src/helpers/helpers.pyx":369
 *                         epa_perm[i]+= qq_diff
 * 
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         energy_perm += epa_perm[i]
 *         energy_ind  += epa_ind[i]
 */
  __pyx_t_19 = __pyx_v_isolute;
  if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_apr.shape[0];
  __pyx_t_7 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_19 * __pyx_v_apr.strides[0]) )));
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "src/helpers/helpers.pyx":370
 * 
 *     for i in range(apr[isolute]):
 *         energy_perm += epa_perm[i]             # <<<<<<<<<<<<<<
 *         energy_ind  += epa_ind[i]
 * 
 */
    __pyx_t_19 = __pyx_v_i;
    if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_epa_perm.shape[0];
    __pyx_v_energy_perm = (__pyx_v_energy_perm + (*((double *) ( /* dim=0 */ (__pyx_v_epa_perm.data + __pyx_t_19 * __pyx_v_epa_perm.strides[0]) ))));

    /* "src/helpers/helpers.pyx":371
 *     for i in range(apr[isolute]):
 *         energy_perm += epa_perm[i]
 *         energy_ind  += epa_ind[i]             # <<<<<<<<<<<<<<
 * 
 *     return energy_perm * 1390.02 , energy_ind * 1390.02
 */
    __pyx_t_19 = __pyx_v_i;
    if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_epa_ind.shape[0];
    __pyx_v_energy_ind = (__pyx_v_energy_ind + (*((double *) ( /* dim=0 */ (__pyx_v_epa_ind.data + __pyx_t_19 * __pyx_v_epa_ind.strides[0]) ))));
  }

  /* "src/helpers/helpers.pyx":373
 *         energy_ind  += epa_ind[i]
 * 
 *     return energy_perm * 1390.02 , energy_ind * 1390.02             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_energy_perm * 1390.02)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_energy_ind * 1390.02)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":329
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAApermind(double [:,:] coor, double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int first, int last, double[:] drude):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, resnum_from, resnum_to, drude_list)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAApermind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_epa_ind, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_epa_perm, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coms, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_drude, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":376
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAAhisto(double [:,:] coor,  double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double histo_min, double histo_max, int histo_bins, int[:] trehalose, int[:] oxyquinol):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAAhisto(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, min_histo, max_histo, bins_hist,array indices, array indices 2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_25calcEnergyAAhisto(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_24calcEnergyAAhisto[] = "\n    energy = calcEnergyAAhisto(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, min_histo, max_histo, bins_hist,array indices, array indices 2)\n\n    Calculates the solvation energy of a solute in any solvent for a specific coordinate set.\n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_25calcEnergyAAhisto = {"calcEnergyAAhisto", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_25calcEnergyAAhisto, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_24calcEnergyAAhisto};
static PyObject *__pyx_pw_11newanalysis_7helpers_25calcEnergyAAhisto(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coms = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_isolute;
  int __pyx_v_nmol;
  double __pyx_v_histo_min;
  double __pyx_v_histo_max;
  int __pyx_v_histo_bins;
  __Pyx_memviewslice __pyx_v_trehalose = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_oxyquinol = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEnergyAAhisto (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_coms,&__pyx_n_s_charges,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_isolute,&__pyx_n_s_nmol,&__pyx_n_s_histo_min,&__pyx_n_s_histo_max,&__pyx_n_s_histo_bins,&__pyx_n_s_trehalose,&__pyx_n_s_oxyquinol,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 1); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 2); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 3); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 4); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 5); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nmol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 6); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_histo_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 7); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_histo_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 8); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_histo_bins)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 9); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trehalose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 10); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_oxyquinol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, 11); __PYX_ERR(0, 376, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEnergyAAhisto") < 0)) __PYX_ERR(0, 376, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_coms = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coms.memview)) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_nmol = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_nmol == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_histo_min = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_histo_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_histo_max = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_histo_max == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_histo_bins = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_histo_bins == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_trehalose = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[10], PyBUF_WRITABLE); if (unlikely(!__pyx_v_trehalose.memview)) __PYX_ERR(0, 376, __pyx_L3_error)
    __pyx_v_oxyquinol = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[11], PyBUF_WRITABLE); if (unlikely(!__pyx_v_oxyquinol.memview)) __PYX_ERR(0, 376, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 376, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAAhisto", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_24calcEnergyAAhisto(__pyx_self, __pyx_v_coor, __pyx_v_coms, __pyx_v_charges, __pyx_v_apr, __pyx_v_rfa, __pyx_v_isolute, __pyx_v_nmol, __pyx_v_histo_min, __pyx_v_histo_max, __pyx_v_histo_bins, __pyx_v_trehalose, __pyx_v_oxyquinol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_24calcEnergyAAhisto(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_coms, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, double __pyx_v_histo_min, double __pyx_v_histo_max, int __pyx_v_histo_bins, __Pyx_memviewslice __pyx_v_trehalose, __Pyx_memviewslice __pyx_v_oxyquinol) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_idx;
  int __pyx_v_idx2;
  int __pyx_v_histo_error;
  __Pyx_memviewslice __pyx_v_epa = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_histo = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_count = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_store = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_r;
  double __pyx_v_rtre;
  double __pyx_v_tmp;
  double __pyx_v_tmp_ener;
  double __pyx_v_histo_width;
  __Pyx_memviewslice __pyx_v_squared_r_tre = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_squared_r_oxy = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_energy = NULL;
  double __pyx_v_roxy;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  Py_ssize_t __pyx_t_36;
  int __pyx_t_37;
  double __pyx_t_38;
  PyObject *__pyx_t_39 = NULL;
  PyObject *__pyx_t_40 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcEnergyAAhisto", 0);

  /* "src/helpers/helpers.pyx":384
 *     """
 *     cdef int i, j, k, idx, idx2, histo_error
 *     cdef double [:] epa = np.zeros(apr[isolute])             # <<<<<<<<<<<<<<
 *     cdef double [:,:] histo=np.zeros((histo_bins,histo_bins))
 *     cdef double [:,:] count=np.zeros((histo_bins,histo_bins))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_2 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_epa = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":385
 *     cdef int i, j, k, idx, idx2, histo_error
 *     cdef double [:] epa = np.zeros(apr[isolute])
 *     cdef double [:,:] histo=np.zeros((histo_bins,histo_bins))             # <<<<<<<<<<<<<<
 *     cdef double [:,:] count=np.zeros((histo_bins,histo_bins))
 *     cdef double [:] store=np.zeros(nmol)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_histo_bins); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_histo_bins); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_histo = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "src/helpers/helpers.pyx":386
 *     cdef double [:] epa = np.zeros(apr[isolute])
 *     cdef double [:,:] histo=np.zeros((histo_bins,histo_bins))
 *     cdef double [:,:] count=np.zeros((histo_bins,histo_bins))             # <<<<<<<<<<<<<<
 *     cdef double [:] store=np.zeros(nmol)
 *     cdef double dx, dy, dz, r, rtre, tmp, tmp_ener, histo_width
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_histo_bins); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_histo_bins); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_count = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "src/helpers/helpers.pyx":387
 *     cdef double [:,:] histo=np.zeros((histo_bins,histo_bins))
 *     cdef double [:,:] count=np.zeros((histo_bins,histo_bins))
 *     cdef double [:] store=np.zeros(nmol)             # <<<<<<<<<<<<<<
 *     cdef double dx, dy, dz, r, rtre, tmp, tmp_ener, histo_width
 *     cdef double [:] squared_r_tre = np.zeros(trehalose.shape[0])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_nmol); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_store = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":389
 *     cdef double [:] store=np.zeros(nmol)
 *     cdef double dx, dy, dz, r, rtre, tmp, tmp_ener, histo_width
 *     cdef double [:] squared_r_tre = np.zeros(trehalose.shape[0])             # <<<<<<<<<<<<<<
 *     cdef double [:] squared_r_oxy = np.zeros(oxyquinol.shape[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t((__pyx_v_trehalose.shape[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_squared_r_tre = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":390
 *     cdef double dx, dy, dz, r, rtre, tmp, tmp_ener, histo_width
 *     cdef double [:] squared_r_tre = np.zeros(trehalose.shape[0])
 *     cdef double [:] squared_r_oxy = np.zeros(oxyquinol.shape[0])             # <<<<<<<<<<<<<<
 * 
 *     energy = 0.0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromSsize_t((__pyx_v_oxyquinol.shape[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_squared_r_oxy = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":392
 *     cdef double [:] squared_r_oxy = np.zeros(oxyquinol.shape[0])
 * 
 *     energy = 0.0             # <<<<<<<<<<<<<<
 *     histo_error=0
 *     histo_width=(histo_max-histo_min)/histo_bins
 */
  __Pyx_INCREF(__pyx_float_0_0);
  __pyx_v_energy = __pyx_float_0_0;

  /* "src/helpers/helpers.pyx":393
 * 
 *     energy = 0.0
 *     histo_error=0             # <<<<<<<<<<<<<<
 *     histo_width=(histo_max-histo_min)/histo_bins
 * 
 */
  __pyx_v_histo_error = 0;

  /* "src/helpers/helpers.pyx":394
 *     energy = 0.0
 *     histo_error=0
 *     histo_width=(histo_max-histo_min)/histo_bins             # <<<<<<<<<<<<<<
 * 
 *     # loop over solute atoms
 */
  __pyx_t_9 = (__pyx_v_histo_max - __pyx_v_histo_min);
  if (unlikely(__pyx_v_histo_bins == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 394, __pyx_L1_error)
  }
  __pyx_v_histo_width = (__pyx_t_9 / __pyx_v_histo_bins);

  /* "src/helpers/helpers.pyx":398
 *     # loop over solute atoms
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 */
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_10 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
  __pyx_t_11 = __pyx_t_10;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "src/helpers/helpers.pyx":399
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):
 *         idx = rfa[isolute] + i             # <<<<<<<<<<<<<<
 *         # loop over solvent molecules
 * 
 */
    __pyx_t_4 = __pyx_v_isolute;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
    __pyx_v_idx = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_i);

    /* "src/helpers/helpers.pyx":402
 *         # loop over solvent molecules
 * 
 *         for j in range(nmol):             # <<<<<<<<<<<<<<
 *             if j == isolute:
 *                 continue
 */
    __pyx_t_13 = __pyx_v_nmol;
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_j = __pyx_t_15;

      /* "src/helpers/helpers.pyx":403
 * 
 *         for j in range(nmol):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             tmp_ener=0.0
 */
      __pyx_t_16 = ((__pyx_v_j == __pyx_v_isolute) != 0);
      if (__pyx_t_16) {

        /* "src/helpers/helpers.pyx":404
 *         for j in range(nmol):
 *             if j == isolute:
 *                 continue             # <<<<<<<<<<<<<<
 *             tmp_ener=0.0
 *             for k in range(apr[j]):
 */
        goto __pyx_L5_continue;

        /* "src/helpers/helpers.pyx":403
 * 
 *         for j in range(nmol):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             tmp_ener=0.0
 */
      }

      /* "src/helpers/helpers.pyx":405
 *             if j == isolute:
 *                 continue
 *             tmp_ener=0.0             # <<<<<<<<<<<<<<
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 */
      __pyx_v_tmp_ener = 0.0;

      /* "src/helpers/helpers.pyx":406
 *                 continue
 *             tmp_ener=0.0
 *             for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 */
      __pyx_t_4 = __pyx_v_j;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
      __pyx_t_17 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
      __pyx_t_18 = __pyx_t_17;
      for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
        __pyx_v_k = __pyx_t_19;

        /* "src/helpers/helpers.pyx":407
 *             tmp_ener=0.0
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k             # <<<<<<<<<<<<<<
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 */
        __pyx_t_4 = __pyx_v_j;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
        __pyx_v_idx2 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_k);

        /* "src/helpers/helpers.pyx":408
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]             # <<<<<<<<<<<<<<
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_20 = 0;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_t_21 = __pyx_v_idx2;
        __pyx_t_22 = 0;
        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_coor.shape[0];
        if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_coor.shape[1];
        __pyx_v_dx = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_21 * __pyx_v_coor.strides[0]) ) + __pyx_t_22 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":409
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]             # <<<<<<<<<<<<<<
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 */
        __pyx_t_22 = __pyx_v_idx;
        __pyx_t_21 = 1;
        if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_coor.shape[0];
        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_coor.shape[1];
        __pyx_t_20 = __pyx_v_idx2;
        __pyx_t_4 = 1;
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[0];
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[1];
        __pyx_v_dy = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_22 * __pyx_v_coor.strides[0]) ) + __pyx_t_21 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_20 * __pyx_v_coor.strides[0]) ) + __pyx_t_4 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":410
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]             # <<<<<<<<<<<<<<
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 tmp=charges[idx] * charges[idx2] / r
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_20 = 2;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_t_21 = __pyx_v_idx2;
        __pyx_t_22 = 2;
        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_coor.shape[0];
        if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_coor.shape[1];
        __pyx_v_dz = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_21 * __pyx_v_coor.strides[0]) ) + __pyx_t_22 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":411
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)             # <<<<<<<<<<<<<<
 *                 tmp=charges[idx] * charges[idx2] / r
 *                 tmp_ener+=tmp
 */
        __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

        /* "src/helpers/helpers.pyx":412
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 tmp=charges[idx] * charges[idx2] / r             # <<<<<<<<<<<<<<
 *                 tmp_ener+=tmp
 *                 epa[i] += tmp
 */
        __pyx_t_22 = __pyx_v_idx;
        if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_charges.shape[0];
        __pyx_t_21 = __pyx_v_idx2;
        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_charges.shape[0];
        __pyx_t_9 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_22 * __pyx_v_charges.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_21 * __pyx_v_charges.strides[0]) ))));
        if (unlikely(__pyx_v_r == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 412, __pyx_L1_error)
        }
        __pyx_v_tmp = (__pyx_t_9 / __pyx_v_r);

        /* "src/helpers/helpers.pyx":413
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 tmp=charges[idx] * charges[idx2] / r
 *                 tmp_ener+=tmp             # <<<<<<<<<<<<<<
 *                 epa[i] += tmp
 * 
 */
        __pyx_v_tmp_ener = (__pyx_v_tmp_ener + __pyx_v_tmp);

        /* "src/helpers/helpers.pyx":414
 *                 tmp=charges[idx] * charges[idx2] / r
 *                 tmp_ener+=tmp
 *                 epa[i] += tmp             # <<<<<<<<<<<<<<
 * 
 *             store[j]+=tmp_ener
 */
        __pyx_t_21 = __pyx_v_i;
        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_epa.shape[0];
        *((double *) ( /* dim=0 */ (__pyx_v_epa.data + __pyx_t_21 * __pyx_v_epa.strides[0]) )) += __pyx_v_tmp;
      }

      /* "src/helpers/helpers.pyx":416
 *                 epa[i] += tmp
 * 
 *             store[j]+=tmp_ener             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_21 = __pyx_v_j;
      if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_store.shape[0];
      *((double *) ( /* dim=0 */ (__pyx_v_store.data + __pyx_t_21 * __pyx_v_store.strides[0]) )) += __pyx_v_tmp_ener;
      __pyx_L5_continue:;
    }
  }

  /* "src/helpers/helpers.pyx":419
 * 
 * 
 *     for j in range(nmol):             # <<<<<<<<<<<<<<
 *         if j==isolute:
 *             continue
 */
  __pyx_t_10 = __pyx_v_nmol;
  __pyx_t_11 = __pyx_t_10;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_j = __pyx_t_12;

    /* "src/helpers/helpers.pyx":420
 * 
 *     for j in range(nmol):
 *         if j==isolute:             # <<<<<<<<<<<<<<
 *             continue
 *         for k in range(trehalose.shape[0]):
 */
    __pyx_t_16 = ((__pyx_v_j == __pyx_v_isolute) != 0);
    if (__pyx_t_16) {

      /* "src/helpers/helpers.pyx":421
 *     for j in range(nmol):
 *         if j==isolute:
 *             continue             # <<<<<<<<<<<<<<
 *         for k in range(trehalose.shape[0]):
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 */
      goto __pyx_L10_continue;

      /* "src/helpers/helpers.pyx":420
 * 
 *     for j in range(nmol):
 *         if j==isolute:             # <<<<<<<<<<<<<<
 *             continue
 *         for k in range(trehalose.shape[0]):
 */
    }

    /* "src/helpers/helpers.pyx":422
 *         if j==isolute:
 *             continue
 *         for k in range(trehalose.shape[0]):             # <<<<<<<<<<<<<<
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 *             if k>=1:
 */
    __pyx_t_23 = (__pyx_v_trehalose.shape[0]);
    __pyx_t_24 = __pyx_t_23;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_24; __pyx_t_13+=1) {
      __pyx_v_k = __pyx_t_13;

      /* "src/helpers/helpers.pyx":423
 *             continue
 *         for k in range(trehalose.shape[0]):
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2             # <<<<<<<<<<<<<<
 *             if k>=1:
 *                 if squared_r_tre[k]<rtre**2:
 */
      __pyx_t_21 = __pyx_v_k;
      if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_trehalose.shape[0];
      __pyx_t_22 = (*((int *) ( /* dim=0 */ (__pyx_v_trehalose.data + __pyx_t_21 * __pyx_v_trehalose.strides[0]) )));
      __pyx_t_20 = 0;
      if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_coor.shape[0];
      if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
      __pyx_t_4 = __pyx_v_j;
      __pyx_t_25 = 0;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coms.shape[0];
      if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_coms.shape[1];
      __pyx_t_26 = __pyx_v_k;
      if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_trehalose.shape[0];
      __pyx_t_27 = (*((int *) ( /* dim=0 */ (__pyx_v_trehalose.data + __pyx_t_26 * __pyx_v_trehalose.strides[0]) )));
      __pyx_t_28 = 1;
      if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coor.shape[0];
      if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_coor.shape[1];
      __pyx_t_29 = __pyx_v_j;
      __pyx_t_30 = 1;
      if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_coms.shape[0];
      if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_v_coms.shape[1];
      __pyx_t_31 = __pyx_v_k;
      if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_v_trehalose.shape[0];
      __pyx_t_32 = (*((int *) ( /* dim=0 */ (__pyx_v_trehalose.data + __pyx_t_31 * __pyx_v_trehalose.strides[0]) )));
      __pyx_t_33 = 2;
      if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_v_coor.shape[0];
      if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_coor.shape[1];
      __pyx_t_34 = __pyx_v_j;
      __pyx_t_35 = 2;
      if (__pyx_t_34 < 0) __pyx_t_34 += __pyx_v_coms.shape[0];
      if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_v_coms.shape[1];
      __pyx_t_36 = __pyx_v_k;
      if (__pyx_t_36 < 0) __pyx_t_36 += __pyx_v_squared_r_tre.shape[0];
      *((double *) ( /* dim=0 */ (__pyx_v_squared_r_tre.data + __pyx_t_36 * __pyx_v_squared_r_tre.strides[0]) )) = ((pow(((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_22 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_4 * __pyx_v_coms.strides[0]) ) + __pyx_t_25 * __pyx_v_coms.strides[1]) )))), 2.0) + pow(((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_27 * __pyx_v_coor.strides[0]) ) + __pyx_t_28 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_29 * __pyx_v_coms.strides[0]) ) + __pyx_t_30 * __pyx_v_coms.strides[1]) )))), 2.0)) + pow(((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_32 * __pyx_v_coor.strides[0]) ) + __pyx_t_33 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_34 * __pyx_v_coms.strides[0]) ) + __pyx_t_35 * __pyx_v_coms.strides[1]) )))), 2.0));

      /* "src/helpers/helpers.pyx":424
 *         for k in range(trehalose.shape[0]):
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 *             if k>=1:             # <<<<<<<<<<<<<<
 *                 if squared_r_tre[k]<rtre**2:
 *                     rtre=sqrt(squared_r_tre[k])
 */
      __pyx_t_16 = ((__pyx_v_k >= 1) != 0);
      if (__pyx_t_16) {

        /* "src/helpers/helpers.pyx":425
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 *             if k>=1:
 *                 if squared_r_tre[k]<rtre**2:             # <<<<<<<<<<<<<<
 *                     rtre=sqrt(squared_r_tre[k])
 *             else:
 */
        __pyx_t_35 = __pyx_v_k;
        if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_v_squared_r_tre.shape[0];
        __pyx_t_16 = (((*((double *) ( /* dim=0 */ (__pyx_v_squared_r_tre.data + __pyx_t_35 * __pyx_v_squared_r_tre.strides[0]) ))) < pow(__pyx_v_rtre, 2.0)) != 0);
        if (__pyx_t_16) {

          /* "src/helpers/helpers.pyx":426
 *             if k>=1:
 *                 if squared_r_tre[k]<rtre**2:
 *                     rtre=sqrt(squared_r_tre[k])             # <<<<<<<<<<<<<<
 *             else:
 *                 rtre=sqrt(squared_r_tre[k])
 */
          __pyx_t_35 = __pyx_v_k;
          if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_v_squared_r_tre.shape[0];
          __pyx_v_rtre = sqrt((*((double *) ( /* dim=0 */ (__pyx_v_squared_r_tre.data + __pyx_t_35 * __pyx_v_squared_r_tre.strides[0]) ))));

          /* "src/helpers/helpers.pyx":425
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 *             if k>=1:
 *                 if squared_r_tre[k]<rtre**2:             # <<<<<<<<<<<<<<
 *                     rtre=sqrt(squared_r_tre[k])
 *             else:
 */
        }

        /* "src/helpers/helpers.pyx":424
 *         for k in range(trehalose.shape[0]):
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 *             if k>=1:             # <<<<<<<<<<<<<<
 *                 if squared_r_tre[k]<rtre**2:
 *                     rtre=sqrt(squared_r_tre[k])
 */
        goto __pyx_L15;
      }

      /* "src/helpers/helpers.pyx":428
 *                     rtre=sqrt(squared_r_tre[k])
 *             else:
 *                 rtre=sqrt(squared_r_tre[k])             # <<<<<<<<<<<<<<
 *         for k in range(oxyquinol.shape[0]):
 *             squared_r_oxy[k]=(coor[oxyquinol[k],0]-coms[j,0])**2+(coor[oxyquinol[k],1]-coms[j,1])**2+(coor[oxyquinol[k],2]-coms[j,2])**2
 */
      /*else*/ {
        __pyx_t_35 = __pyx_v_k;
        if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_v_squared_r_tre.shape[0];
        __pyx_v_rtre = sqrt((*((double *) ( /* dim=0 */ (__pyx_v_squared_r_tre.data + __pyx_t_35 * __pyx_v_squared_r_tre.strides[0]) ))));
      }
      __pyx_L15:;
    }

    /* "src/helpers/helpers.pyx":429
 *             else:
 *                 rtre=sqrt(squared_r_tre[k])
 *         for k in range(oxyquinol.shape[0]):             # <<<<<<<<<<<<<<
 *             squared_r_oxy[k]=(coor[oxyquinol[k],0]-coms[j,0])**2+(coor[oxyquinol[k],1]-coms[j,1])**2+(coor[oxyquinol[k],2]-coms[j,2])**2
 *             if k>=1:
 */
    __pyx_t_23 = (__pyx_v_oxyquinol.shape[0]);
    __pyx_t_24 = __pyx_t_23;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_24; __pyx_t_13+=1) {
      __pyx_v_k = __pyx_t_13;

      /* "src/helpers/helpers.pyx":430
 *                 rtre=sqrt(squared_r_tre[k])
 *         for k in range(oxyquinol.shape[0]):
 *             squared_r_oxy[k]=(coor[oxyquinol[k],0]-coms[j,0])**2+(coor[oxyquinol[k],1]-coms[j,1])**2+(coor[oxyquinol[k],2]-coms[j,2])**2             # <<<<<<<<<<<<<<
 *             if k>=1:
 *                 if squared_r_oxy[k]<roxy**2:
 */
      __pyx_t_35 = __pyx_v_k;
      if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_v_oxyquinol.shape[0];
      __pyx_t_34 = (*((int *) ( /* dim=0 */ (__pyx_v_oxyquinol.data + __pyx_t_35 * __pyx_v_oxyquinol.strides[0]) )));
      __pyx_t_31 = 0;
      if (__pyx_t_34 < 0) __pyx_t_34 += __pyx_v_coor.shape[0];
      if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_v_coor.shape[1];
      __pyx_t_33 = __pyx_v_j;
      __pyx_t_32 = 0;
      if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_coms.shape[0];
      if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_v_coms.shape[1];
      __pyx_t_30 = __pyx_v_k;
      if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_v_oxyquinol.shape[0];
      __pyx_t_29 = (*((int *) ( /* dim=0 */ (__pyx_v_oxyquinol.data + __pyx_t_30 * __pyx_v_oxyquinol.strides[0]) )));
      __pyx_t_26 = 1;
      if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_coor.shape[0];
      if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[1];
      __pyx_t_28 = __pyx_v_j;
      __pyx_t_27 = 1;
      if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_coms.shape[0];
      if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coms.shape[1];
      __pyx_t_25 = __pyx_v_k;
      if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_oxyquinol.shape[0];
      __pyx_t_4 = (*((int *) ( /* dim=0 */ (__pyx_v_oxyquinol.data + __pyx_t_25 * __pyx_v_oxyquinol.strides[0]) )));
      __pyx_t_21 = 2;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
      if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_coor.shape[1];
      __pyx_t_20 = __pyx_v_j;
      __pyx_t_22 = 2;
      if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coms.shape[0];
      if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_coms.shape[1];
      __pyx_t_36 = __pyx_v_k;
      if (__pyx_t_36 < 0) __pyx_t_36 += __pyx_v_squared_r_oxy.shape[0];
      *((double *) ( /* dim=0 */ (__pyx_v_squared_r_oxy.data + __pyx_t_36 * __pyx_v_squared_r_oxy.strides[0]) )) = ((pow(((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_34 * __pyx_v_coor.strides[0]) ) + __pyx_t_31 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_33 * __pyx_v_coms.strides[0]) ) + __pyx_t_32 * __pyx_v_coms.strides[1]) )))), 2.0) + pow(((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_29 * __pyx_v_coor.strides[0]) ) + __pyx_t_26 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_28 * __pyx_v_coms.strides[0]) ) + __pyx_t_27 * __pyx_v_coms.strides[1]) )))), 2.0)) + pow(((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_21 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_20 * __pyx_v_coms.strides[0]) ) + __pyx_t_22 * __pyx_v_coms.strides[1]) )))), 2.0));

      /* "src/helpers/helpers.pyx":431
 *         for k in range(oxyquinol.shape[0]):
 *             squared_r_oxy[k]=(coor[oxyquinol[k],0]-coms[j,0])**2+(coor[oxyquinol[k],1]-coms[j,1])**2+(coor[oxyquinol[k],2]-coms[j,2])**2
 *             if k>=1:             # <<<<<<<<<<<<<<
 *                 if squared_r_oxy[k]<roxy**2:
 *                     roxy=sqrt(squared_r_oxy[k])
 */
      __pyx_t_16 = ((__pyx_v_k >= 1) != 0);
      if (__pyx_t_16) {

        /* "src/helpers/helpers.pyx":432
 *             squared_r_oxy[k]=(coor[oxyquinol[k],0]-coms[j,0])**2+(coor[oxyquinol[k],1]-coms[j,1])**2+(coor[oxyquinol[k],2]-coms[j,2])**2
 *             if k>=1:
 *                 if squared_r_oxy[k]<roxy**2:             # <<<<<<<<<<<<<<
 *                     roxy=sqrt(squared_r_oxy[k])
 *             else:
 */
        __pyx_t_22 = __pyx_v_k;
        if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_squared_r_oxy.shape[0];
        __pyx_t_16 = (((*((double *) ( /* dim=0 */ (__pyx_v_squared_r_oxy.data + __pyx_t_22 * __pyx_v_squared_r_oxy.strides[0]) ))) < pow(__pyx_v_roxy, 2.0)) != 0);
        if (__pyx_t_16) {

          /* "src/helpers/helpers.pyx":433
 *             if k>=1:
 *                 if squared_r_oxy[k]<roxy**2:
 *                     roxy=sqrt(squared_r_oxy[k])             # <<<<<<<<<<<<<<
 *             else:
 *                 roxy=sqrt(squared_r_oxy[k])
 */
          __pyx_t_22 = __pyx_v_k;
          if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_squared_r_oxy.shape[0];
          __pyx_v_roxy = sqrt((*((double *) ( /* dim=0 */ (__pyx_v_squared_r_oxy.data + __pyx_t_22 * __pyx_v_squared_r_oxy.strides[0]) ))));

          /* "src/helpers/helpers.pyx":432
 *             squared_r_oxy[k]=(coor[oxyquinol[k],0]-coms[j,0])**2+(coor[oxyquinol[k],1]-coms[j,1])**2+(coor[oxyquinol[k],2]-coms[j,2])**2
 *             if k>=1:
 *                 if squared_r_oxy[k]<roxy**2:             # <<<<<<<<<<<<<<
 *                     roxy=sqrt(squared_r_oxy[k])
 *             else:
 */
        }

        /* "src/helpers/helpers.pyx":431
 *         for k in range(oxyquinol.shape[0]):
 *             squared_r_oxy[k]=(coor[oxyquinol[k],0]-coms[j,0])**2+(coor[oxyquinol[k],1]-coms[j,1])**2+(coor[oxyquinol[k],2]-coms[j,2])**2
 *             if k>=1:             # <<<<<<<<<<<<<<
 *                 if squared_r_oxy[k]<roxy**2:
 *                     roxy=sqrt(squared_r_oxy[k])
 */
        goto __pyx_L19;
      }

      /* "src/helpers/helpers.pyx":435
 *                     roxy=sqrt(squared_r_oxy[k])
 *             else:
 *                 roxy=sqrt(squared_r_oxy[k])             # <<<<<<<<<<<<<<
 * 
 *         if rtre < histo_min or roxy < histo_min:
 */
      /*else*/ {
        __pyx_t_22 = __pyx_v_k;
        if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_squared_r_oxy.shape[0];
        __pyx_v_roxy = sqrt((*((double *) ( /* dim=0 */ (__pyx_v_squared_r_oxy.data + __pyx_t_22 * __pyx_v_squared_r_oxy.strides[0]) ))));
      }
      __pyx_L19:;
    }

    /* "src/helpers/helpers.pyx":437
 *                 roxy=sqrt(squared_r_oxy[k])
 * 
 *         if rtre < histo_min or roxy < histo_min:             # <<<<<<<<<<<<<<
 *             histo_error=1
 *         elif rtre >= histo_max or roxy>=histo_max:
 */
    __pyx_t_37 = ((__pyx_v_rtre < __pyx_v_histo_min) != 0);
    if (!__pyx_t_37) {
    } else {
      __pyx_t_16 = __pyx_t_37;
      goto __pyx_L22_bool_binop_done;
    }
    __pyx_t_37 = ((__pyx_v_roxy < __pyx_v_histo_min) != 0);
    __pyx_t_16 = __pyx_t_37;
    __pyx_L22_bool_binop_done:;
    if (__pyx_t_16) {

      /* "src/helpers/helpers.pyx":438
 * 
 *         if rtre < histo_min or roxy < histo_min:
 *             histo_error=1             # <<<<<<<<<<<<<<
 *         elif rtre >= histo_max or roxy>=histo_max:
 *             histo_error=2
 */
      __pyx_v_histo_error = 1;

      /* "src/helpers/helpers.pyx":437
 *                 roxy=sqrt(squared_r_oxy[k])
 * 
 *         if rtre < histo_min or roxy < histo_min:             # <<<<<<<<<<<<<<
 *             histo_error=1
 *         elif rtre >= histo_max or roxy>=histo_max:
 */
      goto __pyx_L21;
    }

    /* "src/helpers/helpers.pyx":439
 *         if rtre < histo_min or roxy < histo_min:
 *             histo_error=1
 *         elif rtre >= histo_max or roxy>=histo_max:             # <<<<<<<<<<<<<<
 *             histo_error=2
 *         else:
 */
    __pyx_t_37 = ((__pyx_v_rtre >= __pyx_v_histo_max) != 0);
    if (!__pyx_t_37) {
    } else {
      __pyx_t_16 = __pyx_t_37;
      goto __pyx_L24_bool_binop_done;
    }
    __pyx_t_37 = ((__pyx_v_roxy >= __pyx_v_histo_max) != 0);
    __pyx_t_16 = __pyx_t_37;
    __pyx_L24_bool_binop_done:;
    if (__pyx_t_16) {

      /* "src/helpers/helpers.pyx":440
 *             histo_error=1
 *         elif rtre >= histo_max or roxy>=histo_max:
 *             histo_error=2             # <<<<<<<<<<<<<<
 *         else:
 *             histo[int((rtre-histo_min)/histo_width),int((roxy-histo_min)/histo_width)]+=store[j]
 */
      __pyx_v_histo_error = 2;

      /* "src/helpers/helpers.pyx":439
 *         if rtre < histo_min or roxy < histo_min:
 *             histo_error=1
 *         elif rtre >= histo_max or roxy>=histo_max:             # <<<<<<<<<<<<<<
 *             histo_error=2
 *         else:
 */
      goto __pyx_L21;
    }

    /* "src/helpers/helpers.pyx":442
 *             histo_error=2
 *         else:
 *             histo[int((rtre-histo_min)/histo_width),int((roxy-histo_min)/histo_width)]+=store[j]             # <<<<<<<<<<<<<<
 *             count[int((rtre-histo_min)/histo_width),int((roxy-histo_min)/histo_width)]+=1
 * 
 */
    /*else*/ {
      __pyx_t_22 = __pyx_v_j;
      if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_store.shape[0];
      __pyx_t_9 = (__pyx_v_rtre - __pyx_v_histo_min);
      if (unlikely(__pyx_v_histo_width == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 442, __pyx_L1_error)
      }
      __pyx_t_38 = (__pyx_v_roxy - __pyx_v_histo_min);
      if (unlikely(__pyx_v_histo_width == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 442, __pyx_L1_error)
      }
      __pyx_t_20 = ((Py_ssize_t)(__pyx_t_9 / __pyx_v_histo_width));
      __pyx_t_25 = ((Py_ssize_t)(__pyx_t_38 / __pyx_v_histo_width));
      if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_histo.shape[0];
      if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_histo.shape[1];
      *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_histo.data + __pyx_t_20 * __pyx_v_histo.strides[0]) ) + __pyx_t_25 * __pyx_v_histo.strides[1]) )) += (*((double *) ( /* dim=0 */ (__pyx_v_store.data + __pyx_t_22 * __pyx_v_store.strides[0]) )));

      /* "src/helpers/helpers.pyx":443
 *         else:
 *             histo[int((rtre-histo_min)/histo_width),int((roxy-histo_min)/histo_width)]+=store[j]
 *             count[int((rtre-histo_min)/histo_width),int((roxy-histo_min)/histo_width)]+=1             # <<<<<<<<<<<<<<
 * 
 *     for i in range(apr[isolute]):
 */
      __pyx_t_38 = (__pyx_v_rtre - __pyx_v_histo_min);
      if (unlikely(__pyx_v_histo_width == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 443, __pyx_L1_error)
      }
      __pyx_t_9 = (__pyx_v_roxy - __pyx_v_histo_min);
      if (unlikely(__pyx_v_histo_width == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 443, __pyx_L1_error)
      }
      __pyx_t_22 = ((Py_ssize_t)(__pyx_t_38 / __pyx_v_histo_width));
      __pyx_t_25 = ((Py_ssize_t)(__pyx_t_9 / __pyx_v_histo_width));
      if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_count.shape[0];
      if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_count.shape[1];
      *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_count.data + __pyx_t_22 * __pyx_v_count.strides[0]) ) + __pyx_t_25 * __pyx_v_count.strides[1]) )) += 1.0;
    }
    __pyx_L21:;
    __pyx_L10_continue:;
  }

  /* "src/helpers/helpers.pyx":445
 *             count[int((rtre-histo_min)/histo_width),int((roxy-histo_min)/histo_width)]+=1
 * 
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         energy += epa[i]
 * 
 */
  __pyx_t_25 = __pyx_v_isolute;
  if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_apr.shape[0];
  __pyx_t_10 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_25 * __pyx_v_apr.strides[0]) )));
  __pyx_t_11 = __pyx_t_10;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "src/helpers/helpers.pyx":446
 * 
 *     for i in range(apr[isolute]):
 *         energy += epa[i]             # <<<<<<<<<<<<<<
 * 
 *     return energy * 1390.02, np.asarray(histo)[:,:] * 1390.02 , histo_error, np.asarray(count)[:,:]
 */
    __pyx_t_25 = __pyx_v_i;
    if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_epa.shape[0];
    __pyx_t_1 = PyFloat_FromDouble((*((double *) ( /* dim=0 */ (__pyx_v_epa.data + __pyx_t_25 * __pyx_v_epa.strides[0]) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_energy, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_energy, __pyx_t_3);
    __pyx_t_3 = 0;
  }

  /* "src/helpers/helpers.pyx":448
 *         energy += epa[i]
 * 
 *     return energy * 1390.02, np.asarray(histo)[:,:] * 1390.02 , histo_error, np.asarray(count)[:,:]             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_energy, __pyx_float_1390_02); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_histo, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_tuple__3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_5, __pyx_float_1390_02); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_histo_error); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_39 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_count, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_40 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_39))) {
    __pyx_t_40 = PyMethod_GET_SELF(__pyx_t_39);
    if (likely(__pyx_t_40)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_39);
      __Pyx_INCREF(__pyx_t_40);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_39, function);
    }
  }
  __pyx_t_7 = (__pyx_t_40) ? __Pyx_PyObject_Call2Args(__pyx_t_39, __pyx_t_40, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_39, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_40); __pyx_t_40 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
  __pyx_t_39 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_tuple__3); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_39);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_39);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_39 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":376
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAAhisto(double [:,:] coor,  double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double histo_min, double histo_max, int histo_bins, int[:] trehalose, int[:] oxyquinol):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAAhisto(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, min_histo, max_histo, bins_hist,array indices, array indices 2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_XDECREF(__pyx_t_39);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAAhisto", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_epa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_histo, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_count, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_store, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_squared_r_tre, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_squared_r_oxy, 1);
  __Pyx_XDECREF(__pyx_v_energy);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coms, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_trehalose, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_oxyquinol, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":451
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAAhisto1(double [:,:] coor,  double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double histo_min, double histo_max, int histo_bins, int[:] trehalose):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAAhisto(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, min_histo, max_histo, bins_hist,array indices)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_27calcEnergyAAhisto1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_26calcEnergyAAhisto1[] = "\n    energy = calcEnergyAAhisto(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, min_histo, max_histo, bins_hist,array indices)\n\n    Calculates the solvation energy of a solute in any solvent for a specific coordinate set.\n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_27calcEnergyAAhisto1 = {"calcEnergyAAhisto1", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_27calcEnergyAAhisto1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_26calcEnergyAAhisto1};
static PyObject *__pyx_pw_11newanalysis_7helpers_27calcEnergyAAhisto1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coms = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_isolute;
  int __pyx_v_nmol;
  double __pyx_v_histo_min;
  double __pyx_v_histo_max;
  int __pyx_v_histo_bins;
  __Pyx_memviewslice __pyx_v_trehalose = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEnergyAAhisto1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_coms,&__pyx_n_s_charges,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_isolute,&__pyx_n_s_nmol,&__pyx_n_s_histo_min,&__pyx_n_s_histo_max,&__pyx_n_s_histo_bins,&__pyx_n_s_trehalose,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, 1); __PYX_ERR(0, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, 2); __PYX_ERR(0, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, 3); __PYX_ERR(0, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, 4); __PYX_ERR(0, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, 5); __PYX_ERR(0, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nmol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, 6); __PYX_ERR(0, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_histo_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, 7); __PYX_ERR(0, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_histo_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, 8); __PYX_ERR(0, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_histo_bins)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, 9); __PYX_ERR(0, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trehalose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, 10); __PYX_ERR(0, 451, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEnergyAAhisto1") < 0)) __PYX_ERR(0, 451, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 451, __pyx_L3_error)
    __pyx_v_coms = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coms.memview)) __PYX_ERR(0, 451, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 451, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 451, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 451, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L3_error)
    __pyx_v_nmol = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_nmol == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L3_error)
    __pyx_v_histo_min = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_histo_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L3_error)
    __pyx_v_histo_max = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_histo_max == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L3_error)
    __pyx_v_histo_bins = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_histo_bins == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L3_error)
    __pyx_v_trehalose = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[10], PyBUF_WRITABLE); if (unlikely(!__pyx_v_trehalose.memview)) __PYX_ERR(0, 451, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEnergyAAhisto1", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 451, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAAhisto1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_26calcEnergyAAhisto1(__pyx_self, __pyx_v_coor, __pyx_v_coms, __pyx_v_charges, __pyx_v_apr, __pyx_v_rfa, __pyx_v_isolute, __pyx_v_nmol, __pyx_v_histo_min, __pyx_v_histo_max, __pyx_v_histo_bins, __pyx_v_trehalose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_26calcEnergyAAhisto1(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_coms, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, double __pyx_v_histo_min, double __pyx_v_histo_max, int __pyx_v_histo_bins, __Pyx_memviewslice __pyx_v_trehalose) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_idx;
  int __pyx_v_idx2;
  int __pyx_v_histo_error;
  __Pyx_memviewslice __pyx_v_epa = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_histo = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_count = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_store = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_r;
  double __pyx_v_rtre;
  double __pyx_v_tmp;
  double __pyx_v_tmp_ener;
  double __pyx_v_histo_width;
  __Pyx_memviewslice __pyx_v_squared_r_tre = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_energy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  PyObject *__pyx_t_35 = NULL;
  PyObject *__pyx_t_36 = NULL;
  PyObject *__pyx_t_37 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcEnergyAAhisto1", 0);

  /* "src/helpers/helpers.pyx":459
 *     """
 *     cdef int i, j, k, idx, idx2, histo_error
 *     cdef double [:] epa = np.zeros(apr[isolute])             # <<<<<<<<<<<<<<
 *     cdef double [:] histo=np.zeros((histo_bins))
 *     cdef double [:] count=np.zeros((histo_bins))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_2 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_epa = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":460
 *     cdef int i, j, k, idx, idx2, histo_error
 *     cdef double [:] epa = np.zeros(apr[isolute])
 *     cdef double [:] histo=np.zeros((histo_bins))             # <<<<<<<<<<<<<<
 *     cdef double [:] count=np.zeros((histo_bins))
 *     cdef double [:] store=np.zeros(nmol)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_histo_bins); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_histo = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":461
 *     cdef double [:] epa = np.zeros(apr[isolute])
 *     cdef double [:] histo=np.zeros((histo_bins))
 *     cdef double [:] count=np.zeros((histo_bins))             # <<<<<<<<<<<<<<
 *     cdef double [:] store=np.zeros(nmol)
 *     cdef double dx, dy, dz, r, rtre, tmp, tmp_ener, histo_width
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_histo_bins); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_count = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":462
 *     cdef double [:] histo=np.zeros((histo_bins))
 *     cdef double [:] count=np.zeros((histo_bins))
 *     cdef double [:] store=np.zeros(nmol)             # <<<<<<<<<<<<<<
 *     cdef double dx, dy, dz, r, rtre, tmp, tmp_ener, histo_width
 *     cdef double [:] squared_r_tre = np.zeros(trehalose.shape[0])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_nmol); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_store = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":464
 *     cdef double [:] store=np.zeros(nmol)
 *     cdef double dx, dy, dz, r, rtre, tmp, tmp_ener, histo_width
 *     cdef double [:] squared_r_tre = np.zeros(trehalose.shape[0])             # <<<<<<<<<<<<<<
 * 
 *     energy = 0.0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_trehalose.shape[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_squared_r_tre = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":466
 *     cdef double [:] squared_r_tre = np.zeros(trehalose.shape[0])
 * 
 *     energy = 0.0             # <<<<<<<<<<<<<<
 *     histo_error=0
 *     histo_width=(histo_max-histo_min)/histo_bins
 */
  __Pyx_INCREF(__pyx_float_0_0);
  __pyx_v_energy = __pyx_float_0_0;

  /* "src/helpers/helpers.pyx":467
 * 
 *     energy = 0.0
 *     histo_error=0             # <<<<<<<<<<<<<<
 *     histo_width=(histo_max-histo_min)/histo_bins
 * 
 */
  __pyx_v_histo_error = 0;

  /* "src/helpers/helpers.pyx":468
 *     energy = 0.0
 *     histo_error=0
 *     histo_width=(histo_max-histo_min)/histo_bins             # <<<<<<<<<<<<<<
 * 
 *     # loop over solute atoms
 */
  __pyx_t_7 = (__pyx_v_histo_max - __pyx_v_histo_min);
  if (unlikely(__pyx_v_histo_bins == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 468, __pyx_L1_error)
  }
  __pyx_v_histo_width = (__pyx_t_7 / __pyx_v_histo_bins);

  /* "src/helpers/helpers.pyx":472
 *     # loop over solute atoms
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 */
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_8 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "src/helpers/helpers.pyx":473
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):
 *         idx = rfa[isolute] + i             # <<<<<<<<<<<<<<
 *         # loop over solvent molecules
 * 
 */
    __pyx_t_4 = __pyx_v_isolute;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
    __pyx_v_idx = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_i);

    /* "src/helpers/helpers.pyx":476
 *         # loop over solvent molecules
 * 
 *         for j in range(nmol):             # <<<<<<<<<<<<<<
 *             if j == isolute:
 *                 continue
 */
    __pyx_t_11 = __pyx_v_nmol;
    __pyx_t_12 = __pyx_t_11;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_j = __pyx_t_13;

      /* "src/helpers/helpers.pyx":477
 * 
 *         for j in range(nmol):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             tmp_ener=0.0
 */
      __pyx_t_14 = ((__pyx_v_j == __pyx_v_isolute) != 0);
      if (__pyx_t_14) {

        /* "src/helpers/helpers.pyx":478
 *         for j in range(nmol):
 *             if j == isolute:
 *                 continue             # <<<<<<<<<<<<<<
 *             tmp_ener=0.0
 *             for k in range(apr[j]):
 */
        goto __pyx_L5_continue;

        /* "src/helpers/helpers.pyx":477
 * 
 *         for j in range(nmol):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             tmp_ener=0.0
 */
      }

      /* "src/helpers/helpers.pyx":479
 *             if j == isolute:
 *                 continue
 *             tmp_ener=0.0             # <<<<<<<<<<<<<<
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 */
      __pyx_v_tmp_ener = 0.0;

      /* "src/helpers/helpers.pyx":480
 *                 continue
 *             tmp_ener=0.0
 *             for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 */
      __pyx_t_4 = __pyx_v_j;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
      __pyx_t_15 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
      __pyx_t_16 = __pyx_t_15;
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "src/helpers/helpers.pyx":481
 *             tmp_ener=0.0
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k             # <<<<<<<<<<<<<<
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 */
        __pyx_t_4 = __pyx_v_j;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
        __pyx_v_idx2 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_k);

        /* "src/helpers/helpers.pyx":482
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]             # <<<<<<<<<<<<<<
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_18 = 0;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_19 = __pyx_v_idx2;
        __pyx_t_20 = 0;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_v_dx = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":483
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]             # <<<<<<<<<<<<<<
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 */
        __pyx_t_20 = __pyx_v_idx;
        __pyx_t_19 = 1;
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[0];
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[1];
        __pyx_t_18 = __pyx_v_idx2;
        __pyx_t_4 = 1;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[0];
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[1];
        __pyx_v_dy = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_20 * __pyx_v_coor.strides[0]) ) + __pyx_t_19 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_18 * __pyx_v_coor.strides[0]) ) + __pyx_t_4 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":484
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]             # <<<<<<<<<<<<<<
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 tmp=charges[idx] * charges[idx2] / r
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_18 = 2;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_19 = __pyx_v_idx2;
        __pyx_t_20 = 2;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_v_dz = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":485
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)             # <<<<<<<<<<<<<<
 *                 tmp=charges[idx] * charges[idx2] / r
 *                 tmp_ener+=tmp
 */
        __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

        /* "src/helpers/helpers.pyx":486
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 tmp=charges[idx] * charges[idx2] / r             # <<<<<<<<<<<<<<
 *                 tmp_ener+=tmp
 *                 epa[i] += tmp
 */
        __pyx_t_20 = __pyx_v_idx;
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_charges.shape[0];
        __pyx_t_19 = __pyx_v_idx2;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_charges.shape[0];
        __pyx_t_7 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_20 * __pyx_v_charges.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_19 * __pyx_v_charges.strides[0]) ))));
        if (unlikely(__pyx_v_r == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 486, __pyx_L1_error)
        }
        __pyx_v_tmp = (__pyx_t_7 / __pyx_v_r);

        /* "src/helpers/helpers.pyx":487
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 tmp=charges[idx] * charges[idx2] / r
 *                 tmp_ener+=tmp             # <<<<<<<<<<<<<<
 *                 epa[i] += tmp
 * 
 */
        __pyx_v_tmp_ener = (__pyx_v_tmp_ener + __pyx_v_tmp);

        /* "src/helpers/helpers.pyx":488
 *                 tmp=charges[idx] * charges[idx2] / r
 *                 tmp_ener+=tmp
 *                 epa[i] += tmp             # <<<<<<<<<<<<<<
 * 
 *             store[j]+=tmp_ener
 */
        __pyx_t_19 = __pyx_v_i;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_epa.shape[0];
        *((double *) ( /* dim=0 */ (__pyx_v_epa.data + __pyx_t_19 * __pyx_v_epa.strides[0]) )) += __pyx_v_tmp;
      }

      /* "src/helpers/helpers.pyx":490
 *                 epa[i] += tmp
 * 
 *             store[j]+=tmp_ener             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_19 = __pyx_v_j;
      if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_store.shape[0];
      *((double *) ( /* dim=0 */ (__pyx_v_store.data + __pyx_t_19 * __pyx_v_store.strides[0]) )) += __pyx_v_tmp_ener;
      __pyx_L5_continue:;
    }
  }

  /* "src/helpers/helpers.pyx":493
 * 
 * 
 *     for j in range(nmol):             # <<<<<<<<<<<<<<
 *         if j==isolute:
 *             continue
 */
  __pyx_t_8 = __pyx_v_nmol;
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_j = __pyx_t_10;

    /* "src/helpers/helpers.pyx":494
 * 
 *     for j in range(nmol):
 *         if j==isolute:             # <<<<<<<<<<<<<<
 *             continue
 *         for k in range(trehalose.shape[0]):
 */
    __pyx_t_14 = ((__pyx_v_j == __pyx_v_isolute) != 0);
    if (__pyx_t_14) {

      /* "src/helpers/helpers.pyx":495
 *     for j in range(nmol):
 *         if j==isolute:
 *             continue             # <<<<<<<<<<<<<<
 *         for k in range(trehalose.shape[0]):
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 */
      goto __pyx_L10_continue;

      /* "src/helpers/helpers.pyx":494
 * 
 *     for j in range(nmol):
 *         if j==isolute:             # <<<<<<<<<<<<<<
 *             continue
 *         for k in range(trehalose.shape[0]):
 */
    }

    /* "src/helpers/helpers.pyx":496
 *         if j==isolute:
 *             continue
 *         for k in range(trehalose.shape[0]):             # <<<<<<<<<<<<<<
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 *             if k>=1:
 */
    __pyx_t_21 = (__pyx_v_trehalose.shape[0]);
    __pyx_t_22 = __pyx_t_21;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_22; __pyx_t_11+=1) {
      __pyx_v_k = __pyx_t_11;

      /* "src/helpers/helpers.pyx":497
 *             continue
 *         for k in range(trehalose.shape[0]):
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2             # <<<<<<<<<<<<<<
 *             if k>=1:
 *                 if squared_r_tre[k]<rtre**2:
 */
      __pyx_t_19 = __pyx_v_k;
      if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_trehalose.shape[0];
      __pyx_t_20 = (*((int *) ( /* dim=0 */ (__pyx_v_trehalose.data + __pyx_t_19 * __pyx_v_trehalose.strides[0]) )));
      __pyx_t_18 = 0;
      if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[0];
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
      __pyx_t_4 = __pyx_v_j;
      __pyx_t_23 = 0;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coms.shape[0];
      if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_coms.shape[1];
      __pyx_t_24 = __pyx_v_k;
      if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_trehalose.shape[0];
      __pyx_t_25 = (*((int *) ( /* dim=0 */ (__pyx_v_trehalose.data + __pyx_t_24 * __pyx_v_trehalose.strides[0]) )));
      __pyx_t_26 = 1;
      if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_coor.shape[0];
      if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coor.shape[1];
      __pyx_t_27 = __pyx_v_j;
      __pyx_t_28 = 1;
      if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coms.shape[0];
      if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_coms.shape[1];
      __pyx_t_29 = __pyx_v_k;
      if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_trehalose.shape[0];
      __pyx_t_30 = (*((int *) ( /* dim=0 */ (__pyx_v_trehalose.data + __pyx_t_29 * __pyx_v_trehalose.strides[0]) )));
      __pyx_t_31 = 2;
      if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_v_coor.shape[0];
      if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_v_coor.shape[1];
      __pyx_t_32 = __pyx_v_j;
      __pyx_t_33 = 2;
      if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_v_coms.shape[0];
      if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_coms.shape[1];
      __pyx_t_34 = __pyx_v_k;
      if (__pyx_t_34 < 0) __pyx_t_34 += __pyx_v_squared_r_tre.shape[0];
      *((double *) ( /* dim=0 */ (__pyx_v_squared_r_tre.data + __pyx_t_34 * __pyx_v_squared_r_tre.strides[0]) )) = ((pow(((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_20 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_4 * __pyx_v_coms.strides[0]) ) + __pyx_t_23 * __pyx_v_coms.strides[1]) )))), 2.0) + pow(((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_25 * __pyx_v_coor.strides[0]) ) + __pyx_t_26 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_27 * __pyx_v_coms.strides[0]) ) + __pyx_t_28 * __pyx_v_coms.strides[1]) )))), 2.0)) + pow(((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_30 * __pyx_v_coor.strides[0]) ) + __pyx_t_31 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_32 * __pyx_v_coms.strides[0]) ) + __pyx_t_33 * __pyx_v_coms.strides[1]) )))), 2.0));

      /* "src/helpers/helpers.pyx":498
 *         for k in range(trehalose.shape[0]):
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 *             if k>=1:             # <<<<<<<<<<<<<<
 *                 if squared_r_tre[k]<rtre**2:
 *                     rtre=sqrt(squared_r_tre[k])
 */
      __pyx_t_14 = ((__pyx_v_k >= 1) != 0);
      if (__pyx_t_14) {

        /* "src/helpers/helpers.pyx":499
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 *             if k>=1:
 *                 if squared_r_tre[k]<rtre**2:             # <<<<<<<<<<<<<<
 *                     rtre=sqrt(squared_r_tre[k])
 *             else:
 */
        __pyx_t_33 = __pyx_v_k;
        if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_squared_r_tre.shape[0];
        __pyx_t_14 = (((*((double *) ( /* dim=0 */ (__pyx_v_squared_r_tre.data + __pyx_t_33 * __pyx_v_squared_r_tre.strides[0]) ))) < pow(__pyx_v_rtre, 2.0)) != 0);
        if (__pyx_t_14) {

          /* "src/helpers/helpers.pyx":500
 *             if k>=1:
 *                 if squared_r_tre[k]<rtre**2:
 *                     rtre=sqrt(squared_r_tre[k])             # <<<<<<<<<<<<<<
 *             else:
 *                 rtre=sqrt(squared_r_tre[k])
 */
          __pyx_t_33 = __pyx_v_k;
          if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_squared_r_tre.shape[0];
          __pyx_v_rtre = sqrt((*((double *) ( /* dim=0 */ (__pyx_v_squared_r_tre.data + __pyx_t_33 * __pyx_v_squared_r_tre.strides[0]) ))));

          /* "src/helpers/helpers.pyx":499
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 *             if k>=1:
 *                 if squared_r_tre[k]<rtre**2:             # <<<<<<<<<<<<<<
 *                     rtre=sqrt(squared_r_tre[k])
 *             else:
 */
        }

        /* "src/helpers/helpers.pyx":498
 *         for k in range(trehalose.shape[0]):
 *             squared_r_tre[k]=(coor[trehalose[k],0]-coms[j,0])**2+(coor[trehalose[k],1]-coms[j,1])**2+(coor[trehalose[k],2]-coms[j,2])**2
 *             if k>=1:             # <<<<<<<<<<<<<<
 *                 if squared_r_tre[k]<rtre**2:
 *                     rtre=sqrt(squared_r_tre[k])
 */
        goto __pyx_L15;
      }

      /* "src/helpers/helpers.pyx":502
 *                     rtre=sqrt(squared_r_tre[k])
 *             else:
 *                 rtre=sqrt(squared_r_tre[k])             # <<<<<<<<<<<<<<
 * 
 *         if rtre < histo_min:
 */
      /*else*/ {
        __pyx_t_33 = __pyx_v_k;
        if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_squared_r_tre.shape[0];
        __pyx_v_rtre = sqrt((*((double *) ( /* dim=0 */ (__pyx_v_squared_r_tre.data + __pyx_t_33 * __pyx_v_squared_r_tre.strides[0]) ))));
      }
      __pyx_L15:;
    }

    /* "src/helpers/helpers.pyx":504
 *                 rtre=sqrt(squared_r_tre[k])
 * 
 *         if rtre < histo_min:             # <<<<<<<<<<<<<<
 *             histo_error=1
 *         elif rtre >= histo_max:
 */
    __pyx_t_14 = ((__pyx_v_rtre < __pyx_v_histo_min) != 0);
    if (__pyx_t_14) {

      /* "src/helpers/helpers.pyx":505
 * 
 *         if rtre < histo_min:
 *             histo_error=1             # <<<<<<<<<<<<<<
 *         elif rtre >= histo_max:
 *             histo_error=2
 */
      __pyx_v_histo_error = 1;

      /* "src/helpers/helpers.pyx":504
 *                 rtre=sqrt(squared_r_tre[k])
 * 
 *         if rtre < histo_min:             # <<<<<<<<<<<<<<
 *             histo_error=1
 *         elif rtre >= histo_max:
 */
      goto __pyx_L17;
    }

    /* "src/helpers/helpers.pyx":506
 *         if rtre < histo_min:
 *             histo_error=1
 *         elif rtre >= histo_max:             # <<<<<<<<<<<<<<
 *             histo_error=2
 *         else:
 */
    __pyx_t_14 = ((__pyx_v_rtre >= __pyx_v_histo_max) != 0);
    if (__pyx_t_14) {

      /* "src/helpers/helpers.pyx":507
 *             histo_error=1
 *         elif rtre >= histo_max:
 *             histo_error=2             # <<<<<<<<<<<<<<
 *         else:
 *             histo[int((rtre-histo_min)/histo_width)]+=store[j]
 */
      __pyx_v_histo_error = 2;

      /* "src/helpers/helpers.pyx":506
 *         if rtre < histo_min:
 *             histo_error=1
 *         elif rtre >= histo_max:             # <<<<<<<<<<<<<<
 *             histo_error=2
 *         else:
 */
      goto __pyx_L17;
    }

    /* "src/helpers/helpers.pyx":509
 *             histo_error=2
 *         else:
 *             histo[int((rtre-histo_min)/histo_width)]+=store[j]             # <<<<<<<<<<<<<<
 *             count[int((rtre-histo_min)/histo_width)]+=1
 * 
 */
    /*else*/ {
      __pyx_t_33 = __pyx_v_j;
      if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_store.shape[0];
      __pyx_t_7 = (__pyx_v_rtre - __pyx_v_histo_min);
      if (unlikely(__pyx_v_histo_width == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 509, __pyx_L1_error)
      }
      __pyx_t_32 = ((Py_ssize_t)(__pyx_t_7 / __pyx_v_histo_width));
      if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_v_histo.shape[0];
      *((double *) ( /* dim=0 */ (__pyx_v_histo.data + __pyx_t_32 * __pyx_v_histo.strides[0]) )) += (*((double *) ( /* dim=0 */ (__pyx_v_store.data + __pyx_t_33 * __pyx_v_store.strides[0]) )));

      /* "src/helpers/helpers.pyx":510
 *         else:
 *             histo[int((rtre-histo_min)/histo_width)]+=store[j]
 *             count[int((rtre-histo_min)/histo_width)]+=1             # <<<<<<<<<<<<<<
 * 
 *     for i in range(apr[isolute]):
 */
      __pyx_t_7 = (__pyx_v_rtre - __pyx_v_histo_min);
      if (unlikely(__pyx_v_histo_width == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 510, __pyx_L1_error)
      }
      __pyx_t_33 = ((Py_ssize_t)(__pyx_t_7 / __pyx_v_histo_width));
      if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_count.shape[0];
      *((double *) ( /* dim=0 */ (__pyx_v_count.data + __pyx_t_33 * __pyx_v_count.strides[0]) )) += 1.0;
    }
    __pyx_L17:;
    __pyx_L10_continue:;
  }

  /* "src/helpers/helpers.pyx":512
 *             count[int((rtre-histo_min)/histo_width)]+=1
 * 
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         energy += epa[i]
 * 
 */
  __pyx_t_33 = __pyx_v_isolute;
  if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_apr.shape[0];
  __pyx_t_8 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_33 * __pyx_v_apr.strides[0]) )));
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "src/helpers/helpers.pyx":513
 * 
 *     for i in range(apr[isolute]):
 *         energy += epa[i]             # <<<<<<<<<<<<<<
 * 
 *     return energy * 1390.02, np.asarray(histo)[:] * 1390.02 , histo_error, np.asarray(count)[:]
 */
    __pyx_t_33 = __pyx_v_i;
    if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_epa.shape[0];
    __pyx_t_1 = PyFloat_FromDouble((*((double *) ( /* dim=0 */ (__pyx_v_epa.data + __pyx_t_33 * __pyx_v_epa.strides[0]) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_energy, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_energy, __pyx_t_3);
    __pyx_t_3 = 0;
  }

  /* "src/helpers/helpers.pyx":515
 *         energy += epa[i]
 * 
 *     return energy * 1390.02, np.asarray(histo)[:] * 1390.02 , histo_error, np.asarray(count)[:]             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_energy, __pyx_float_1390_02); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_histo, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_35 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_35 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_35)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_35);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_35) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_35, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_35); __pyx_t_35 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice__2, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_5, __pyx_float_1390_02); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_histo_error); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_35, __pyx_n_s_np); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __pyx_t_36 = __Pyx_PyObject_GetAttrStr(__pyx_t_35, __pyx_n_s_asarray); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
  __pyx_t_35 = __pyx_memoryview_fromslice(__pyx_v_count, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __pyx_t_37 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_36))) {
    __pyx_t_37 = PyMethod_GET_SELF(__pyx_t_36);
    if (likely(__pyx_t_37)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_36);
      __Pyx_INCREF(__pyx_t_37);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_36, function);
    }
  }
  __pyx_t_2 = (__pyx_t_37) ? __Pyx_PyObject_Call2Args(__pyx_t_36, __pyx_t_37, __pyx_t_35) : __Pyx_PyObject_CallOneArg(__pyx_t_36, __pyx_t_35);
  __Pyx_XDECREF(__pyx_t_37); __pyx_t_37 = 0;
  __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
  __pyx_t_36 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, 0, NULL, NULL, &__pyx_slice__2, 0, 0, 1); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_36);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_36);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_36 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":451
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAAhisto1(double [:,:] coor,  double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double histo_min, double histo_max, int histo_bins, int[:] trehalose):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAAhisto(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, min_histo, max_histo, bins_hist,array indices)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_XDECREF(__pyx_t_35);
  __Pyx_XDECREF(__pyx_t_36);
  __Pyx_XDECREF(__pyx_t_37);
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAAhisto1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_epa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_histo, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_count, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_store, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_squared_r_tre, 1);
  __Pyx_XDECREF(__pyx_v_energy);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coms, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_trehalose, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":518
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAApermindhisto(double [:,:] coor, double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int first, int last, double[:] drude,double histo_min, double histo_max, int histo_bins,):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, resnum_from, resnum_to, drude_list, min_histo, max_histo, bins_histo)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_29calcEnergyAApermindhisto(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_28calcEnergyAApermindhisto[] = "\n    energy = calcEnergyAA(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, resnum_from, resnum_to, drude_list, min_histo, max_histo, bins_histo)\n\n    Calculates the permanent and induced part of the solvation energy of a solute in any solvent for a specific coordinate set.\n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_29calcEnergyAApermindhisto = {"calcEnergyAApermindhisto", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_29calcEnergyAApermindhisto, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_28calcEnergyAApermindhisto};
static PyObject *__pyx_pw_11newanalysis_7helpers_29calcEnergyAApermindhisto(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coms = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_isolute;
  int __pyx_v_first;
  int __pyx_v_last;
  __Pyx_memviewslice __pyx_v_drude = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_histo_min;
  double __pyx_v_histo_max;
  int __pyx_v_histo_bins;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEnergyAApermindhisto (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_coms,&__pyx_n_s_charges,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_isolute,&__pyx_n_s_first,&__pyx_n_s_last,&__pyx_n_s_drude,&__pyx_n_s_histo_min,&__pyx_n_s_histo_max,&__pyx_n_s_histo_bins,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 1); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 2); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 3); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 4); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 5); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_first)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 6); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 7); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_drude)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 8); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_histo_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 9); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_histo_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 10); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_histo_bins)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, 11); __PYX_ERR(0, 518, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEnergyAApermindhisto") < 0)) __PYX_ERR(0, 518, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_coms = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coms.memview)) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_first = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_first == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_last = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_last == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_drude = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[8], PyBUF_WRITABLE); if (unlikely(!__pyx_v_drude.memview)) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_histo_min = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_histo_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_histo_max = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_histo_max == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_histo_bins = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_histo_bins == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEnergyAApermindhisto", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 518, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAApermindhisto", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_28calcEnergyAApermindhisto(__pyx_self, __pyx_v_coor, __pyx_v_coms, __pyx_v_charges, __pyx_v_apr, __pyx_v_rfa, __pyx_v_isolute, __pyx_v_first, __pyx_v_last, __pyx_v_drude, __pyx_v_histo_min, __pyx_v_histo_max, __pyx_v_histo_bins);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_28calcEnergyAApermindhisto(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_coms, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_first, int __pyx_v_last, __Pyx_memviewslice __pyx_v_drude, double __pyx_v_histo_min, double __pyx_v_histo_max, int __pyx_v_histo_bins) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_idx;
  int __pyx_v_idx2;
  int __pyx_v_histo_error;
  __Pyx_memviewslice __pyx_v_epa_ind = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_epa_perm = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_histo_perm = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_histo_ind = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_r;
  double __pyx_v_qq;
  double __pyx_v_energy_perm;
  double __pyx_v_energy_ind;
  double __pyx_v_histo_width;
  double __pyx_v_tmp_perm;
  double __pyx_v_tmp_ind;
  double __pyx_v_qq_diff;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcEnergyAApermindhisto", 0);

  /* "src/helpers/helpers.pyx":526
 *     """
 *     cdef int i, j, k, idx, idx2, histo_error
 *     cdef double [:] epa_ind = np.zeros(apr[isolute])             # <<<<<<<<<<<<<<
 *     cdef double [:] epa_perm = np.zeros(apr[isolute])
 *     cdef double [:] histo_perm=np.zeros(histo_bins), histo_ind=np.zeros(histo_bins)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_2 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_epa_ind = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":527
 *     cdef int i, j, k, idx, idx2, histo_error
 *     cdef double [:] epa_ind = np.zeros(apr[isolute])
 *     cdef double [:] epa_perm = np.zeros(apr[isolute])             # <<<<<<<<<<<<<<
 *     cdef double [:] histo_perm=np.zeros(histo_bins), histo_ind=np.zeros(histo_bins)
 *     cdef double dx, dy, dz, r, qq, energy_perm, energy_ind, histo_width, tmp_perm, tmp_ind, qq_diff
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_3 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_epa_perm = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":528
 *     cdef double [:] epa_ind = np.zeros(apr[isolute])
 *     cdef double [:] epa_perm = np.zeros(apr[isolute])
 *     cdef double [:] histo_perm=np.zeros(histo_bins), histo_ind=np.zeros(histo_bins)             # <<<<<<<<<<<<<<
 *     cdef double dx, dy, dz, r, qq, energy_perm, energy_ind, histo_width, tmp_perm, tmp_ind, qq_diff
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_histo_bins); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_histo_perm = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_histo_bins); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_histo_ind = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":531
 *     cdef double dx, dy, dz, r, qq, energy_perm, energy_ind, histo_width, tmp_perm, tmp_ind, qq_diff
 * 
 *     energy_perm = 0.0             # <<<<<<<<<<<<<<
 *     energy_ind = 0.0
 *     histo_error=0
 */
  __pyx_v_energy_perm = 0.0;

  /* "src/helpers/helpers.pyx":532
 * 
 *     energy_perm = 0.0
 *     energy_ind = 0.0             # <<<<<<<<<<<<<<
 *     histo_error=0
 *     histo_width=(histo_max-histo_min)/histo_bins
 */
  __pyx_v_energy_ind = 0.0;

  /* "src/helpers/helpers.pyx":533
 *     energy_perm = 0.0
 *     energy_ind = 0.0
 *     histo_error=0             # <<<<<<<<<<<<<<
 *     histo_width=(histo_max-histo_min)/histo_bins
 * 
 */
  __pyx_v_histo_error = 0;

  /* "src/helpers/helpers.pyx":534
 *     energy_ind = 0.0
 *     histo_error=0
 *     histo_width=(histo_max-histo_min)/histo_bins             # <<<<<<<<<<<<<<
 * 
 *     # loop over solute atoms
 */
  __pyx_t_7 = (__pyx_v_histo_max - __pyx_v_histo_min);
  if (unlikely(__pyx_v_histo_bins == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 534, __pyx_L1_error)
  }
  __pyx_v_histo_width = (__pyx_t_7 / __pyx_v_histo_bins);

  /* "src/helpers/helpers.pyx":538
 *     # loop over solute atoms
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 */
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_8 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "src/helpers/helpers.pyx":539
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):
 *         idx = rfa[isolute] + i             # <<<<<<<<<<<<<<
 *         # loop over solvent molecules
 *         for j in range(first,last+1):
 */
    __pyx_t_4 = __pyx_v_isolute;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
    __pyx_v_idx = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_i);

    /* "src/helpers/helpers.pyx":541
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 *         for j in range(first,last+1):             # <<<<<<<<<<<<<<
 *             if j == isolute:
 *                 continue
 */
    __pyx_t_11 = (__pyx_v_last + 1);
    __pyx_t_12 = __pyx_t_11;
    for (__pyx_t_13 = __pyx_v_first; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_j = __pyx_t_13;

      /* "src/helpers/helpers.pyx":542
 *         # loop over solvent molecules
 *         for j in range(first,last+1):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             tmp_perm=0.0
 */
      __pyx_t_14 = ((__pyx_v_j == __pyx_v_isolute) != 0);
      if (__pyx_t_14) {

        /* "src/helpers/helpers.pyx":543
 *         for j in range(first,last+1):
 *             if j == isolute:
 *                 continue             # <<<<<<<<<<<<<<
 *             tmp_perm=0.0
 *             tmp_ind=0.0
 */
        goto __pyx_L5_continue;

        /* "src/helpers/helpers.pyx":542
 *         # loop over solvent molecules
 *         for j in range(first,last+1):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             tmp_perm=0.0
 */
      }

      /* "src/helpers/helpers.pyx":544
 *             if j == isolute:
 *                 continue
 *             tmp_perm=0.0             # <<<<<<<<<<<<<<
 *             tmp_ind=0.0
 *             for k in range(apr[j]):
 */
      __pyx_v_tmp_perm = 0.0;

      /* "src/helpers/helpers.pyx":545
 *                 continue
 *             tmp_perm=0.0
 *             tmp_ind=0.0             # <<<<<<<<<<<<<<
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 */
      __pyx_v_tmp_ind = 0.0;

      /* "src/helpers/helpers.pyx":546
 *             tmp_perm=0.0
 *             tmp_ind=0.0
 *             for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 */
      __pyx_t_4 = __pyx_v_j;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
      __pyx_t_15 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
      __pyx_t_16 = __pyx_t_15;
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "src/helpers/helpers.pyx":547
 *             tmp_ind=0.0
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k             # <<<<<<<<<<<<<<
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 */
        __pyx_t_4 = __pyx_v_j;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
        __pyx_v_idx2 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_k);

        /* "src/helpers/helpers.pyx":548
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]             # <<<<<<<<<<<<<<
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_18 = 0;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_19 = __pyx_v_idx2;
        __pyx_t_20 = 0;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_v_dx = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":549
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]             # <<<<<<<<<<<<<<
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 */
        __pyx_t_20 = __pyx_v_idx;
        __pyx_t_19 = 1;
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[0];
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[1];
        __pyx_t_18 = __pyx_v_idx2;
        __pyx_t_4 = 1;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[0];
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[1];
        __pyx_v_dy = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_20 * __pyx_v_coor.strides[0]) ) + __pyx_t_19 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_18 * __pyx_v_coor.strides[0]) ) + __pyx_t_4 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":550
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]             # <<<<<<<<<<<<<<
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 qq = charges[idx] * charges[idx2] / r
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_18 = 2;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_19 = __pyx_v_idx2;
        __pyx_t_20 = 2;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_v_dz = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":551
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)             # <<<<<<<<<<<<<<
 *                 qq = charges[idx] * charges[idx2] / r
 * 
 */
        __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

        /* "src/helpers/helpers.pyx":552
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 qq = charges[idx] * charges[idx2] / r             # <<<<<<<<<<<<<<
 * 
 *                 if drude[k]==1:
 */
        __pyx_t_20 = __pyx_v_idx;
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_charges.shape[0];
        __pyx_t_19 = __pyx_v_idx2;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_charges.shape[0];
        __pyx_t_7 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_20 * __pyx_v_charges.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_19 * __pyx_v_charges.strides[0]) ))));
        if (unlikely(__pyx_v_r == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 552, __pyx_L1_error)
        }
        __pyx_v_qq = (__pyx_t_7 / __pyx_v_r);

        /* "src/helpers/helpers.pyx":554
 *                 qq = charges[idx] * charges[idx2] / r
 * 
 *                 if drude[k]==1:             # <<<<<<<<<<<<<<
 *                     epa_ind[i]+=qq
 *                     tmp_ind   +=qq
 */
        __pyx_t_19 = __pyx_v_k;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_drude.shape[0];
        __pyx_t_14 = (((*((double *) ( /* dim=0 */ (__pyx_v_drude.data + __pyx_t_19 * __pyx_v_drude.strides[0]) ))) == 1.0) != 0);
        if (__pyx_t_14) {

          /* "src/helpers/helpers.pyx":555
 * 
 *                 if drude[k]==1:
 *                     epa_ind[i]+=qq             # <<<<<<<<<<<<<<
 *                     tmp_ind   +=qq
 *                 else:
 */
          __pyx_t_19 = __pyx_v_i;
          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_epa_ind.shape[0];
          *((double *) ( /* dim=0 */ (__pyx_v_epa_ind.data + __pyx_t_19 * __pyx_v_epa_ind.strides[0]) )) += __pyx_v_qq;

          /* "src/helpers/helpers.pyx":556
 *                 if drude[k]==1:
 *                     epa_ind[i]+=qq
 *                     tmp_ind   +=qq             # <<<<<<<<<<<<<<
 *                 else:
 *                     epa_perm[i]+=qq
 */
          __pyx_v_tmp_ind = (__pyx_v_tmp_ind + __pyx_v_qq);

          /* "src/helpers/helpers.pyx":554
 *                 qq = charges[idx] * charges[idx2] / r
 * 
 *                 if drude[k]==1:             # <<<<<<<<<<<<<<
 *                     epa_ind[i]+=qq
 *                     tmp_ind   +=qq
 */
          goto __pyx_L10;
        }

        /* "src/helpers/helpers.pyx":558
 *                     tmp_ind   +=qq
 *                 else:
 *                     epa_perm[i]+=qq             # <<<<<<<<<<<<<<
 *                     tmp_perm   +=qq
 *                     if k<apr[j]-1 and drude[k+1]==1:
 */
        /*else*/ {
          __pyx_t_19 = __pyx_v_i;
          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_epa_perm.shape[0];
          *((double *) ( /* dim=0 */ (__pyx_v_epa_perm.data + __pyx_t_19 * __pyx_v_epa_perm.strides[0]) )) += __pyx_v_qq;

          /* "src/helpers/helpers.pyx":559
 *                 else:
 *                     epa_perm[i]+=qq
 *                     tmp_perm   +=qq             # <<<<<<<<<<<<<<
 *                     if k<apr[j]-1 and drude[k+1]==1:
 *                         qq_diff=charges[idx]*charges[idx2+1] / r
 */
          __pyx_v_tmp_perm = (__pyx_v_tmp_perm + __pyx_v_qq);

          /* "src/helpers/helpers.pyx":560
 *                     epa_perm[i]+=qq
 *                     tmp_perm   +=qq
 *                     if k<apr[j]-1 and drude[k+1]==1:             # <<<<<<<<<<<<<<
 *                         qq_diff=charges[idx]*charges[idx2+1] / r
 *                         epa_ind[i] -= qq_diff
 */
          __pyx_t_19 = __pyx_v_j;
          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_apr.shape[0];
          __pyx_t_21 = ((__pyx_v_k < ((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_19 * __pyx_v_apr.strides[0]) ))) - 1)) != 0);
          if (__pyx_t_21) {
          } else {
            __pyx_t_14 = __pyx_t_21;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_19 = (__pyx_v_k + 1);
          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_drude.shape[0];
          __pyx_t_21 = (((*((double *) ( /* dim=0 */ (__pyx_v_drude.data + __pyx_t_19 * __pyx_v_drude.strides[0]) ))) == 1.0) != 0);
          __pyx_t_14 = __pyx_t_21;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "src/helpers/helpers.pyx":561
 *                     tmp_perm   +=qq
 *                     if k<apr[j]-1 and drude[k+1]==1:
 *                         qq_diff=charges[idx]*charges[idx2+1] / r             # <<<<<<<<<<<<<<
 *                         epa_ind[i] -= qq_diff
 *                         tmp_ind    = tmp_ind-qq_diff
 */
            __pyx_t_19 = __pyx_v_idx;
            if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_charges.shape[0];
            __pyx_t_20 = (__pyx_v_idx2 + 1);
            if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_charges.shape[0];
            __pyx_t_7 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_19 * __pyx_v_charges.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_20 * __pyx_v_charges.strides[0]) ))));
            if (unlikely(__pyx_v_r == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 561, __pyx_L1_error)
            }
            __pyx_v_qq_diff = (__pyx_t_7 / __pyx_v_r);

            /* "src/helpers/helpers.pyx":562
 *                     if k<apr[j]-1 and drude[k+1]==1:
 *                         qq_diff=charges[idx]*charges[idx2+1] / r
 *                         epa_ind[i] -= qq_diff             # <<<<<<<<<<<<<<
 *                         tmp_ind    = tmp_ind-qq_diff
 *                         epa_perm[i]+= qq_diff
 */
            __pyx_t_20 = __pyx_v_i;
            if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_epa_ind.shape[0];
            *((double *) ( /* dim=0 */ (__pyx_v_epa_ind.data + __pyx_t_20 * __pyx_v_epa_ind.strides[0]) )) -= __pyx_v_qq_diff;

            /* "src/helpers/helpers.pyx":563
 *                         qq_diff=charges[idx]*charges[idx2+1] / r
 *                         epa_ind[i] -= qq_diff
 *                         tmp_ind    = tmp_ind-qq_diff             # <<<<<<<<<<<<<<
 *                         epa_perm[i]+= qq_diff
 *                         tmp_perm   = tmp_perm+qq_diff
 */
            __pyx_v_tmp_ind = (__pyx_v_tmp_ind - __pyx_v_qq_diff);

            /* "src/helpers/helpers.pyx":564
 *                         epa_ind[i] -= qq_diff
 *                         tmp_ind    = tmp_ind-qq_diff
 *                         epa_perm[i]+= qq_diff             # <<<<<<<<<<<<<<
 *                         tmp_perm   = tmp_perm+qq_diff
 * 
 */
            __pyx_t_20 = __pyx_v_i;
            if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_epa_perm.shape[0];
            *((double *) ( /* dim=0 */ (__pyx_v_epa_perm.data + __pyx_t_20 * __pyx_v_epa_perm.strides[0]) )) += __pyx_v_qq_diff;

            /* "src/helpers/helpers.pyx":565
 *                         tmp_ind    = tmp_ind-qq_diff
 *                         epa_perm[i]+= qq_diff
 *                         tmp_perm   = tmp_perm+qq_diff             # <<<<<<<<<<<<<<
 * 
 *             r=sqrt(coms[j,0]*coms[j,0]+coms[j,1]*coms[j,1]+coms[j,2]*coms[j,2])
 */
            __pyx_v_tmp_perm = (__pyx_v_tmp_perm + __pyx_v_qq_diff);

            /* "src/helpers/helpers.pyx":560
 *                     epa_perm[i]+=qq
 *                     tmp_perm   +=qq
 *                     if k<apr[j]-1 and drude[k+1]==1:             # <<<<<<<<<<<<<<
 *                         qq_diff=charges[idx]*charges[idx2+1] / r
 *                         epa_ind[i] -= qq_diff
 */
          }
        }
        __pyx_L10:;
      }

      /* "src/helpers/helpers.pyx":567
 *                         tmp_perm   = tmp_perm+qq_diff
 * 
 *             r=sqrt(coms[j,0]*coms[j,0]+coms[j,1]*coms[j,1]+coms[j,2]*coms[j,2])             # <<<<<<<<<<<<<<
 *             if r < histo_min:
 *                 histo_error=1
 */
      __pyx_t_20 = __pyx_v_j;
      __pyx_t_19 = 0;
      if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coms.shape[0];
      if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coms.shape[1];
      __pyx_t_18 = __pyx_v_j;
      __pyx_t_4 = 0;
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coms.shape[0];
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coms.shape[1];
      __pyx_t_22 = __pyx_v_j;
      __pyx_t_23 = 1;
      if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_coms.shape[0];
      if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_coms.shape[1];
      __pyx_t_24 = __pyx_v_j;
      __pyx_t_25 = 1;
      if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_coms.shape[0];
      if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_coms.shape[1];
      __pyx_t_26 = __pyx_v_j;
      __pyx_t_27 = 2;
      if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_coms.shape[0];
      if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coms.shape[1];
      __pyx_t_28 = __pyx_v_j;
      __pyx_t_29 = 2;
      if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_coms.shape[0];
      if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_coms.shape[1];
      __pyx_v_r = sqrt(((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_20 * __pyx_v_coms.strides[0]) ) + __pyx_t_19 * __pyx_v_coms.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_18 * __pyx_v_coms.strides[0]) ) + __pyx_t_4 * __pyx_v_coms.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_22 * __pyx_v_coms.strides[0]) ) + __pyx_t_23 * __pyx_v_coms.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_24 * __pyx_v_coms.strides[0]) ) + __pyx_t_25 * __pyx_v_coms.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_26 * __pyx_v_coms.strides[0]) ) + __pyx_t_27 * __pyx_v_coms.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_28 * __pyx_v_coms.strides[0]) ) + __pyx_t_29 * __pyx_v_coms.strides[1]) ))))));

      /* "src/helpers/helpers.pyx":568
 * 
 *             r=sqrt(coms[j,0]*coms[j,0]+coms[j,1]*coms[j,1]+coms[j,2]*coms[j,2])
 *             if r < histo_min:             # <<<<<<<<<<<<<<
 *                 histo_error=1
 *             elif r >= histo_max:
 */
      __pyx_t_14 = ((__pyx_v_r < __pyx_v_histo_min) != 0);
      if (__pyx_t_14) {

        /* "src/helpers/helpers.pyx":569
 *             r=sqrt(coms[j,0]*coms[j,0]+coms[j,1]*coms[j,1]+coms[j,2]*coms[j,2])
 *             if r < histo_min:
 *                 histo_error=1             # <<<<<<<<<<<<<<
 *             elif r >= histo_max:
 *                 histo_error=2
 */
        __pyx_v_histo_error = 1;

        /* "src/helpers/helpers.pyx":568
 * 
 *             r=sqrt(coms[j,0]*coms[j,0]+coms[j,1]*coms[j,1]+coms[j,2]*coms[j,2])
 *             if r < histo_min:             # <<<<<<<<<<<<<<
 *                 histo_error=1
 *             elif r >= histo_max:
 */
        goto __pyx_L14;
      }

      /* "src/helpers/helpers.pyx":570
 *             if r < histo_min:
 *                 histo_error=1
 *             elif r >= histo_max:             # <<<<<<<<<<<<<<
 *                 histo_error=2
 *             else:
 */
      __pyx_t_14 = ((__pyx_v_r >= __pyx_v_histo_max) != 0);
      if (__pyx_t_14) {

        /* "src/helpers/helpers.pyx":571
 *                 histo_error=1
 *             elif r >= histo_max:
 *                 histo_error=2             # <<<<<<<<<<<<<<
 *             else:
 *                 histo_perm[int((r-histo_min)/histo_width)]+=tmp_perm
 */
        __pyx_v_histo_error = 2;

        /* "src/helpers/helpers.pyx":570
 *             if r < histo_min:
 *                 histo_error=1
 *             elif r >= histo_max:             # <<<<<<<<<<<<<<
 *                 histo_error=2
 *             else:
 */
        goto __pyx_L14;
      }

      /* "src/helpers/helpers.pyx":573
 *                 histo_error=2
 *             else:
 *                 histo_perm[int((r-histo_min)/histo_width)]+=tmp_perm             # <<<<<<<<<<<<<<
 *                 histo_ind[int((r-histo_min)/histo_width)] +=tmp_ind
 * 
 */
      /*else*/ {
        __pyx_t_7 = (__pyx_v_r - __pyx_v_histo_min);
        if (unlikely(__pyx_v_histo_width == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 573, __pyx_L1_error)
        }
        __pyx_t_29 = ((Py_ssize_t)(__pyx_t_7 / __pyx_v_histo_width));
        if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_histo_perm.shape[0];
        *((double *) ( /* dim=0 */ (__pyx_v_histo_perm.data + __pyx_t_29 * __pyx_v_histo_perm.strides[0]) )) += __pyx_v_tmp_perm;

        /* "src/helpers/helpers.pyx":574
 *             else:
 *                 histo_perm[int((r-histo_min)/histo_width)]+=tmp_perm
 *                 histo_ind[int((r-histo_min)/histo_width)] +=tmp_ind             # <<<<<<<<<<<<<<
 * 
 *     for i in range(apr[isolute]):
 */
        __pyx_t_7 = (__pyx_v_r - __pyx_v_histo_min);
        if (unlikely(__pyx_v_histo_width == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 574, __pyx_L1_error)
        }
        __pyx_t_29 = ((Py_ssize_t)(__pyx_t_7 / __pyx_v_histo_width));
        if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_histo_ind.shape[0];
        *((double *) ( /* dim=0 */ (__pyx_v_histo_ind.data + __pyx_t_29 * __pyx_v_histo_ind.strides[0]) )) += __pyx_v_tmp_ind;
      }
      __pyx_L14:;
      __pyx_L5_continue:;
    }
  }

  /* "src/helpers/helpers.pyx":576
 *                 histo_ind[int((r-histo_min)/histo_width)] +=tmp_ind
 * 
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         energy_perm += epa_perm[i]
 *         energy_ind  += epa_ind[i]
 */
  __pyx_t_29 = __pyx_v_isolute;
  if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_apr.shape[0];
  __pyx_t_8 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_29 * __pyx_v_apr.strides[0]) )));
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "src/helpers/helpers.pyx":577
 * 
 *     for i in range(apr[isolute]):
 *         energy_perm += epa_perm[i]             # <<<<<<<<<<<<<<
 *         energy_ind  += epa_ind[i]
 * 
 */
    __pyx_t_29 = __pyx_v_i;
    if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_epa_perm.shape[0];
    __pyx_v_energy_perm = (__pyx_v_energy_perm + (*((double *) ( /* dim=0 */ (__pyx_v_epa_perm.data + __pyx_t_29 * __pyx_v_epa_perm.strides[0]) ))));

    /* "src/helpers/helpers.pyx":578
 *     for i in range(apr[isolute]):
 *         energy_perm += epa_perm[i]
 *         energy_ind  += epa_ind[i]             # <<<<<<<<<<<<<<
 * 
 *     return energy_perm * 1390.02 , energy_ind * 1390.02, np.asarray(histo_perm)[:] * 1390.02, np.asarray(histo_ind)[:] * 1390.02 , histo_error
 */
    __pyx_t_29 = __pyx_v_i;
    if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_epa_ind.shape[0];
    __pyx_v_energy_ind = (__pyx_v_energy_ind + (*((double *) ( /* dim=0 */ (__pyx_v_epa_ind.data + __pyx_t_29 * __pyx_v_epa_ind.strides[0]) ))));
  }

  /* "src/helpers/helpers.pyx":580
 *         energy_ind  += epa_ind[i]
 * 
 *     return energy_perm * 1390.02 , energy_ind * 1390.02, np.asarray(histo_perm)[:] * 1390.02, np.asarray(histo_ind)[:] * 1390.02 , histo_error             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_energy_perm * 1390.02)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_energy_ind * 1390.02)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_30 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_asarray); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_histo_perm, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_31 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_30))) {
    __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_30);
    if (likely(__pyx_t_31)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_30);
      __Pyx_INCREF(__pyx_t_31);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_30, function);
    }
  }
  __pyx_t_3 = (__pyx_t_31) ? __Pyx_PyObject_Call2Args(__pyx_t_30, __pyx_t_31, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_30, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __pyx_t_30 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, 0, NULL, NULL, &__pyx_slice__2, 0, 0, 1); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_30, __pyx_float_1390_02); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_asarray); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_histo_ind, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_32 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
    __pyx_t_32 = PyMethod_GET_SELF(__pyx_t_31);
    if (likely(__pyx_t_32)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
      __Pyx_INCREF(__pyx_t_32);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_31, function);
    }
  }
  __pyx_t_30 = (__pyx_t_32) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_32, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_32); __pyx_t_32 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __pyx_t_31 = __Pyx_PyObject_GetSlice(__pyx_t_30, 0, 0, NULL, NULL, &__pyx_slice__2, 0, 0, 1); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __pyx_t_30 = PyNumber_Multiply(__pyx_t_31, __pyx_float_1390_02); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __pyx_t_31 = __Pyx_PyInt_From_int(__pyx_v_histo_error); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_30);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_31);
  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_t_31);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_30 = 0;
  __pyx_t_31 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":518
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAApermindhisto(double [:,:] coor, double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int first, int last, double[:] drude,double histo_min, double histo_max, int histo_bins,):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, resnum_from, resnum_to, drude_list, min_histo, max_histo, bins_histo)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_XDECREF(__pyx_t_30);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAApermindhisto", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_epa_ind, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_epa_perm, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_histo_perm, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_histo_ind, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coms, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_drude, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":583
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAtomic(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, int exclude_begin=-1, int exclude_end=-1):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAtomic(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_31calcEnergyAtomic(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_30calcEnergyAtomic[] = "\n    energy = calcEnergyAtomic(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules)\n\n    Calculates the atom-resolved solvation energy of a solute in any solvent for a specific coordinate set.\n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_31calcEnergyAtomic = {"calcEnergyAtomic", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_31calcEnergyAtomic, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_30calcEnergyAtomic};
static PyObject *__pyx_pw_11newanalysis_7helpers_31calcEnergyAtomic(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_isolute;
  int __pyx_v_nmol;
  int __pyx_v_exclude_begin;
  int __pyx_v_exclude_end;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEnergyAtomic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_charges,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_isolute,&__pyx_n_s_nmol,&__pyx_n_s_exclude_begin,&__pyx_n_s_exclude_end,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomic", 0, 6, 8, 1); __PYX_ERR(0, 583, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomic", 0, 6, 8, 2); __PYX_ERR(0, 583, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomic", 0, 6, 8, 3); __PYX_ERR(0, 583, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomic", 0, 6, 8, 4); __PYX_ERR(0, 583, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nmol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomic", 0, 6, 8, 5); __PYX_ERR(0, 583, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exclude_begin);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exclude_end);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEnergyAtomic") < 0)) __PYX_ERR(0, 583, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 583, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 583, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 583, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 583, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 583, __pyx_L3_error)
    __pyx_v_nmol = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nmol == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 583, __pyx_L3_error)
    if (values[6]) {
      __pyx_v_exclude_begin = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_exclude_begin == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 583, __pyx_L3_error)
    } else {
      __pyx_v_exclude_begin = ((int)-1);
    }
    if (values[7]) {
      __pyx_v_exclude_end = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_exclude_end == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 583, __pyx_L3_error)
    } else {
      __pyx_v_exclude_end = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEnergyAtomic", 0, 6, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 583, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAtomic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_30calcEnergyAtomic(__pyx_self, __pyx_v_coor, __pyx_v_charges, __pyx_v_apr, __pyx_v_rfa, __pyx_v_isolute, __pyx_v_nmol, __pyx_v_exclude_begin, __pyx_v_exclude_end);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_30calcEnergyAtomic(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, int __pyx_v_exclude_begin, int __pyx_v_exclude_end) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_idx;
  int __pyx_v_idx2;
  __Pyx_memviewslice __pyx_v_epa = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  double __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcEnergyAtomic", 0);

  /* "src/helpers/helpers.pyx":591
 *     """
 *     cdef int i, j, k, idx, idx2
 *     cdef double [:] epa = np.zeros(apr[isolute])             # <<<<<<<<<<<<<<
 *     cdef double dx, dy, dz, r
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_2 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_epa = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":596
 *     # loop over solute atoms
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 */
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_7 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "src/helpers/helpers.pyx":597
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):
 *         idx = rfa[isolute] + i             # <<<<<<<<<<<<<<
 *         # loop over solvent molecules
 *         for j in range(nmol):
 */
    __pyx_t_4 = __pyx_v_isolute;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
    __pyx_v_idx = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_i);

    /* "src/helpers/helpers.pyx":599
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 *         for j in range(nmol):             # <<<<<<<<<<<<<<
 *             if j == isolute or (j >= exclude_begin and j < exclude_end):
 *                 continue
 */
    __pyx_t_10 = __pyx_v_nmol;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "src/helpers/helpers.pyx":600
 *         # loop over solvent molecules
 *         for j in range(nmol):
 *             if j == isolute or (j >= exclude_begin and j < exclude_end):             # <<<<<<<<<<<<<<
 *                 continue
 *             for k in range(apr[j]):
 */
      __pyx_t_14 = ((__pyx_v_j == __pyx_v_isolute) != 0);
      if (!__pyx_t_14) {
      } else {
        __pyx_t_13 = __pyx_t_14;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_14 = ((__pyx_v_j >= __pyx_v_exclude_begin) != 0);
      if (__pyx_t_14) {
      } else {
        __pyx_t_13 = __pyx_t_14;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_14 = ((__pyx_v_j < __pyx_v_exclude_end) != 0);
      __pyx_t_13 = __pyx_t_14;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_13) {

        /* "src/helpers/helpers.pyx":601
 *         for j in range(nmol):
 *             if j == isolute or (j >= exclude_begin and j < exclude_end):
 *                 continue             # <<<<<<<<<<<<<<
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 */
        goto __pyx_L5_continue;

        /* "src/helpers/helpers.pyx":600
 *         # loop over solvent molecules
 *         for j in range(nmol):
 *             if j == isolute or (j >= exclude_begin and j < exclude_end):             # <<<<<<<<<<<<<<
 *                 continue
 *             for k in range(apr[j]):
 */
      }

      /* "src/helpers/helpers.pyx":602
 *             if j == isolute or (j >= exclude_begin and j < exclude_end):
 *                 continue
 *             for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 */
      __pyx_t_4 = __pyx_v_j;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
      __pyx_t_15 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
      __pyx_t_16 = __pyx_t_15;
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "src/helpers/helpers.pyx":603
 *                 continue
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k             # <<<<<<<<<<<<<<
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 */
        __pyx_t_4 = __pyx_v_j;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
        __pyx_v_idx2 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_k);

        /* "src/helpers/helpers.pyx":604
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]             # <<<<<<<<<<<<<<
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_18 = 0;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_19 = __pyx_v_idx2;
        __pyx_t_20 = 0;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_v_dx = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":605
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]             # <<<<<<<<<<<<<<
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 */
        __pyx_t_20 = __pyx_v_idx;
        __pyx_t_19 = 1;
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[0];
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[1];
        __pyx_t_18 = __pyx_v_idx2;
        __pyx_t_4 = 1;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[0];
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[1];
        __pyx_v_dy = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_20 * __pyx_v_coor.strides[0]) ) + __pyx_t_19 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_18 * __pyx_v_coor.strides[0]) ) + __pyx_t_4 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":606
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]             # <<<<<<<<<<<<<<
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 epa[i] += charges[idx] * charges[idx2] / r
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_18 = 2;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_19 = __pyx_v_idx2;
        __pyx_t_20 = 2;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_v_dz = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":607
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)             # <<<<<<<<<<<<<<
 *                 epa[i] += charges[idx] * charges[idx2] / r
 * 
 */
        __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

        /* "src/helpers/helpers.pyx":608
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 epa[i] += charges[idx] * charges[idx2] / r             # <<<<<<<<<<<<<<
 * 
 *     return np.asarray(epa)[:] * 1390.02
 */
        __pyx_t_20 = __pyx_v_idx;
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_charges.shape[0];
        __pyx_t_19 = __pyx_v_idx2;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_charges.shape[0];
        __pyx_t_21 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_20 * __pyx_v_charges.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_19 * __pyx_v_charges.strides[0]) ))));
        if (unlikely(__pyx_v_r == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 608, __pyx_L1_error)
        }
        __pyx_t_19 = __pyx_v_i;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_epa.shape[0];
        *((double *) ( /* dim=0 */ (__pyx_v_epa.data + __pyx_t_19 * __pyx_v_epa.strides[0]) )) += (__pyx_t_21 / __pyx_v_r);
      }
      __pyx_L5_continue:;
    }
  }

  /* "src/helpers/helpers.pyx":610
 *                 epa[i] += charges[idx] * charges[idx2] / r
 * 
 *     return np.asarray(epa)[:] * 1390.02             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_epa, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice__2, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_float_1390_02); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":583
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAtomic(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, int exclude_begin=-1, int exclude_end=-1):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAtomic(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAtomic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_epa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":613
 * 
 * @cython.boundscheck(False)
 * def calcEnergyDouble(double [:,:] coor, double [:] charges1,  int [:] apr, int [:] rfa, int isolute, int nmol, int start, int end):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyDouble(xyz, charges_1, charges_2, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules,start_res,end_res)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_33calcEnergyDouble(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_32calcEnergyDouble[] = "\n    energy = calcEnergyDouble(xyz, charges_1, charges_2, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules,start_res,end_res)\n\n    Calculates the atom-resolved solvation energy of a solute in any solvent for a specific coordinate set \n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_33calcEnergyDouble = {"calcEnergyDouble", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_33calcEnergyDouble, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_32calcEnergyDouble};
static PyObject *__pyx_pw_11newanalysis_7helpers_33calcEnergyDouble(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_isolute;
  int __pyx_v_nmol;
  int __pyx_v_start;
  int __pyx_v_end;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEnergyDouble (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_charges1,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_isolute,&__pyx_n_s_nmol,&__pyx_n_s_start,&__pyx_n_s_end,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyDouble", 1, 8, 8, 1); __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyDouble", 1, 8, 8, 2); __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyDouble", 1, 8, 8, 3); __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyDouble", 1, 8, 8, 4); __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nmol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyDouble", 1, 8, 8, 5); __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyDouble", 1, 8, 8, 6); __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyDouble", 1, 8, 8, 7); __PYX_ERR(0, 613, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEnergyDouble") < 0)) __PYX_ERR(0, 613, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 613, __pyx_L3_error)
    __pyx_v_charges1 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges1.memview)) __PYX_ERR(0, 613, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 613, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 613, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L3_error)
    __pyx_v_nmol = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nmol == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L3_error)
    __pyx_v_start = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L3_error)
    __pyx_v_end = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_end == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEnergyDouble", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 613, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyDouble", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_32calcEnergyDouble(__pyx_self, __pyx_v_coor, __pyx_v_charges1, __pyx_v_apr, __pyx_v_rfa, __pyx_v_isolute, __pyx_v_nmol, __pyx_v_start, __pyx_v_end);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_32calcEnergyDouble(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges1, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, int __pyx_v_start, int __pyx_v_end) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_idx;
  int __pyx_v_idx2;
  __Pyx_memviewslice __pyx_v_epa1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  double __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcEnergyDouble", 0);

  /* "src/helpers/helpers.pyx":621
 *     """
 *     cdef int i, j, k, idx, idx2
 *     cdef double [:] epa1 = np.zeros(apr[isolute])             # <<<<<<<<<<<<<<
 *     cdef double dx, dy, dz, r
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_2 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_epa1 = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":626
 *     # loop over solute atoms
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         idx = rfa[isolute] + i
 *         if charges1[idx]==0:
 */
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_7 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "src/helpers/helpers.pyx":627
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):
 *         idx = rfa[isolute] + i             # <<<<<<<<<<<<<<
 *         if charges1[idx]==0:
 *             continue
 */
    __pyx_t_4 = __pyx_v_isolute;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
    __pyx_v_idx = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_i);

    /* "src/helpers/helpers.pyx":628
 *     for i in range(apr[isolute]):
 *         idx = rfa[isolute] + i
 *         if charges1[idx]==0:             # <<<<<<<<<<<<<<
 *             continue
 *         # loop over solvent molecules
 */
    __pyx_t_4 = __pyx_v_idx;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_charges1.shape[0];
    __pyx_t_10 = (((*((double *) ( /* dim=0 */ (__pyx_v_charges1.data + __pyx_t_4 * __pyx_v_charges1.strides[0]) ))) == 0.0) != 0);
    if (__pyx_t_10) {

      /* "src/helpers/helpers.pyx":629
 *         idx = rfa[isolute] + i
 *         if charges1[idx]==0:
 *             continue             # <<<<<<<<<<<<<<
 *         # loop over solvent molecules
 *         for j in range(nmol):
 */
      goto __pyx_L3_continue;

      /* "src/helpers/helpers.pyx":628
 *     for i in range(apr[isolute]):
 *         idx = rfa[isolute] + i
 *         if charges1[idx]==0:             # <<<<<<<<<<<<<<
 *             continue
 *         # loop over solvent molecules
 */
    }

    /* "src/helpers/helpers.pyx":631
 *             continue
 *         # loop over solvent molecules
 *         for j in range(nmol):             # <<<<<<<<<<<<<<
 *             if j == isolute or j < start or j > end:
 *                 continue
 */
    __pyx_t_11 = __pyx_v_nmol;
    __pyx_t_12 = __pyx_t_11;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_j = __pyx_t_13;

      /* "src/helpers/helpers.pyx":632
 *         # loop over solvent molecules
 *         for j in range(nmol):
 *             if j == isolute or j < start or j > end:             # <<<<<<<<<<<<<<
 *                 continue
 *             for k in range(apr[j]):
 */
      __pyx_t_14 = ((__pyx_v_j == __pyx_v_isolute) != 0);
      if (!__pyx_t_14) {
      } else {
        __pyx_t_10 = __pyx_t_14;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_14 = ((__pyx_v_j < __pyx_v_start) != 0);
      if (!__pyx_t_14) {
      } else {
        __pyx_t_10 = __pyx_t_14;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_14 = ((__pyx_v_j > __pyx_v_end) != 0);
      __pyx_t_10 = __pyx_t_14;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_10) {

        /* "src/helpers/helpers.pyx":633
 *         for j in range(nmol):
 *             if j == isolute or j < start or j > end:
 *                 continue             # <<<<<<<<<<<<<<
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 */
        goto __pyx_L6_continue;

        /* "src/helpers/helpers.pyx":632
 *         # loop over solvent molecules
 *         for j in range(nmol):
 *             if j == isolute or j < start or j > end:             # <<<<<<<<<<<<<<
 *                 continue
 *             for k in range(apr[j]):
 */
      }

      /* "src/helpers/helpers.pyx":634
 *             if j == isolute or j < start or j > end:
 *                 continue
 *             for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 */
      __pyx_t_4 = __pyx_v_j;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
      __pyx_t_15 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
      __pyx_t_16 = __pyx_t_15;
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "src/helpers/helpers.pyx":635
 *                 continue
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k             # <<<<<<<<<<<<<<
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 */
        __pyx_t_4 = __pyx_v_j;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
        __pyx_v_idx2 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_k);

        /* "src/helpers/helpers.pyx":636
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]             # <<<<<<<<<<<<<<
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_18 = 0;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_19 = __pyx_v_idx2;
        __pyx_t_20 = 0;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_v_dx = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":637
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]             # <<<<<<<<<<<<<<
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 */
        __pyx_t_20 = __pyx_v_idx;
        __pyx_t_19 = 1;
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[0];
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[1];
        __pyx_t_18 = __pyx_v_idx2;
        __pyx_t_4 = 1;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[0];
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[1];
        __pyx_v_dy = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_20 * __pyx_v_coor.strides[0]) ) + __pyx_t_19 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_18 * __pyx_v_coor.strides[0]) ) + __pyx_t_4 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":638
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]             # <<<<<<<<<<<<<<
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 epa1[i] += charges1[idx] * charges1[idx2] / r
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_18 = 2;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_19 = __pyx_v_idx2;
        __pyx_t_20 = 2;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_v_dz = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":639
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)             # <<<<<<<<<<<<<<
 *                 epa1[i] += charges1[idx] * charges1[idx2] / r
 * 
 */
        __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

        /* "src/helpers/helpers.pyx":640
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 epa1[i] += charges1[idx] * charges1[idx2] / r             # <<<<<<<<<<<<<<
 * 
 *     return np.asarray(epa1)[:] * 1390.02
 */
        __pyx_t_20 = __pyx_v_idx;
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_charges1.shape[0];
        __pyx_t_19 = __pyx_v_idx2;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_charges1.shape[0];
        __pyx_t_21 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges1.data + __pyx_t_20 * __pyx_v_charges1.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges1.data + __pyx_t_19 * __pyx_v_charges1.strides[0]) ))));
        if (unlikely(__pyx_v_r == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 640, __pyx_L1_error)
        }
        __pyx_t_19 = __pyx_v_i;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_epa1.shape[0];
        *((double *) ( /* dim=0 */ (__pyx_v_epa1.data + __pyx_t_19 * __pyx_v_epa1.strides[0]) )) += (__pyx_t_21 / __pyx_v_r);
      }
      __pyx_L6_continue:;
    }
    __pyx_L3_continue:;
  }

  /* "src/helpers/helpers.pyx":642
 *                 epa1[i] += charges1[idx] * charges1[idx2] / r
 * 
 *     return np.asarray(epa1)[:] * 1390.02             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_epa1, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice__2, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_float_1390_02); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":613
 * 
 * @cython.boundscheck(False)
 * def calcEnergyDouble(double [:,:] coor, double [:] charges1,  int [:] apr, int [:] rfa, int isolute, int nmol, int start, int end):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyDouble(xyz, charges_1, charges_2, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules,start_res,end_res)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyDouble", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_epa1, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges1, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":645
 * 
 * @cython.boundscheck(False)
 * def calcDipDipEnergyAtomic(double [:,:] coms, double [:,:] dipol,  int isolute, int nmol, int exclude_begin=-1, int exclude_end=-1):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcDipDipEnergyAtomic(coms, dipol, resnum_solute, nmolecules)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_35calcDipDipEnergyAtomic(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_34calcDipDipEnergyAtomic[] = "\n    energy = calcDipDipEnergyAtomic(coms, dipol, resnum_solute, nmolecules)\n\n    Calculates the atom-resolved solvation dipol-dipol energy of a solute in any solvent for a specific coordinate set.\n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_35calcDipDipEnergyAtomic = {"calcDipDipEnergyAtomic", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_35calcDipDipEnergyAtomic, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_34calcDipDipEnergyAtomic};
static PyObject *__pyx_pw_11newanalysis_7helpers_35calcDipDipEnergyAtomic(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coms = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_dipol = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_isolute;
  int __pyx_v_nmol;
  int __pyx_v_exclude_begin;
  int __pyx_v_exclude_end;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcDipDipEnergyAtomic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coms,&__pyx_n_s_dipol,&__pyx_n_s_isolute,&__pyx_n_s_nmol,&__pyx_n_s_exclude_begin,&__pyx_n_s_exclude_end,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coms)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dipol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcDipDipEnergyAtomic", 0, 4, 6, 1); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcDipDipEnergyAtomic", 0, 4, 6, 2); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nmol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcDipDipEnergyAtomic", 0, 4, 6, 3); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exclude_begin);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exclude_end);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcDipDipEnergyAtomic") < 0)) __PYX_ERR(0, 645, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coms = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coms.memview)) __PYX_ERR(0, 645, __pyx_L3_error)
    __pyx_v_dipol = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_dipol.memview)) __PYX_ERR(0, 645, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
    __pyx_v_nmol = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nmol == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_exclude_begin = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_exclude_begin == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
    } else {
      __pyx_v_exclude_begin = ((int)-1);
    }
    if (values[5]) {
      __pyx_v_exclude_end = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_exclude_end == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
    } else {
      __pyx_v_exclude_end = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcDipDipEnergyAtomic", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 645, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcDipDipEnergyAtomic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_34calcDipDipEnergyAtomic(__pyx_self, __pyx_v_coms, __pyx_v_dipol, __pyx_v_isolute, __pyx_v_nmol, __pyx_v_exclude_begin, __pyx_v_exclude_end);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_34calcDipDipEnergyAtomic(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coms, __Pyx_memviewslice __pyx_v_dipol, int __pyx_v_isolute, int __pyx_v_nmol, int __pyx_v_exclude_begin, int __pyx_v_exclude_end) {
  int __pyx_v_i;
  double __pyx_v_edip;
  double __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  double __pyx_t_18;
  double __pyx_t_19;
  double __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  PyObject *__pyx_t_33 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcDipDipEnergyAtomic", 0);

  /* "src/helpers/helpers.pyx":656
 * 
 *     # loop over solvent molecules
 *     for i in range(nmol):             # <<<<<<<<<<<<<<
 *         if i == isolute or (i >= exclude_begin and i < exclude_end):
 *             continue
 */
  __pyx_t_1 = __pyx_v_nmol;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "src/helpers/helpers.pyx":657
 *     # loop over solvent molecules
 *     for i in range(nmol):
 *         if i == isolute or (i >= exclude_begin and i < exclude_end):             # <<<<<<<<<<<<<<
 *             continue
 *         r=sqrt(coms[i,0]*coms[i,0]+coms[i,1]*coms[i,1]+coms[i,2]*coms[i,2])
 */
    __pyx_t_5 = ((__pyx_v_i == __pyx_v_isolute) != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = ((__pyx_v_i >= __pyx_v_exclude_begin) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = ((__pyx_v_i < __pyx_v_exclude_end) != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_4) {

      /* "src/helpers/helpers.pyx":658
 *     for i in range(nmol):
 *         if i == isolute or (i >= exclude_begin and i < exclude_end):
 *             continue             # <<<<<<<<<<<<<<
 *         r=sqrt(coms[i,0]*coms[i,0]+coms[i,1]*coms[i,1]+coms[i,2]*coms[i,2])
 *         edip+=(dipol[0,0]*dipol[i,0]+dipol[0,1]*dipol[i,1]+dipol[0,2]*dipol[i,2])/(r*r*r)-3/(r*r*r*r*r)*(dipol[0,0]*coms[i,0]+dipol[0,1]*coms[i,1]+dipol[0,2]*coms[i,2])*(dipol[i,0]*coms[i,0]+dipol[i,1]*coms[i,1]+dipol[i,2]*coms[i,2])
 */
      goto __pyx_L3_continue;

      /* "src/helpers/helpers.pyx":657
 *     # loop over solvent molecules
 *     for i in range(nmol):
 *         if i == isolute or (i >= exclude_begin and i < exclude_end):             # <<<<<<<<<<<<<<
 *             continue
 *         r=sqrt(coms[i,0]*coms[i,0]+coms[i,1]*coms[i,1]+coms[i,2]*coms[i,2])
 */
    }

    /* "src/helpers/helpers.pyx":659
 *         if i == isolute or (i >= exclude_begin and i < exclude_end):
 *             continue
 *         r=sqrt(coms[i,0]*coms[i,0]+coms[i,1]*coms[i,1]+coms[i,2]*coms[i,2])             # <<<<<<<<<<<<<<
 *         edip+=(dipol[0,0]*dipol[i,0]+dipol[0,1]*dipol[i,1]+dipol[0,2]*dipol[i,2])/(r*r*r)-3/(r*r*r*r*r)*(dipol[0,0]*coms[i,0]+dipol[0,1]*coms[i,1]+dipol[0,2]*coms[i,2])*(dipol[i,0]*coms[i,0]+dipol[i,1]*coms[i,1]+dipol[i,2]*coms[i,2])
 * 
 */
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_7 = 0;
    if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_coms.shape[0];
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_coms.shape[1];
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = 0;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coms.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coms.shape[1];
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = 1;
    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coms.shape[0];
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coms.shape[1];
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 1;
    if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coms.shape[0];
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coms.shape[1];
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_15 = 2;
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coms.shape[0];
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coms.shape[1];
    __pyx_t_16 = __pyx_v_i;
    __pyx_t_17 = 2;
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coms.shape[0];
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coms.shape[1];
    __pyx_v_r = sqrt(((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_6 * __pyx_v_coms.strides[0]) ) + __pyx_t_7 * __pyx_v_coms.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_8 * __pyx_v_coms.strides[0]) ) + __pyx_t_9 * __pyx_v_coms.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_10 * __pyx_v_coms.strides[0]) ) + __pyx_t_11 * __pyx_v_coms.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_12 * __pyx_v_coms.strides[0]) ) + __pyx_t_13 * __pyx_v_coms.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_14 * __pyx_v_coms.strides[0]) ) + __pyx_t_15 * __pyx_v_coms.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_16 * __pyx_v_coms.strides[0]) ) + __pyx_t_17 * __pyx_v_coms.strides[1]) ))))));

    /* "src/helpers/helpers.pyx":660
 *             continue
 *         r=sqrt(coms[i,0]*coms[i,0]+coms[i,1]*coms[i,1]+coms[i,2]*coms[i,2])
 *         edip+=(dipol[0,0]*dipol[i,0]+dipol[0,1]*dipol[i,1]+dipol[0,2]*dipol[i,2])/(r*r*r)-3/(r*r*r*r*r)*(dipol[0,0]*coms[i,0]+dipol[0,1]*coms[i,1]+dipol[0,2]*coms[i,2])*(dipol[i,0]*coms[i,0]+dipol[i,1]*coms[i,1]+dipol[i,2]*coms[i,2])             # <<<<<<<<<<<<<<
 * 
 *     return edip * 1390.02
 */
    __pyx_t_17 = 0;
    __pyx_t_16 = 0;
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_dipol.shape[0];
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_dipol.shape[1];
    __pyx_t_15 = __pyx_v_i;
    __pyx_t_14 = 0;
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_dipol.shape[0];
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_dipol.shape[1];
    __pyx_t_13 = 0;
    __pyx_t_12 = 1;
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_dipol.shape[0];
    if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_dipol.shape[1];
    __pyx_t_11 = __pyx_v_i;
    __pyx_t_10 = 1;
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_dipol.shape[0];
    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_dipol.shape[1];
    __pyx_t_9 = 0;
    __pyx_t_8 = 2;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_dipol.shape[0];
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_dipol.shape[1];
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_6 = 2;
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_dipol.shape[0];
    if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_dipol.shape[1];
    __pyx_t_18 = ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_17 * __pyx_v_dipol.strides[0]) ) + __pyx_t_16 * __pyx_v_dipol.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_15 * __pyx_v_dipol.strides[0]) ) + __pyx_t_14 * __pyx_v_dipol.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_13 * __pyx_v_dipol.strides[0]) ) + __pyx_t_12 * __pyx_v_dipol.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_11 * __pyx_v_dipol.strides[0]) ) + __pyx_t_10 * __pyx_v_dipol.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_9 * __pyx_v_dipol.strides[0]) ) + __pyx_t_8 * __pyx_v_dipol.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_7 * __pyx_v_dipol.strides[0]) ) + __pyx_t_6 * __pyx_v_dipol.strides[1]) )))));
    __pyx_t_19 = ((__pyx_v_r * __pyx_v_r) * __pyx_v_r);
    if (unlikely(__pyx_t_19 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 660, __pyx_L1_error)
    }
    __pyx_t_20 = ((((__pyx_v_r * __pyx_v_r) * __pyx_v_r) * __pyx_v_r) * __pyx_v_r);
    if (unlikely(__pyx_t_20 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 660, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_dipol.shape[0];
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_dipol.shape[1];
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = 0;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coms.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coms.shape[1];
    __pyx_t_10 = 0;
    __pyx_t_11 = 1;
    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_dipol.shape[0];
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_dipol.shape[1];
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 1;
    if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coms.shape[0];
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coms.shape[1];
    __pyx_t_14 = 0;
    __pyx_t_15 = 2;
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_dipol.shape[0];
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_dipol.shape[1];
    __pyx_t_16 = __pyx_v_i;
    __pyx_t_17 = 2;
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coms.shape[0];
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_coms.shape[1];
    __pyx_t_21 = __pyx_v_i;
    __pyx_t_22 = 0;
    if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_dipol.shape[0];
    if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_dipol.shape[1];
    __pyx_t_23 = __pyx_v_i;
    __pyx_t_24 = 0;
    if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_coms.shape[0];
    if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_coms.shape[1];
    __pyx_t_25 = __pyx_v_i;
    __pyx_t_26 = 1;
    if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_dipol.shape[0];
    if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_dipol.shape[1];
    __pyx_t_27 = __pyx_v_i;
    __pyx_t_28 = 1;
    if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_coms.shape[0];
    if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_coms.shape[1];
    __pyx_t_29 = __pyx_v_i;
    __pyx_t_30 = 2;
    if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_dipol.shape[0];
    if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_v_dipol.shape[1];
    __pyx_t_31 = __pyx_v_i;
    __pyx_t_32 = 2;
    if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_v_coms.shape[0];
    if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_v_coms.shape[1];
    __pyx_v_edip = (__pyx_v_edip + ((__pyx_t_18 / __pyx_t_19) - (((3.0 / __pyx_t_20) * ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_6 * __pyx_v_dipol.strides[0]) ) + __pyx_t_7 * __pyx_v_dipol.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_8 * __pyx_v_coms.strides[0]) ) + __pyx_t_9 * __pyx_v_coms.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_10 * __pyx_v_dipol.strides[0]) ) + __pyx_t_11 * __pyx_v_dipol.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_12 * __pyx_v_coms.strides[0]) ) + __pyx_t_13 * __pyx_v_coms.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_14 * __pyx_v_dipol.strides[0]) ) + __pyx_t_15 * __pyx_v_dipol.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_16 * __pyx_v_coms.strides[0]) ) + __pyx_t_17 * __pyx_v_coms.strides[1]) )))))) * ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_21 * __pyx_v_dipol.strides[0]) ) + __pyx_t_22 * __pyx_v_dipol.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_23 * __pyx_v_coms.strides[0]) ) + __pyx_t_24 * __pyx_v_coms.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_25 * __pyx_v_dipol.strides[0]) ) + __pyx_t_26 * __pyx_v_dipol.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_27 * __pyx_v_coms.strides[0]) ) + __pyx_t_28 * __pyx_v_coms.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dipol.data + __pyx_t_29 * __pyx_v_dipol.strides[0]) ) + __pyx_t_30 * __pyx_v_dipol.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coms.data + __pyx_t_31 * __pyx_v_coms.strides[0]) ) + __pyx_t_32 * __pyx_v_coms.strides[1]) ))))))));
    __pyx_L3_continue:;
  }

  /* "src/helpers/helpers.pyx":662
 *         edip+=(dipol[0,0]*dipol[i,0]+dipol[0,1]*dipol[i,1]+dipol[0,2]*dipol[i,2])/(r*r*r)-3/(r*r*r*r*r)*(dipol[0,0]*coms[i,0]+dipol[0,1]*coms[i,1]+dipol[0,2]*coms[i,2])*(dipol[i,0]*coms[i,0]+dipol[i,1]*coms[i,1]+dipol[i,2]*coms[i,2])
 * 
 *     return edip * 1390.02             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_33 = PyFloat_FromDouble((__pyx_v_edip * 1390.02)); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __pyx_r = __pyx_t_33;
  __pyx_t_33 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":645
 * 
 * @cython.boundscheck(False)
 * def calcDipDipEnergyAtomic(double [:,:] coms, double [:,:] dipol,  int isolute, int nmol, int exclude_begin=-1, int exclude_end=-1):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcDipDipEnergyAtomic(coms, dipol, resnum_solute, nmolecules)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_33);
  __Pyx_AddTraceback("newanalysis.helpers.calcDipDipEnergyAtomic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_coms, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_dipol, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":666
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAtomicVoro(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, char [:] ds, int maxshell):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAtomic(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, delaunay_shell)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_37calcEnergyAtomicVoro(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_36calcEnergyAtomicVoro[] = "\n    energy = calcEnergyAtomic(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, delaunay_shell)\n\n    Calculates the atom+shell-resolved solvation energy of a solute in any solvent for a specific coordinate set.\n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_37calcEnergyAtomicVoro = {"calcEnergyAtomicVoro", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_37calcEnergyAtomicVoro, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_36calcEnergyAtomicVoro};
static PyObject *__pyx_pw_11newanalysis_7helpers_37calcEnergyAtomicVoro(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_charges = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_apr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rfa = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_isolute;
  int __pyx_v_nmol;
  __Pyx_memviewslice __pyx_v_ds = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_maxshell;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEnergyAtomicVoro (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_charges,&__pyx_n_s_apr,&__pyx_n_s_rfa,&__pyx_n_s_isolute,&__pyx_n_s_nmol,&__pyx_n_s_ds,&__pyx_n_s_maxshell,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomicVoro", 1, 8, 8, 1); __PYX_ERR(0, 666, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomicVoro", 1, 8, 8, 2); __PYX_ERR(0, 666, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rfa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomicVoro", 1, 8, 8, 3); __PYX_ERR(0, 666, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomicVoro", 1, 8, 8, 4); __PYX_ERR(0, 666, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nmol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomicVoro", 1, 8, 8, 5); __PYX_ERR(0, 666, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomicVoro", 1, 8, 8, 6); __PYX_ERR(0, 666, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxshell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAtomicVoro", 1, 8, 8, 7); __PYX_ERR(0, 666, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEnergyAtomicVoro") < 0)) __PYX_ERR(0, 666, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 666, __pyx_L3_error)
    __pyx_v_charges = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_charges.memview)) __PYX_ERR(0, 666, __pyx_L3_error)
    __pyx_v_apr = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_apr.memview)) __PYX_ERR(0, 666, __pyx_L3_error)
    __pyx_v_rfa = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rfa.memview)) __PYX_ERR(0, 666, __pyx_L3_error)
    __pyx_v_isolute = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_isolute == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 666, __pyx_L3_error)
    __pyx_v_nmol = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nmol == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 666, __pyx_L3_error)
    __pyx_v_ds = __Pyx_PyObject_to_MemoryviewSlice_ds_char(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_ds.memview)) __PYX_ERR(0, 666, __pyx_L3_error)
    __pyx_v_maxshell = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_maxshell == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 666, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEnergyAtomicVoro", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 666, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAtomicVoro", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_36calcEnergyAtomicVoro(__pyx_self, __pyx_v_coor, __pyx_v_charges, __pyx_v_apr, __pyx_v_rfa, __pyx_v_isolute, __pyx_v_nmol, __pyx_v_ds, __pyx_v_maxshell);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_36calcEnergyAtomicVoro(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_charges, __Pyx_memviewslice __pyx_v_apr, __Pyx_memviewslice __pyx_v_rfa, int __pyx_v_isolute, int __pyx_v_nmol, __Pyx_memviewslice __pyx_v_ds, int __pyx_v_maxshell) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_idx;
  int __pyx_v_idx2;
  __Pyx_memviewslice __pyx_v_epa = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  double __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcEnergyAtomicVoro", 0);

  /* "src/helpers/helpers.pyx":674
 *     """
 *     cdef int i, j, k, idx, idx2
 *     cdef double [:,:] epa = np.zeros((apr[isolute],maxshell+1))             # <<<<<<<<<<<<<<
 *     cdef double dx, dy, dz, r
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_2 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_maxshell + 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_epa = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "src/helpers/helpers.pyx":679
 *     # loop over solute atoms
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):             # <<<<<<<<<<<<<<
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 */
  __pyx_t_4 = __pyx_v_isolute;
  if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
  __pyx_t_8 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "src/helpers/helpers.pyx":680
 * #    for i in prange(apr[isolute], nogil=True):
 *     for i in range(apr[isolute]):
 *         idx = rfa[isolute] + i             # <<<<<<<<<<<<<<
 *         # loop over solvent molecules
 *         for j in range(nmol):
 */
    __pyx_t_4 = __pyx_v_isolute;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
    __pyx_v_idx = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_i);

    /* "src/helpers/helpers.pyx":682
 *         idx = rfa[isolute] + i
 *         # loop over solvent molecules
 *         for j in range(nmol):             # <<<<<<<<<<<<<<
 *             if j == isolute:
 *                 continue
 */
    __pyx_t_11 = __pyx_v_nmol;
    __pyx_t_12 = __pyx_t_11;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_j = __pyx_t_13;

      /* "src/helpers/helpers.pyx":683
 *         # loop over solvent molecules
 *         for j in range(nmol):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             for k in range(apr[j]):
 */
      __pyx_t_14 = ((__pyx_v_j == __pyx_v_isolute) != 0);
      if (__pyx_t_14) {

        /* "src/helpers/helpers.pyx":684
 *         for j in range(nmol):
 *             if j == isolute:
 *                 continue             # <<<<<<<<<<<<<<
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 */
        goto __pyx_L5_continue;

        /* "src/helpers/helpers.pyx":683
 *         # loop over solvent molecules
 *         for j in range(nmol):
 *             if j == isolute:             # <<<<<<<<<<<<<<
 *                 continue
 *             for k in range(apr[j]):
 */
      }

      /* "src/helpers/helpers.pyx":685
 *             if j == isolute:
 *                 continue
 *             for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 */
      __pyx_t_4 = __pyx_v_j;
      if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_apr.shape[0];
      __pyx_t_15 = (*((int *) ( /* dim=0 */ (__pyx_v_apr.data + __pyx_t_4 * __pyx_v_apr.strides[0]) )));
      __pyx_t_16 = __pyx_t_15;
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "src/helpers/helpers.pyx":686
 *                 continue
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k             # <<<<<<<<<<<<<<
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 */
        __pyx_t_4 = __pyx_v_j;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_rfa.shape[0];
        __pyx_v_idx2 = ((*((int *) ( /* dim=0 */ (__pyx_v_rfa.data + __pyx_t_4 * __pyx_v_rfa.strides[0]) ))) + __pyx_v_k);

        /* "src/helpers/helpers.pyx":687
 *             for k in range(apr[j]):
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]             # <<<<<<<<<<<<<<
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_18 = 0;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_19 = __pyx_v_idx2;
        __pyx_t_20 = 0;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_v_dx = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":688
 *                 idx2 = rfa[j] + k
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]             # <<<<<<<<<<<<<<
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 */
        __pyx_t_20 = __pyx_v_idx;
        __pyx_t_19 = 1;
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[0];
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[1];
        __pyx_t_18 = __pyx_v_idx2;
        __pyx_t_4 = 1;
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[0];
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[1];
        __pyx_v_dy = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_20 * __pyx_v_coor.strides[0]) ) + __pyx_t_19 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_18 * __pyx_v_coor.strides[0]) ) + __pyx_t_4 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":689
 *                 dx = coor[idx,0] - coor[idx2,0]
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]             # <<<<<<<<<<<<<<
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 if ds[j-1] > maxshell:
 */
        __pyx_t_4 = __pyx_v_idx;
        __pyx_t_18 = 2;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_coor.shape[1];
        __pyx_t_19 = __pyx_v_idx2;
        __pyx_t_20 = 2;
        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor.shape[0];
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor.shape[1];
        __pyx_v_dz = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_18 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_19 * __pyx_v_coor.strides[0]) ) + __pyx_t_20 * __pyx_v_coor.strides[1]) ))));

        /* "src/helpers/helpers.pyx":690
 *                 dy = coor[idx,1] - coor[idx2,1]
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)             # <<<<<<<<<<<<<<
 *                 if ds[j-1] > maxshell:
 *                     epa[i,maxshell] += charges[idx] * charges[idx2] / r
 */
        __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

        /* "src/helpers/helpers.pyx":691
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 if ds[j-1] > maxshell:             # <<<<<<<<<<<<<<
 *                     epa[i,maxshell] += charges[idx] * charges[idx2] / r
 *                 else:
 */
        __pyx_t_20 = (__pyx_v_j - 1);
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_ds.shape[0];
        __pyx_t_14 = (((*((char *) ( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_20 * __pyx_v_ds.strides[0]) ))) > __pyx_v_maxshell) != 0);
        if (__pyx_t_14) {

          /* "src/helpers/helpers.pyx":692
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 if ds[j-1] > maxshell:
 *                     epa[i,maxshell] += charges[idx] * charges[idx2] / r             # <<<<<<<<<<<<<<
 *                 else:
 *                     epa[i,ds[j-1]-1] += charges[idx] * charges[idx2] / r
 */
          __pyx_t_20 = __pyx_v_idx;
          if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_charges.shape[0];
          __pyx_t_19 = __pyx_v_idx2;
          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_charges.shape[0];
          __pyx_t_21 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_20 * __pyx_v_charges.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_19 * __pyx_v_charges.strides[0]) ))));
          if (unlikely(__pyx_v_r == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 692, __pyx_L1_error)
          }
          __pyx_t_19 = __pyx_v_i;
          __pyx_t_20 = __pyx_v_maxshell;
          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_epa.shape[0];
          if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_epa.shape[1];
          *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_epa.data + __pyx_t_19 * __pyx_v_epa.strides[0]) ) + __pyx_t_20 * __pyx_v_epa.strides[1]) )) += (__pyx_t_21 / __pyx_v_r);

          /* "src/helpers/helpers.pyx":691
 *                 dz = coor[idx,2] - coor[idx2,2]
 *                 r  = sqrt(dx*dx + dy*dy + dz*dz)
 *                 if ds[j-1] > maxshell:             # <<<<<<<<<<<<<<
 *                     epa[i,maxshell] += charges[idx] * charges[idx2] / r
 *                 else:
 */
          goto __pyx_L10;
        }

        /* "src/helpers/helpers.pyx":694
 *                     epa[i,maxshell] += charges[idx] * charges[idx2] / r
 *                 else:
 *                     epa[i,ds[j-1]-1] += charges[idx] * charges[idx2] / r             # <<<<<<<<<<<<<<
 * 
 *     return np.asarray(epa)[:,:] * 1390.02
 */
        /*else*/ {
          __pyx_t_20 = __pyx_v_idx;
          if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_charges.shape[0];
          __pyx_t_19 = __pyx_v_idx2;
          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_charges.shape[0];
          __pyx_t_21 = ((*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_20 * __pyx_v_charges.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_charges.data + __pyx_t_19 * __pyx_v_charges.strides[0]) ))));
          if (unlikely(__pyx_v_r == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 694, __pyx_L1_error)
          }
          __pyx_t_19 = (__pyx_v_j - 1);
          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_ds.shape[0];
          __pyx_t_20 = __pyx_v_i;
          __pyx_t_18 = ((*((char *) ( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_19 * __pyx_v_ds.strides[0]) ))) - 1);
          if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_epa.shape[0];
          if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_epa.shape[1];
          *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_epa.data + __pyx_t_20 * __pyx_v_epa.strides[0]) ) + __pyx_t_18 * __pyx_v_epa.strides[1]) )) += (__pyx_t_21 / __pyx_v_r);
        }
        __pyx_L10:;
      }
      __pyx_L5_continue:;
    }
  }

  /* "src/helpers/helpers.pyx":696
 *                     epa[i,ds[j-1]-1] += charges[idx] * charges[idx2] / r
 * 
 *     return np.asarray(epa)[:,:] * 1390.02             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_epa, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_tuple__3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_6, __pyx_float_1390_02); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":666
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAtomicVoro(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, char [:] ds, int maxshell):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAtomic(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, delaunay_shell)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAtomicVoro", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_epa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_charges, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_apr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rfa, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":699
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAASep(np.ndarray[np.float64_t,ndim=2,mode="c"] xyz,             # <<<<<<<<<<<<<<
 *                  np.ndarray[np.float64_t,ndim=1] charges,
 *                  np.ndarray[np.int32_t,ndim=1,mode="c"] atoms_per_residue,
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_39calcEnergyAASep(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_38calcEnergyAASep[] = "\n    energy, energy_xyz, energy_octant = calcEnergyAA(xyz, charges, atoms_per_residue, residue_first_atom, \n                                                     ds, octants, isolute, nmolecules,\n                                                     cat_first, cat_last, an_first, an_last, octants=None)\n\n    Calculates the solvation energy of a solute in an ionic liquid for a given frame.\n    The data is returned in three decompositions:\n        -) Voronoi shell-resolved\n        -) x/y/z axis-resolved\n        -) octant-resolved for the first shell\n    \n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_39calcEnergyAASep = {"calcEnergyAASep", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_39calcEnergyAASep, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_38calcEnergyAASep};
static PyObject *__pyx_pw_11newanalysis_7helpers_39calcEnergyAASep(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_xyz = 0;
  PyArrayObject *__pyx_v_charges = 0;
  PyArrayObject *__pyx_v_atoms_per_residue = 0;
  PyArrayObject *__pyx_v_residue_first_atom = 0;
  PyArrayObject *__pyx_v_ds = 0;
  PyObject *__pyx_v_isolute = 0;
  PyObject *__pyx_v_nmolecules = 0;
  PyObject *__pyx_v_cat_first = 0;
  PyObject *__pyx_v_cat_last = 0;
  PyObject *__pyx_v_an_first = 0;
  PyObject *__pyx_v_an_last = 0;
  PyArrayObject *__pyx_v_octants = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEnergyAASep (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xyz,&__pyx_n_s_charges,&__pyx_n_s_atoms_per_residue,&__pyx_n_s_residue_first_atom,&__pyx_n_s_ds,&__pyx_n_s_isolute,&__pyx_n_s_nmolecules,&__pyx_n_s_cat_first,&__pyx_n_s_cat_last,&__pyx_n_s_an_first,&__pyx_n_s_an_last,&__pyx_n_s_octants,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};

    /* "src/helpers/helpers.pyx":705
 *                  np.ndarray[np.int32_t,ndim=2,mode="c"] ds,
 *                  isolute, nmolecules, cat_first, cat_last, an_first, an_last,
 *                  np.ndarray[np.int32_t, ndim=1] octants=None):             # <<<<<<<<<<<<<<
 *     """
 *     energy, energy_xyz, energy_octant = calcEnergyAA(xyz, charges, atoms_per_residue, residue_first_atom,
 */
    values[11] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xyz)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, 1); __PYX_ERR(0, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atoms_per_residue)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, 2); __PYX_ERR(0, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_residue_first_atom)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, 3); __PYX_ERR(0, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, 4); __PYX_ERR(0, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, 5); __PYX_ERR(0, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nmolecules)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, 6); __PYX_ERR(0, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cat_first)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, 7); __PYX_ERR(0, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cat_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, 8); __PYX_ERR(0, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_an_first)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, 9); __PYX_ERR(0, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_an_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, 10); __PYX_ERR(0, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_octants);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEnergyAASep") < 0)) __PYX_ERR(0, 699, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_xyz = ((PyArrayObject *)values[0]);
    __pyx_v_charges = ((PyArrayObject *)values[1]);
    __pyx_v_atoms_per_residue = ((PyArrayObject *)values[2]);
    __pyx_v_residue_first_atom = ((PyArrayObject *)values[3]);
    __pyx_v_ds = ((PyArrayObject *)values[4]);
    __pyx_v_isolute = values[5];
    __pyx_v_nmolecules = values[6];
    __pyx_v_cat_first = values[7];
    __pyx_v_cat_last = values[8];
    __pyx_v_an_first = values[9];
    __pyx_v_an_last = values[10];
    __pyx_v_octants = ((PyArrayObject *)values[11]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEnergyAASep", 0, 11, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 699, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAASep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xyz), __pyx_ptype_5numpy_ndarray, 1, "xyz", 0))) __PYX_ERR(0, 699, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_charges), __pyx_ptype_5numpy_ndarray, 1, "charges", 0))) __PYX_ERR(0, 700, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_atoms_per_residue), __pyx_ptype_5numpy_ndarray, 1, "atoms_per_residue", 0))) __PYX_ERR(0, 701, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_residue_first_atom), __pyx_ptype_5numpy_ndarray, 1, "residue_first_atom", 0))) __PYX_ERR(0, 702, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ds), __pyx_ptype_5numpy_ndarray, 1, "ds", 0))) __PYX_ERR(0, 703, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_octants), __pyx_ptype_5numpy_ndarray, 1, "octants", 0))) __PYX_ERR(0, 705, __pyx_L1_error)
  __pyx_r = __pyx_pf_11newanalysis_7helpers_38calcEnergyAASep(__pyx_self, __pyx_v_xyz, __pyx_v_charges, __pyx_v_atoms_per_residue, __pyx_v_residue_first_atom, __pyx_v_ds, __pyx_v_isolute, __pyx_v_nmolecules, __pyx_v_cat_first, __pyx_v_cat_last, __pyx_v_an_first, __pyx_v_an_last, __pyx_v_octants);

  /* "src/helpers/helpers.pyx":699
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAASep(np.ndarray[np.float64_t,ndim=2,mode="c"] xyz,             # <<<<<<<<<<<<<<
 *                  np.ndarray[np.float64_t,ndim=1] charges,
 *                  np.ndarray[np.int32_t,ndim=1,mode="c"] atoms_per_residue,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_38calcEnergyAASep(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_xyz, PyArrayObject *__pyx_v_charges, PyArrayObject *__pyx_v_atoms_per_residue, PyArrayObject *__pyx_v_residue_first_atom, PyArrayObject *__pyx_v_ds, PyObject *__pyx_v_isolute, PyObject *__pyx_v_nmolecules, PyObject *__pyx_v_cat_first, PyObject *__pyx_v_cat_last, PyObject *__pyx_v_an_first, PyObject *__pyx_v_an_last, PyArrayObject *__pyx_v_octants) {
  double *__pyx_v_cxyz;
  double *__pyx_v_q;
  int *__pyx_v_apr;
  int *__pyx_v_rfa;
  int *__pyx_v_coct;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_idx;
  int __pyx_v_idx2;
  int __pyx_v_idx3;
  int __pyx_v_nmol;
  int __pyx_v_islt;
  PyArrayObject *__pyx_v_energy_per_atom = 0;
  double *__pyx_v_epa;
  PyArrayObject *__pyx_v_energy_xyz_per_atom = 0;
  double *__pyx_v_epa_xyz;
  PyArrayObject *__pyx_v_energy_octant_per_atom = 0;
  double *__pyx_v_epa_oct;
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_r;
  double __pyx_v_qqr;
  int __pyx_v_c1;
  int __pyx_v_c2;
  int __pyx_v_a1;
  int __pyx_v_a2;
  int *__pyx_v_cds;
  PyArrayObject *__pyx_v_energy = 0;
  PyArrayObject *__pyx_v_energy_xyz = 0;
  PyArrayObject *__pyx_v_energy_octant = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_atoms_per_residue;
  __Pyx_Buffer __pyx_pybuffer_atoms_per_residue;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_charges;
  __Pyx_Buffer __pyx_pybuffer_charges;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ds;
  __Pyx_Buffer __pyx_pybuffer_ds;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_energy;
  __Pyx_Buffer __pyx_pybuffer_energy;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_energy_octant;
  __Pyx_Buffer __pyx_pybuffer_energy_octant;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_energy_octant_per_atom;
  __Pyx_Buffer __pyx_pybuffer_energy_octant_per_atom;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_energy_per_atom;
  __Pyx_Buffer __pyx_pybuffer_energy_per_atom;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_energy_xyz;
  __Pyx_Buffer __pyx_pybuffer_energy_xyz;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_energy_xyz_per_atom;
  __Pyx_Buffer __pyx_pybuffer_energy_xyz_per_atom;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_octants;
  __Pyx_Buffer __pyx_pybuffer_octants;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_residue_first_atom;
  __Pyx_Buffer __pyx_pybuffer_residue_first_atom;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_xyz;
  __Pyx_Buffer __pyx_pybuffer_xyz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  double __pyx_t_22;
  long __pyx_t_23;
  double __pyx_t_24;
  int __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcEnergyAASep", 0);
  __pyx_pybuffer_energy_per_atom.pybuffer.buf = NULL;
  __pyx_pybuffer_energy_per_atom.refcount = 0;
  __pyx_pybuffernd_energy_per_atom.data = NULL;
  __pyx_pybuffernd_energy_per_atom.rcbuffer = &__pyx_pybuffer_energy_per_atom;
  __pyx_pybuffer_energy_xyz_per_atom.pybuffer.buf = NULL;
  __pyx_pybuffer_energy_xyz_per_atom.refcount = 0;
  __pyx_pybuffernd_energy_xyz_per_atom.data = NULL;
  __pyx_pybuffernd_energy_xyz_per_atom.rcbuffer = &__pyx_pybuffer_energy_xyz_per_atom;
  __pyx_pybuffer_energy_octant_per_atom.pybuffer.buf = NULL;
  __pyx_pybuffer_energy_octant_per_atom.refcount = 0;
  __pyx_pybuffernd_energy_octant_per_atom.data = NULL;
  __pyx_pybuffernd_energy_octant_per_atom.rcbuffer = &__pyx_pybuffer_energy_octant_per_atom;
  __pyx_pybuffer_energy.pybuffer.buf = NULL;
  __pyx_pybuffer_energy.refcount = 0;
  __pyx_pybuffernd_energy.data = NULL;
  __pyx_pybuffernd_energy.rcbuffer = &__pyx_pybuffer_energy;
  __pyx_pybuffer_energy_xyz.pybuffer.buf = NULL;
  __pyx_pybuffer_energy_xyz.refcount = 0;
  __pyx_pybuffernd_energy_xyz.data = NULL;
  __pyx_pybuffernd_energy_xyz.rcbuffer = &__pyx_pybuffer_energy_xyz;
  __pyx_pybuffer_energy_octant.pybuffer.buf = NULL;
  __pyx_pybuffer_energy_octant.refcount = 0;
  __pyx_pybuffernd_energy_octant.data = NULL;
  __pyx_pybuffernd_energy_octant.rcbuffer = &__pyx_pybuffer_energy_octant;
  __pyx_pybuffer_xyz.pybuffer.buf = NULL;
  __pyx_pybuffer_xyz.refcount = 0;
  __pyx_pybuffernd_xyz.data = NULL;
  __pyx_pybuffernd_xyz.rcbuffer = &__pyx_pybuffer_xyz;
  __pyx_pybuffer_charges.pybuffer.buf = NULL;
  __pyx_pybuffer_charges.refcount = 0;
  __pyx_pybuffernd_charges.data = NULL;
  __pyx_pybuffernd_charges.rcbuffer = &__pyx_pybuffer_charges;
  __pyx_pybuffer_atoms_per_residue.pybuffer.buf = NULL;
  __pyx_pybuffer_atoms_per_residue.refcount = 0;
  __pyx_pybuffernd_atoms_per_residue.data = NULL;
  __pyx_pybuffernd_atoms_per_residue.rcbuffer = &__pyx_pybuffer_atoms_per_residue;
  __pyx_pybuffer_residue_first_atom.pybuffer.buf = NULL;
  __pyx_pybuffer_residue_first_atom.refcount = 0;
  __pyx_pybuffernd_residue_first_atom.data = NULL;
  __pyx_pybuffernd_residue_first_atom.rcbuffer = &__pyx_pybuffer_residue_first_atom;
  __pyx_pybuffer_ds.pybuffer.buf = NULL;
  __pyx_pybuffer_ds.refcount = 0;
  __pyx_pybuffernd_ds.data = NULL;
  __pyx_pybuffernd_ds.rcbuffer = &__pyx_pybuffer_ds;
  __pyx_pybuffer_octants.pybuffer.buf = NULL;
  __pyx_pybuffer_octants.refcount = 0;
  __pyx_pybuffernd_octants.data = NULL;
  __pyx_pybuffernd_octants.rcbuffer = &__pyx_pybuffer_octants;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_xyz.rcbuffer->pybuffer, (PyObject*)__pyx_v_xyz, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 699, __pyx_L1_error)
  }
  __pyx_pybuffernd_xyz.diminfo[0].strides = __pyx_pybuffernd_xyz.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_xyz.diminfo[0].shape = __pyx_pybuffernd_xyz.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_xyz.diminfo[1].strides = __pyx_pybuffernd_xyz.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_xyz.diminfo[1].shape = __pyx_pybuffernd_xyz.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 699, __pyx_L1_error)
  }
  __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_atoms_per_residue.rcbuffer->pybuffer, (PyObject*)__pyx_v_atoms_per_residue, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 699, __pyx_L1_error)
  }
  __pyx_pybuffernd_atoms_per_residue.diminfo[0].strides = __pyx_pybuffernd_atoms_per_residue.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_atoms_per_residue.diminfo[0].shape = __pyx_pybuffernd_atoms_per_residue.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_residue_first_atom.rcbuffer->pybuffer, (PyObject*)__pyx_v_residue_first_atom, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 699, __pyx_L1_error)
  }
  __pyx_pybuffernd_residue_first_atom.diminfo[0].strides = __pyx_pybuffernd_residue_first_atom.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_residue_first_atom.diminfo[0].shape = __pyx_pybuffernd_residue_first_atom.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ds.rcbuffer->pybuffer, (PyObject*)__pyx_v_ds, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 699, __pyx_L1_error)
  }
  __pyx_pybuffernd_ds.diminfo[0].strides = __pyx_pybuffernd_ds.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ds.diminfo[0].shape = __pyx_pybuffernd_ds.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_ds.diminfo[1].strides = __pyx_pybuffernd_ds.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_ds.diminfo[1].shape = __pyx_pybuffernd_ds.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_octants.rcbuffer->pybuffer, (PyObject*)__pyx_v_octants, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 699, __pyx_L1_error)
  }
  __pyx_pybuffernd_octants.diminfo[0].strides = __pyx_pybuffernd_octants.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_octants.diminfo[0].shape = __pyx_pybuffernd_octants.rcbuffer->pybuffer.shape[0];

  /* "src/helpers/helpers.pyx":719
 *     """
 * 
 *     cdef double *cxyz    = <double *> xyz.data             # <<<<<<<<<<<<<<
 *     cdef double *q       = <double *> charges.data
 *     cdef int* apr        = <int *> atoms_per_residue.data
 */
  __pyx_v_cxyz = ((double *)__pyx_v_xyz->data);

  /* "src/helpers/helpers.pyx":720
 * 
 *     cdef double *cxyz    = <double *> xyz.data
 *     cdef double *q       = <double *> charges.data             # <<<<<<<<<<<<<<
 *     cdef int* apr        = <int *> atoms_per_residue.data
 *     cdef int* rfa        = <int *> residue_first_atom.data
 */
  __pyx_v_q = ((double *)__pyx_v_charges->data);

  /* "src/helpers/helpers.pyx":721
 *     cdef double *cxyz    = <double *> xyz.data
 *     cdef double *q       = <double *> charges.data
 *     cdef int* apr        = <int *> atoms_per_residue.data             # <<<<<<<<<<<<<<
 *     cdef int* rfa        = <int *> residue_first_atom.data
 *     cdef int* coct = NULL
 */
  __pyx_v_apr = ((int *)__pyx_v_atoms_per_residue->data);

  /* "src/helpers/helpers.pyx":722
 *     cdef double *q       = <double *> charges.data
 *     cdef int* apr        = <int *> atoms_per_residue.data
 *     cdef int* rfa        = <int *> residue_first_atom.data             # <<<<<<<<<<<<<<
 *     cdef int* coct = NULL
 *     if octants!=None:
 */
  __pyx_v_rfa = ((int *)__pyx_v_residue_first_atom->data);

  /* "src/helpers/helpers.pyx":723
 *     cdef int* apr        = <int *> atoms_per_residue.data
 *     cdef int* rfa        = <int *> residue_first_atom.data
 *     cdef int* coct = NULL             # <<<<<<<<<<<<<<
 *     if octants!=None:
 *         coct = <int *> octants.data
 */
  __pyx_v_coct = NULL;

  /* "src/helpers/helpers.pyx":724
 *     cdef int* rfa        = <int *> residue_first_atom.data
 *     cdef int* coct = NULL
 *     if octants!=None:             # <<<<<<<<<<<<<<
 *         coct = <int *> octants.data
 *     cdef int i, j, k, idx, idx2, idx3, nmol=<int>nmolecules, islt=<int>isolute
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_octants), Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/helpers/helpers.pyx":725
 *     cdef int* coct = NULL
 *     if octants!=None:
 *         coct = <int *> octants.data             # <<<<<<<<<<<<<<
 *     cdef int i, j, k, idx, idx2, idx3, nmol=<int>nmolecules, islt=<int>isolute
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_per_atom = np.zeros((apr[islt],8),dtype=np.float64)
 */
    __pyx_v_coct = ((int *)__pyx_v_octants->data);

    /* "src/helpers/helpers.pyx":724
 *     cdef int* rfa        = <int *> residue_first_atom.data
 *     cdef int* coct = NULL
 *     if octants!=None:             # <<<<<<<<<<<<<<
 *         coct = <int *> octants.data
 *     cdef int i, j, k, idx, idx2, idx3, nmol=<int>nmolecules, islt=<int>isolute
 */
  }

  /* "src/helpers/helpers.pyx":726
 *     if octants!=None:
 *         coct = <int *> octants.data
 *     cdef int i, j, k, idx, idx2, idx3, nmol=<int>nmolecules, islt=<int>isolute             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_per_atom = np.zeros((apr[islt],8),dtype=np.float64)
 *     cdef double* epa = <double *> energy_per_atom.data
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_nmolecules); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L1_error)
  __pyx_v_nmol = ((int)__pyx_t_3);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_isolute); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L1_error)
  __pyx_v_islt = ((int)__pyx_t_3);

  /* "src/helpers/helpers.pyx":727
 *         coct = <int *> octants.data
 *     cdef int i, j, k, idx, idx2, idx3, nmol=<int>nmolecules, islt=<int>isolute
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_per_atom = np.zeros((apr[islt],8),dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef double* epa = <double *> energy_per_atom.data
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_xyz_per_atom = np.zeros((apr[islt],3),dtype=np.float64)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_apr[__pyx_v_islt])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_8);
  __Pyx_GIVEREF(__pyx_int_8);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_8);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 727, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_energy_per_atom.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_energy_per_atom = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_energy_per_atom.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 727, __pyx_L1_error)
    } else {__pyx_pybuffernd_energy_per_atom.diminfo[0].strides = __pyx_pybuffernd_energy_per_atom.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_energy_per_atom.diminfo[0].shape = __pyx_pybuffernd_energy_per_atom.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_energy_per_atom.diminfo[1].strides = __pyx_pybuffernd_energy_per_atom.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_energy_per_atom.diminfo[1].shape = __pyx_pybuffernd_energy_per_atom.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_energy_per_atom = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "src/helpers/helpers.pyx":728
 *     cdef int i, j, k, idx, idx2, idx3, nmol=<int>nmolecules, islt=<int>isolute
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_per_atom = np.zeros((apr[islt],8),dtype=np.float64)
 *     cdef double* epa = <double *> energy_per_atom.data             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_xyz_per_atom = np.zeros((apr[islt],3),dtype=np.float64)
 *     cdef double* epa_xyz = <double *> energy_xyz_per_atom.data
 */
  __pyx_v_epa = ((double *)__pyx_v_energy_per_atom->data);

  /* "src/helpers/helpers.pyx":729
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_per_atom = np.zeros((apr[islt],8),dtype=np.float64)
 *     cdef double* epa = <double *> energy_per_atom.data
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_xyz_per_atom = np.zeros((apr[islt],3),dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef double* epa_xyz = <double *> energy_xyz_per_atom.data
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_octant_per_atom = np.zeros((apr[islt],8),dtype=np.float64)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_apr[__pyx_v_islt])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_3);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 729, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_energy_xyz_per_atom.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_energy_xyz_per_atom = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_energy_xyz_per_atom.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 729, __pyx_L1_error)
    } else {__pyx_pybuffernd_energy_xyz_per_atom.diminfo[0].strides = __pyx_pybuffernd_energy_xyz_per_atom.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_energy_xyz_per_atom.diminfo[0].shape = __pyx_pybuffernd_energy_xyz_per_atom.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_energy_xyz_per_atom.diminfo[1].strides = __pyx_pybuffernd_energy_xyz_per_atom.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_energy_xyz_per_atom.diminfo[1].shape = __pyx_pybuffernd_energy_xyz_per_atom.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v_energy_xyz_per_atom = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/helpers/helpers.pyx":730
 *     cdef double* epa = <double *> energy_per_atom.data
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_xyz_per_atom = np.zeros((apr[islt],3),dtype=np.float64)
 *     cdef double* epa_xyz = <double *> energy_xyz_per_atom.data             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_octant_per_atom = np.zeros((apr[islt],8),dtype=np.float64)
 *     cdef double* epa_oct = <double *> energy_octant_per_atom.data
 */
  __pyx_v_epa_xyz = ((double *)__pyx_v_energy_xyz_per_atom->data);

  /* "src/helpers/helpers.pyx":731
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_xyz_per_atom = np.zeros((apr[islt],3),dtype=np.float64)
 *     cdef double* epa_xyz = <double *> energy_xyz_per_atom.data
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_octant_per_atom = np.zeros((apr[islt],8),dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef double* epa_oct = <double *> energy_octant_per_atom.data
 *     cdef double dx, dy, dz, r, qqr
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_apr[__pyx_v_islt])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_int_8);
  __Pyx_GIVEREF(__pyx_int_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_8);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 731, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_energy_octant_per_atom.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_energy_octant_per_atom = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_energy_octant_per_atom.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 731, __pyx_L1_error)
    } else {__pyx_pybuffernd_energy_octant_per_atom.diminfo[0].strides = __pyx_pybuffernd_energy_octant_per_atom.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_energy_octant_per_atom.diminfo[0].shape = __pyx_pybuffernd_energy_octant_per_atom.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_energy_octant_per_atom.diminfo[1].strides = __pyx_pybuffernd_energy_octant_per_atom.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_energy_octant_per_atom.diminfo[1].shape = __pyx_pybuffernd_energy_octant_per_atom.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_energy_octant_per_atom = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/helpers/helpers.pyx":732
 *     cdef double* epa_xyz = <double *> energy_xyz_per_atom.data
 *     cdef np.ndarray[np.float64_t,ndim=2] energy_octant_per_atom = np.zeros((apr[islt],8),dtype=np.float64)
 *     cdef double* epa_oct = <double *> energy_octant_per_atom.data             # <<<<<<<<<<<<<<
 *     cdef double dx, dy, dz, r, qqr
 *     cdef int x, y, z, idx4, c1=cat_first, c2=cat_last, a1=an_first, a2=an_last
 */
  __pyx_v_epa_oct = ((double *)__pyx_v_energy_octant_per_atom->data);

  /* "src/helpers/helpers.pyx":734
 *     cdef double* epa_oct = <double *> energy_octant_per_atom.data
 *     cdef double dx, dy, dz, r, qqr
 *     cdef int x, y, z, idx4, c1=cat_first, c2=cat_last, a1=an_first, a2=an_last             # <<<<<<<<<<<<<<
 *     cdef int *cds = <int *> ds.data
 *     cdef np.ndarray[np.float64_t,ndim=1] energy = np.zeros(8,dtype=np.float64)
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_cat_first); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __pyx_v_c1 = __pyx_t_3;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_cat_last); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __pyx_v_c2 = __pyx_t_3;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_an_first); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __pyx_v_a1 = __pyx_t_3;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_an_last); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __pyx_v_a2 = __pyx_t_3;

  /* "src/helpers/helpers.pyx":735
 *     cdef double dx, dy, dz, r, qqr
 *     cdef int x, y, z, idx4, c1=cat_first, c2=cat_last, a1=an_first, a2=an_last
 *     cdef int *cds = <int *> ds.data             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=1] energy = np.zeros(8,dtype=np.float64)
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_xyz = np.zeros(3,dtype=np.float64)
 */
  __pyx_v_cds = ((int *)__pyx_v_ds->data);

  /* "src/helpers/helpers.pyx":736
 *     cdef int x, y, z, idx4, c1=cat_first, c2=cat_last, a1=an_first, a2=an_last
 *     cdef int *cds = <int *> ds.data
 *     cdef np.ndarray[np.float64_t,ndim=1] energy = np.zeros(8,dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_xyz = np.zeros(3,dtype=np.float64)
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_octant = np.zeros(8,dtype=np.float64)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__4, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 736, __pyx_L1_error)
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_energy.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_energy = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_energy.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 736, __pyx_L1_error)
    } else {__pyx_pybuffernd_energy.diminfo[0].strides = __pyx_pybuffernd_energy.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_energy.diminfo[0].shape = __pyx_pybuffernd_energy.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_energy = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/helpers/helpers.pyx":737
 *     cdef int *cds = <int *> ds.data
 *     cdef np.ndarray[np.float64_t,ndim=1] energy = np.zeros(8,dtype=np.float64)
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_xyz = np.zeros(3,dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_octant = np.zeros(8,dtype=np.float64)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 737, __pyx_L1_error)
  __pyx_t_12 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_energy_xyz.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_energy_xyz = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_energy_xyz.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 737, __pyx_L1_error)
    } else {__pyx_pybuffernd_energy_xyz.diminfo[0].strides = __pyx_pybuffernd_energy_xyz.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_energy_xyz.diminfo[0].shape = __pyx_pybuffernd_energy_xyz.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_12 = 0;
  __pyx_v_energy_xyz = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/helpers/helpers.pyx":738
 *     cdef np.ndarray[np.float64_t,ndim=1] energy = np.zeros(8,dtype=np.float64)
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_xyz = np.zeros(3,dtype=np.float64)
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_octant = np.zeros(8,dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 * #    for i in prange(apr[islt],nogil=True):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__4, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 738, __pyx_L1_error)
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_energy_octant.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_energy_octant = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_energy_octant.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 738, __pyx_L1_error)
    } else {__pyx_pybuffernd_energy_octant.diminfo[0].strides = __pyx_pybuffernd_energy_octant.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_energy_octant.diminfo[0].shape = __pyx_pybuffernd_energy_octant.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_energy_octant = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "src/helpers/helpers.pyx":741
 * 
 * #    for i in prange(apr[islt],nogil=True):
 *     for i in range(apr[islt]):             # <<<<<<<<<<<<<<
 *         idx=rfa[islt]+i
 *         # cations
 */
  __pyx_t_3 = (__pyx_v_apr[__pyx_v_islt]);
  __pyx_t_14 = __pyx_t_3;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_i = __pyx_t_15;

    /* "src/helpers/helpers.pyx":742
 * #    for i in prange(apr[islt],nogil=True):
 *     for i in range(apr[islt]):
 *         idx=rfa[islt]+i             # <<<<<<<<<<<<<<
 *         # cations
 *         for j in range(c1,c2+1):
 */
    __pyx_v_idx = ((__pyx_v_rfa[__pyx_v_islt]) + __pyx_v_i);

    /* "src/helpers/helpers.pyx":744
 *         idx=rfa[islt]+i
 *         # cations
 *         for j in range(c1,c2+1):             # <<<<<<<<<<<<<<
 *             idx3=cds[islt*nmol+j]-1
 *             for k in range(apr[j]):
 */
    __pyx_t_16 = (__pyx_v_c2 + 1);
    __pyx_t_17 = __pyx_t_16;
    for (__pyx_t_18 = __pyx_v_c1; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_v_j = __pyx_t_18;

      /* "src/helpers/helpers.pyx":745
 *         # cations
 *         for j in range(c1,c2+1):
 *             idx3=cds[islt*nmol+j]-1             # <<<<<<<<<<<<<<
 *             for k in range(apr[j]):
 *                 idx2=rfa[j]+k
 */
      __pyx_v_idx3 = ((__pyx_v_cds[((__pyx_v_islt * __pyx_v_nmol) + __pyx_v_j)]) - 1);

      /* "src/helpers/helpers.pyx":746
 *         for j in range(c1,c2+1):
 *             idx3=cds[islt*nmol+j]-1
 *             for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *                 idx2=rfa[j]+k
 *                 dx=cxyz[idx*3]-cxyz[idx2*3]
 */
      __pyx_t_19 = (__pyx_v_apr[__pyx_v_j]);
      __pyx_t_20 = __pyx_t_19;
      for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
        __pyx_v_k = __pyx_t_21;

        /* "src/helpers/helpers.pyx":747
 *             idx3=cds[islt*nmol+j]-1
 *             for k in range(apr[j]):
 *                 idx2=rfa[j]+k             # <<<<<<<<<<<<<<
 *                 dx=cxyz[idx*3]-cxyz[idx2*3]
 *                 dy=cxyz[idx*3+1]-cxyz[idx2*3+1]
 */
        __pyx_v_idx2 = ((__pyx_v_rfa[__pyx_v_j]) + __pyx_v_k);

        /* "src/helpers/helpers.pyx":748
 *             for k in range(apr[j]):
 *                 idx2=rfa[j]+k
 *                 dx=cxyz[idx*3]-cxyz[idx2*3]             # <<<<<<<<<<<<<<
 *                 dy=cxyz[idx*3+1]-cxyz[idx2*3+1]
 *                 dz=cxyz[idx*3+2]-cxyz[idx2*3+2]
 */
        __pyx_v_dx = ((__pyx_v_cxyz[(__pyx_v_idx * 3)]) - (__pyx_v_cxyz[(__pyx_v_idx2 * 3)]));

        /* "src/helpers/helpers.pyx":749
 *                 idx2=rfa[j]+k
 *                 dx=cxyz[idx*3]-cxyz[idx2*3]
 *                 dy=cxyz[idx*3+1]-cxyz[idx2*3+1]             # <<<<<<<<<<<<<<
 *                 dz=cxyz[idx*3+2]-cxyz[idx2*3+2]
 *                 r=sqrt(dx*dx+dy*dy+dz*dz)
 */
        __pyx_v_dy = ((__pyx_v_cxyz[((__pyx_v_idx * 3) + 1)]) - (__pyx_v_cxyz[((__pyx_v_idx2 * 3) + 1)]));

        /* "src/helpers/helpers.pyx":750
 *                 dx=cxyz[idx*3]-cxyz[idx2*3]
 *                 dy=cxyz[idx*3+1]-cxyz[idx2*3+1]
 *                 dz=cxyz[idx*3+2]-cxyz[idx2*3+2]             # <<<<<<<<<<<<<<
 *                 r=sqrt(dx*dx+dy*dy+dz*dz)
 *                 qqr=q[idx]*q[idx2]/r
 */
        __pyx_v_dz = ((__pyx_v_cxyz[((__pyx_v_idx * 3) + 2)]) - (__pyx_v_cxyz[((__pyx_v_idx2 * 3) + 2)]));

        /* "src/helpers/helpers.pyx":751
 *                 dy=cxyz[idx*3+1]-cxyz[idx2*3+1]
 *                 dz=cxyz[idx*3+2]-cxyz[idx2*3+2]
 *                 r=sqrt(dx*dx+dy*dy+dz*dz)             # <<<<<<<<<<<<<<
 *                 qqr=q[idx]*q[idx2]/r
 *                 epa[i*8+idx3]+=qqr
 */
        __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

        /* "src/helpers/helpers.pyx":752
 *                 dz=cxyz[idx*3+2]-cxyz[idx2*3+2]
 *                 r=sqrt(dx*dx+dy*dy+dz*dz)
 *                 qqr=q[idx]*q[idx2]/r             # <<<<<<<<<<<<<<
 *                 epa[i*8+idx3]+=qqr
 *                 epa_xyz[i*3]+=qqr*dx*dx/(r*r)
 */
        __pyx_t_22 = ((__pyx_v_q[__pyx_v_idx]) * (__pyx_v_q[__pyx_v_idx2]));
        if (unlikely(__pyx_v_r == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 752, __pyx_L1_error)
        }
        __pyx_v_qqr = (__pyx_t_22 / __pyx_v_r);

        /* "src/helpers/helpers.pyx":753
 *                 r=sqrt(dx*dx+dy*dy+dz*dz)
 *                 qqr=q[idx]*q[idx2]/r
 *                 epa[i*8+idx3]+=qqr             # <<<<<<<<<<<<<<
 *                 epa_xyz[i*3]+=qqr*dx*dx/(r*r)
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)
 */
        __pyx_t_23 = ((__pyx_v_i * 8) + __pyx_v_idx3);
        (__pyx_v_epa[__pyx_t_23]) = ((__pyx_v_epa[__pyx_t_23]) + __pyx_v_qqr);

        /* "src/helpers/helpers.pyx":754
 *                 qqr=q[idx]*q[idx2]/r
 *                 epa[i*8+idx3]+=qqr
 *                 epa_xyz[i*3]+=qqr*dx*dx/(r*r)             # <<<<<<<<<<<<<<
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)
 */
        __pyx_t_23 = (__pyx_v_i * 3);
        __pyx_t_22 = ((__pyx_v_qqr * __pyx_v_dx) * __pyx_v_dx);
        __pyx_t_24 = (__pyx_v_r * __pyx_v_r);
        if (unlikely(__pyx_t_24 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 754, __pyx_L1_error)
        }
        (__pyx_v_epa_xyz[__pyx_t_23]) = ((__pyx_v_epa_xyz[__pyx_t_23]) + (__pyx_t_22 / __pyx_t_24));

        /* "src/helpers/helpers.pyx":755
 *                 epa[i*8+idx3]+=qqr
 *                 epa_xyz[i*3]+=qqr*dx*dx/(r*r)
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)             # <<<<<<<<<<<<<<
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)
 *                 if idx3 == 0 and coct != NULL:
 */
        __pyx_t_23 = ((__pyx_v_i * 3) + 1);
        __pyx_t_24 = ((__pyx_v_qqr * __pyx_v_dy) * __pyx_v_dy);
        __pyx_t_22 = (__pyx_v_r * __pyx_v_r);
        if (unlikely(__pyx_t_22 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 755, __pyx_L1_error)
        }
        (__pyx_v_epa_xyz[__pyx_t_23]) = ((__pyx_v_epa_xyz[__pyx_t_23]) + (__pyx_t_24 / __pyx_t_22));

        /* "src/helpers/helpers.pyx":756
 *                 epa_xyz[i*3]+=qqr*dx*dx/(r*r)
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)             # <<<<<<<<<<<<<<
 *                 if idx3 == 0 and coct != NULL:
 *                     epa_oct[i*8+coct[j]]+=qqr
 */
        __pyx_t_23 = ((__pyx_v_i * 3) + 2);
        __pyx_t_22 = ((__pyx_v_qqr * __pyx_v_dz) * __pyx_v_dz);
        __pyx_t_24 = (__pyx_v_r * __pyx_v_r);
        if (unlikely(__pyx_t_24 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 756, __pyx_L1_error)
        }
        (__pyx_v_epa_xyz[__pyx_t_23]) = ((__pyx_v_epa_xyz[__pyx_t_23]) + (__pyx_t_22 / __pyx_t_24));

        /* "src/helpers/helpers.pyx":757
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)
 *                 if idx3 == 0 and coct != NULL:             # <<<<<<<<<<<<<<
 *                     epa_oct[i*8+coct[j]]+=qqr
 * 
 */
        __pyx_t_25 = ((__pyx_v_idx3 == 0) != 0);
        if (__pyx_t_25) {
        } else {
          __pyx_t_2 = __pyx_t_25;
          goto __pyx_L11_bool_binop_done;
        }
        __pyx_t_25 = ((__pyx_v_coct != NULL) != 0);
        __pyx_t_2 = __pyx_t_25;
        __pyx_L11_bool_binop_done:;
        if (__pyx_t_2) {

          /* "src/helpers/helpers.pyx":758
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)
 *                 if idx3 == 0 and coct != NULL:
 *                     epa_oct[i*8+coct[j]]+=qqr             # <<<<<<<<<<<<<<
 * 
 *         # anions
 */
          __pyx_t_23 = ((__pyx_v_i * 8) + (__pyx_v_coct[__pyx_v_j]));
          (__pyx_v_epa_oct[__pyx_t_23]) = ((__pyx_v_epa_oct[__pyx_t_23]) + __pyx_v_qqr);

          /* "src/helpers/helpers.pyx":757
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)
 *                 if idx3 == 0 and coct != NULL:             # <<<<<<<<<<<<<<
 *                     epa_oct[i*8+coct[j]]+=qqr
 * 
 */
        }
      }
    }

    /* "src/helpers/helpers.pyx":761
 * 
 *         # anions
 *         for j in range(a1,a2+1):             # <<<<<<<<<<<<<<
 *             idx3=cds[islt*nmol+j]-1
 *             for k in range(apr[j]):
 */
    __pyx_t_16 = (__pyx_v_a2 + 1);
    __pyx_t_17 = __pyx_t_16;
    for (__pyx_t_18 = __pyx_v_a1; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_v_j = __pyx_t_18;

      /* "src/helpers/helpers.pyx":762
 *         # anions
 *         for j in range(a1,a2+1):
 *             idx3=cds[islt*nmol+j]-1             # <<<<<<<<<<<<<<
 *             for k in range(apr[j]):
 *                 idx2=rfa[j]+k
 */
      __pyx_v_idx3 = ((__pyx_v_cds[((__pyx_v_islt * __pyx_v_nmol) + __pyx_v_j)]) - 1);

      /* "src/helpers/helpers.pyx":763
 *         for j in range(a1,a2+1):
 *             idx3=cds[islt*nmol+j]-1
 *             for k in range(apr[j]):             # <<<<<<<<<<<<<<
 *                 idx2=rfa[j]+k
 *                 dx=cxyz[idx*3]-cxyz[idx2*3]
 */
      __pyx_t_19 = (__pyx_v_apr[__pyx_v_j]);
      __pyx_t_20 = __pyx_t_19;
      for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
        __pyx_v_k = __pyx_t_21;

        /* "src/helpers/helpers.pyx":764
 *             idx3=cds[islt*nmol+j]-1
 *             for k in range(apr[j]):
 *                 idx2=rfa[j]+k             # <<<<<<<<<<<<<<
 *                 dx=cxyz[idx*3]-cxyz[idx2*3]
 *                 dy=cxyz[idx*3+1]-cxyz[idx2*3+1]
 */
        __pyx_v_idx2 = ((__pyx_v_rfa[__pyx_v_j]) + __pyx_v_k);

        /* "src/helpers/helpers.pyx":765
 *             for k in range(apr[j]):
 *                 idx2=rfa[j]+k
 *                 dx=cxyz[idx*3]-cxyz[idx2*3]             # <<<<<<<<<<<<<<
 *                 dy=cxyz[idx*3+1]-cxyz[idx2*3+1]
 *                 dz=cxyz[idx*3+2]-cxyz[idx2*3+2]
 */
        __pyx_v_dx = ((__pyx_v_cxyz[(__pyx_v_idx * 3)]) - (__pyx_v_cxyz[(__pyx_v_idx2 * 3)]));

        /* "src/helpers/helpers.pyx":766
 *                 idx2=rfa[j]+k
 *                 dx=cxyz[idx*3]-cxyz[idx2*3]
 *                 dy=cxyz[idx*3+1]-cxyz[idx2*3+1]             # <<<<<<<<<<<<<<
 *                 dz=cxyz[idx*3+2]-cxyz[idx2*3+2]
 *                 r=sqrt(dx*dx+dy*dy+dz*dz)
 */
        __pyx_v_dy = ((__pyx_v_cxyz[((__pyx_v_idx * 3) + 1)]) - (__pyx_v_cxyz[((__pyx_v_idx2 * 3) + 1)]));

        /* "src/helpers/helpers.pyx":767
 *                 dx=cxyz[idx*3]-cxyz[idx2*3]
 *                 dy=cxyz[idx*3+1]-cxyz[idx2*3+1]
 *                 dz=cxyz[idx*3+2]-cxyz[idx2*3+2]             # <<<<<<<<<<<<<<
 *                 r=sqrt(dx*dx+dy*dy+dz*dz)
 *                 qqr=q[idx]*q[idx2]/r
 */
        __pyx_v_dz = ((__pyx_v_cxyz[((__pyx_v_idx * 3) + 2)]) - (__pyx_v_cxyz[((__pyx_v_idx2 * 3) + 2)]));

        /* "src/helpers/helpers.pyx":768
 *                 dy=cxyz[idx*3+1]-cxyz[idx2*3+1]
 *                 dz=cxyz[idx*3+2]-cxyz[idx2*3+2]
 *                 r=sqrt(dx*dx+dy*dy+dz*dz)             # <<<<<<<<<<<<<<
 *                 qqr=q[idx]*q[idx2]/r
 *                 epa[i*8+4+idx3]+=qqr
 */
        __pyx_v_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));

        /* "src/helpers/helpers.pyx":769
 *                 dz=cxyz[idx*3+2]-cxyz[idx2*3+2]
 *                 r=sqrt(dx*dx+dy*dy+dz*dz)
 *                 qqr=q[idx]*q[idx2]/r             # <<<<<<<<<<<<<<
 *                 epa[i*8+4+idx3]+=qqr
 *                 epa_xyz[i*3]+=qqr*dx*dx/(r*r)
 */
        __pyx_t_24 = ((__pyx_v_q[__pyx_v_idx]) * (__pyx_v_q[__pyx_v_idx2]));
        if (unlikely(__pyx_v_r == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 769, __pyx_L1_error)
        }
        __pyx_v_qqr = (__pyx_t_24 / __pyx_v_r);

        /* "src/helpers/helpers.pyx":770
 *                 r=sqrt(dx*dx+dy*dy+dz*dz)
 *                 qqr=q[idx]*q[idx2]/r
 *                 epa[i*8+4+idx3]+=qqr             # <<<<<<<<<<<<<<
 *                 epa_xyz[i*3]+=qqr*dx*dx/(r*r)
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)
 */
        __pyx_t_23 = (((__pyx_v_i * 8) + 4) + __pyx_v_idx3);
        (__pyx_v_epa[__pyx_t_23]) = ((__pyx_v_epa[__pyx_t_23]) + __pyx_v_qqr);

        /* "src/helpers/helpers.pyx":771
 *                 qqr=q[idx]*q[idx2]/r
 *                 epa[i*8+4+idx3]+=qqr
 *                 epa_xyz[i*3]+=qqr*dx*dx/(r*r)             # <<<<<<<<<<<<<<
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)
 */
        __pyx_t_23 = (__pyx_v_i * 3);
        __pyx_t_24 = ((__pyx_v_qqr * __pyx_v_dx) * __pyx_v_dx);
        __pyx_t_22 = (__pyx_v_r * __pyx_v_r);
        if (unlikely(__pyx_t_22 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 771, __pyx_L1_error)
        }
        (__pyx_v_epa_xyz[__pyx_t_23]) = ((__pyx_v_epa_xyz[__pyx_t_23]) + (__pyx_t_24 / __pyx_t_22));

        /* "src/helpers/helpers.pyx":772
 *                 epa[i*8+4+idx3]+=qqr
 *                 epa_xyz[i*3]+=qqr*dx*dx/(r*r)
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)             # <<<<<<<<<<<<<<
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)
 *                 if idx3 == 0 and coct != NULL:
 */
        __pyx_t_23 = ((__pyx_v_i * 3) + 1);
        __pyx_t_22 = ((__pyx_v_qqr * __pyx_v_dy) * __pyx_v_dy);
        __pyx_t_24 = (__pyx_v_r * __pyx_v_r);
        if (unlikely(__pyx_t_24 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 772, __pyx_L1_error)
        }
        (__pyx_v_epa_xyz[__pyx_t_23]) = ((__pyx_v_epa_xyz[__pyx_t_23]) + (__pyx_t_22 / __pyx_t_24));

        /* "src/helpers/helpers.pyx":773
 *                 epa_xyz[i*3]+=qqr*dx*dx/(r*r)
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)             # <<<<<<<<<<<<<<
 *                 if idx3 == 0 and coct != NULL:
 *                     epa_oct[i*8+coct[j]]+=qqr
 */
        __pyx_t_23 = ((__pyx_v_i * 3) + 2);
        __pyx_t_24 = ((__pyx_v_qqr * __pyx_v_dz) * __pyx_v_dz);
        __pyx_t_22 = (__pyx_v_r * __pyx_v_r);
        if (unlikely(__pyx_t_22 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 773, __pyx_L1_error)
        }
        (__pyx_v_epa_xyz[__pyx_t_23]) = ((__pyx_v_epa_xyz[__pyx_t_23]) + (__pyx_t_24 / __pyx_t_22));

        /* "src/helpers/helpers.pyx":774
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)
 *                 if idx3 == 0 and coct != NULL:             # <<<<<<<<<<<<<<
 *                     epa_oct[i*8+coct[j]]+=qqr
 * 
 */
        __pyx_t_25 = ((__pyx_v_idx3 == 0) != 0);
        if (__pyx_t_25) {
        } else {
          __pyx_t_2 = __pyx_t_25;
          goto __pyx_L18_bool_binop_done;
        }
        __pyx_t_25 = ((__pyx_v_coct != NULL) != 0);
        __pyx_t_2 = __pyx_t_25;
        __pyx_L18_bool_binop_done:;
        if (__pyx_t_2) {

          /* "src/helpers/helpers.pyx":775
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)
 *                 if idx3 == 0 and coct != NULL:
 *                     epa_oct[i*8+coct[j]]+=qqr             # <<<<<<<<<<<<<<
 * 
 *     for i in range(apr[islt]):
 */
          __pyx_t_23 = ((__pyx_v_i * 8) + (__pyx_v_coct[__pyx_v_j]));
          (__pyx_v_epa_oct[__pyx_t_23]) = ((__pyx_v_epa_oct[__pyx_t_23]) + __pyx_v_qqr);

          /* "src/helpers/helpers.pyx":774
 *                 epa_xyz[i*3+1]+=qqr*dy*dy/(r*r)
 *                 epa_xyz[i*3+2]+=qqr*dz*dz/(r*r)
 *                 if idx3 == 0 and coct != NULL:             # <<<<<<<<<<<<<<
 *                     epa_oct[i*8+coct[j]]+=qqr
 * 
 */
        }
      }
    }
  }

  /* "src/helpers/helpers.pyx":777
 *                     epa_oct[i*8+coct[j]]+=qqr
 * 
 *     for i in range(apr[islt]):             # <<<<<<<<<<<<<<
 *         for j in range(8):
 *             energy[j]+=epa[i*8+j]
 */
  __pyx_t_3 = (__pyx_v_apr[__pyx_v_islt]);
  __pyx_t_14 = __pyx_t_3;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_i = __pyx_t_15;

    /* "src/helpers/helpers.pyx":778
 * 
 *     for i in range(apr[islt]):
 *         for j in range(8):             # <<<<<<<<<<<<<<
 *             energy[j]+=epa[i*8+j]
 *             energy_octant[j]+=epa_oct[i*8+j]
 */
    for (__pyx_t_18 = 0; __pyx_t_18 < 8; __pyx_t_18+=1) {
      __pyx_v_j = __pyx_t_18;

      /* "src/helpers/helpers.pyx":779
 *     for i in range(apr[islt]):
 *         for j in range(8):
 *             energy[j]+=epa[i*8+j]             # <<<<<<<<<<<<<<
 *             energy_octant[j]+=epa_oct[i*8+j]
 *         for j in range(3):
 */
      __pyx_t_26 = __pyx_v_j;
      if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_pybuffernd_energy.diminfo[0].shape;
      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_energy.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_energy.diminfo[0].strides) += (__pyx_v_epa[((__pyx_v_i * 8) + __pyx_v_j)]);

      /* "src/helpers/helpers.pyx":780
 *         for j in range(8):
 *             energy[j]+=epa[i*8+j]
 *             energy_octant[j]+=epa_oct[i*8+j]             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             energy_xyz[j]+=epa_xyz[i*3+j]
 */
      __pyx_t_26 = __pyx_v_j;
      if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_pybuffernd_energy_octant.diminfo[0].shape;
      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_energy_octant.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_energy_octant.diminfo[0].strides) += (__pyx_v_epa_oct[((__pyx_v_i * 8) + __pyx_v_j)]);
    }

    /* "src/helpers/helpers.pyx":781
 *             energy[j]+=epa[i*8+j]
 *             energy_octant[j]+=epa_oct[i*8+j]
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             energy_xyz[j]+=epa_xyz[i*3+j]
 * 
 */
    for (__pyx_t_18 = 0; __pyx_t_18 < 3; __pyx_t_18+=1) {
      __pyx_v_j = __pyx_t_18;

      /* "src/helpers/helpers.pyx":782
 *             energy_octant[j]+=epa_oct[i*8+j]
 *         for j in range(3):
 *             energy_xyz[j]+=epa_xyz[i*3+j]             # <<<<<<<<<<<<<<
 * 
 *     return energy*1390.02, energy_xyz*1390.02, energy_octant*1390.02
 */
      __pyx_t_26 = __pyx_v_j;
      if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_pybuffernd_energy_xyz.diminfo[0].shape;
      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_energy_xyz.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_energy_xyz.diminfo[0].strides) += (__pyx_v_epa_xyz[((__pyx_v_i * 3) + __pyx_v_j)]);
    }
  }

  /* "src/helpers/helpers.pyx":784
 *             energy_xyz[j]+=epa_xyz[i*3+j]
 * 
 *     return energy*1390.02, energy_xyz*1390.02, energy_octant*1390.02             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = PyNumber_Multiply(((PyObject *)__pyx_v_energy), __pyx_float_1390_02); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyNumber_Multiply(((PyObject *)__pyx_v_energy_xyz), __pyx_float_1390_02); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_v_energy_octant), __pyx_float_1390_02); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __pyx_t_7 = 0;
  __pyx_t_6 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":699
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAASep(np.ndarray[np.float64_t,ndim=2,mode="c"] xyz,             # <<<<<<<<<<<<<<
 *                  np.ndarray[np.float64_t,ndim=1] charges,
 *                  np.ndarray[np.int32_t,ndim=1,mode="c"] atoms_per_residue,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_atoms_per_residue.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ds.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy_octant.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy_octant_per_atom.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy_per_atom.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy_xyz.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy_xyz_per_atom.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_octants.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_residue_first_atom.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xyz.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("newanalysis.helpers.calcEnergyAASep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_atoms_per_residue.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ds.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy_octant.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy_octant_per_atom.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy_per_atom.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy_xyz.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_energy_xyz_per_atom.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_octants.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_residue_first_atom.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xyz.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_energy_per_atom);
  __Pyx_XDECREF((PyObject *)__pyx_v_energy_xyz_per_atom);
  __Pyx_XDECREF((PyObject *)__pyx_v_energy_octant_per_atom);
  __Pyx_XDECREF((PyObject *)__pyx_v_energy);
  __Pyx_XDECREF((PyObject *)__pyx_v_energy_xyz);
  __Pyx_XDECREF((PyObject *)__pyx_v_energy_octant);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":787
 * 
 * @cython.boundscheck(False)
 * def findDS(char [:,:,:] ds, double [:,:] cn, int n1, int n2, int shell, int t):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_41findDS(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_41findDS = {"findDS", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_41findDS, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_41findDS(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_ds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_cn = { 0, 0, { 0 }, { 0 }, { 0 } };
  CYTHON_UNUSED int __pyx_v_n1;
  int __pyx_v_n2;
  int __pyx_v_shell;
  int __pyx_v_t;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findDS (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ds,&__pyx_n_s_cn,&__pyx_n_s_n1,&__pyx_n_s_n2,&__pyx_n_s_shell,&__pyx_n_s_t,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ds)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findDS", 1, 6, 6, 1); __PYX_ERR(0, 787, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findDS", 1, 6, 6, 2); __PYX_ERR(0, 787, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findDS", 1, 6, 6, 3); __PYX_ERR(0, 787, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findDS", 1, 6, 6, 4); __PYX_ERR(0, 787, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findDS", 1, 6, 6, 5); __PYX_ERR(0, 787, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "findDS") < 0)) __PYX_ERR(0, 787, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_ds = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_char(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_ds.memview)) __PYX_ERR(0, 787, __pyx_L3_error)
    __pyx_v_cn = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_cn.memview)) __PYX_ERR(0, 787, __pyx_L3_error)
    __pyx_v_n1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
    __pyx_v_n2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
    __pyx_v_shell = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_shell == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
    __pyx_v_t = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_t == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findDS", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 787, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.findDS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_40findDS(__pyx_self, __pyx_v_ds, __pyx_v_cn, __pyx_v_n1, __pyx_v_n2, __pyx_v_shell, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_40findDS(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_ds, __Pyx_memviewslice __pyx_v_cn, CYTHON_UNUSED int __pyx_v_n1, int __pyx_v_n2, int __pyx_v_shell, int __pyx_v_t) {
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("findDS", 0);

  /* "src/helpers/helpers.pyx":791
 *     cdef int i, j
 * 
 *     for i in prange(n1, nogil=True):             # <<<<<<<<<<<<<<
 *         for j in range(n2):
 *             if ds[t, i, j] == shell:
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_1 = __pyx_v_n1;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_3 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_10, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j)
                    #endif /* _OPENMP */
                    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_2);
                            /* Initialize private variables to invalid values */
                            __pyx_v_j = ((int)0xbad0bad0);

                            /* "src/helpers/helpers.pyx":792
 * 
 *     for i in prange(n1, nogil=True):
 *         for j in range(n2):             # <<<<<<<<<<<<<<
 *             if ds[t, i, j] == shell:
 *                 cn[t, i] += 1.0
 */
                            __pyx_t_4 = __pyx_v_n2;
                            __pyx_t_5 = __pyx_t_4;
                            for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
                              __pyx_v_j = __pyx_t_6;

                              /* "src/helpers/helpers.pyx":793
 *     for i in prange(n1, nogil=True):
 *         for j in range(n2):
 *             if ds[t, i, j] == shell:             # <<<<<<<<<<<<<<
 *                 cn[t, i] += 1.0
 * 
 */
                              __pyx_t_7 = __pyx_v_t;
                              __pyx_t_8 = __pyx_v_i;
                              __pyx_t_9 = __pyx_v_j;
                              if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_ds.shape[0];
                              if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_ds.shape[1];
                              if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_ds.shape[2];
                              __pyx_t_10 = (((*((char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_7 * __pyx_v_ds.strides[0]) ) + __pyx_t_8 * __pyx_v_ds.strides[1]) ) + __pyx_t_9 * __pyx_v_ds.strides[2]) ))) == __pyx_v_shell) != 0);
                              if (__pyx_t_10) {

                                /* "src/helpers/helpers.pyx":794
 *         for j in range(n2):
 *             if ds[t, i, j] == shell:
 *                 cn[t, i] += 1.0             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
                                __pyx_t_9 = __pyx_v_t;
                                __pyx_t_8 = __pyx_v_i;
                                if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_cn.shape[0];
                                if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_cn.shape[1];
                                *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_cn.data + __pyx_t_9 * __pyx_v_cn.strides[0]) ) + __pyx_t_8 * __pyx_v_cn.strides[1]) )) += 1.0;

                                /* "src/helpers/helpers.pyx":793
 *     for i in prange(n1, nogil=True):
 *         for j in range(n2):
 *             if ds[t, i, j] == shell:             # <<<<<<<<<<<<<<
 *                 cn[t, i] += 1.0
 * 
 */
                              }
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":791
 *     cdef int i, j
 * 
 *     for i in prange(n1, nogil=True):             # <<<<<<<<<<<<<<
 *         for j in range(n2):
 *             if ds[t, i, j] == shell:
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":787
 * 
 * @cython.boundscheck(False)
 * def findDS(char [:,:,:] ds, double [:,:] cn, int n1, int n2, int shell, int t):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, j
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ds, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_cn, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":797
 * 
 * @cython.boundscheck(False)
 * def dipTen(np.ndarray[np.float64_t,ndim=1] rv,             # <<<<<<<<<<<<<<
 *            np.float64_t r2):
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_43dipTen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_42dipTen[] = "\n    dipTen(coo1,coo2) -> returns dip tensor\n    Calculates the dipole T-tensor (see Daniel's NMR code).\n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_43dipTen = {"dipTen", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_43dipTen, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_42dipTen};
static PyObject *__pyx_pw_11newanalysis_7helpers_43dipTen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_rv = 0;
  __pyx_t_5numpy_float64_t __pyx_v_r2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dipTen (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rv,&__pyx_n_s_r2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rv)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dipTen", 1, 2, 2, 1); __PYX_ERR(0, 797, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dipTen") < 0)) __PYX_ERR(0, 797, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_rv = ((PyArrayObject *)values[0]);
    __pyx_v_r2 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_r2 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 798, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dipTen", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 797, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.dipTen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rv), __pyx_ptype_5numpy_ndarray, 1, "rv", 0))) __PYX_ERR(0, 797, __pyx_L1_error)
  __pyx_r = __pyx_pf_11newanalysis_7helpers_42dipTen(__pyx_self, __pyx_v_rv, __pyx_v_r2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_42dipTen(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_rv, __pyx_t_5numpy_float64_t __pyx_v_r2) {
  double *__pyx_v_c_rv;
  PyArrayObject *__pyx_v_dipt = 0;
  double __pyx_v_f1;
  double __pyx_v_f2;
  double __pyx_v_f2_0;
  double __pyx_v_f2_1;
  double __pyx_v_f2_2;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dipt;
  __Pyx_Buffer __pyx_pybuffer_dipt;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rv;
  __Pyx_Buffer __pyx_pybuffer_rv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyArrayObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dipTen", 0);
  __pyx_pybuffer_dipt.pybuffer.buf = NULL;
  __pyx_pybuffer_dipt.refcount = 0;
  __pyx_pybuffernd_dipt.data = NULL;
  __pyx_pybuffernd_dipt.rcbuffer = &__pyx_pybuffer_dipt;
  __pyx_pybuffer_rv.pybuffer.buf = NULL;
  __pyx_pybuffer_rv.refcount = 0;
  __pyx_pybuffernd_rv.data = NULL;
  __pyx_pybuffernd_rv.rcbuffer = &__pyx_pybuffer_rv;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rv.rcbuffer->pybuffer, (PyObject*)__pyx_v_rv, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 797, __pyx_L1_error)
  }
  __pyx_pybuffernd_rv.diminfo[0].strides = __pyx_pybuffernd_rv.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rv.diminfo[0].shape = __pyx_pybuffernd_rv.rcbuffer->pybuffer.shape[0];

  /* "src/helpers/helpers.pyx":803
 *     Calculates the dipole T-tensor (see Daniel's NMR code).
 *     """
 *     cdef double* c_rv = <double *> rv.data             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=1] dipt = np.empty(6,dtype=np.float64)
 * 
 */
  __pyx_v_c_rv = ((double *)__pyx_v_rv->data);

  /* "src/helpers/helpers.pyx":804
 *     """
 *     cdef double* c_rv = <double *> rv.data
 *     cdef np.ndarray[np.float64_t,ndim=1] dipt = np.empty(6,dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *     cdef double f1 = pow(r2,-1.5)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 804, __pyx_L1_error)
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dipt.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_dipt = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dipt.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 804, __pyx_L1_error)
    } else {__pyx_pybuffernd_dipt.diminfo[0].strides = __pyx_pybuffernd_dipt.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dipt.diminfo[0].shape = __pyx_pybuffernd_dipt.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_5 = 0;
  __pyx_v_dipt = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/helpers/helpers.pyx":806
 *     cdef np.ndarray[np.float64_t,ndim=1] dipt = np.empty(6,dtype=np.float64)
 * 
 *     cdef double f1 = pow(r2,-1.5)             # <<<<<<<<<<<<<<
 *     cdef double f2 = 3.0 * f1 / r2
 *     cdef double f2_0 = f2 * c_rv[0]
 */
  __pyx_v_f1 = pow(__pyx_v_r2, -1.5);

  /* "src/helpers/helpers.pyx":807
 * 
 *     cdef double f1 = pow(r2,-1.5)
 *     cdef double f2 = 3.0 * f1 / r2             # <<<<<<<<<<<<<<
 *     cdef double f2_0 = f2 * c_rv[0]
 *     cdef double f2_1 = f2 * c_rv[1]
 */
  __pyx_t_6 = (3.0 * __pyx_v_f1);
  if (unlikely(__pyx_v_r2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 807, __pyx_L1_error)
  }
  __pyx_v_f2 = (__pyx_t_6 / __pyx_v_r2);

  /* "src/helpers/helpers.pyx":808
 *     cdef double f1 = pow(r2,-1.5)
 *     cdef double f2 = 3.0 * f1 / r2
 *     cdef double f2_0 = f2 * c_rv[0]             # <<<<<<<<<<<<<<
 *     cdef double f2_1 = f2 * c_rv[1]
 *     cdef double f2_2 = f2 * c_rv[2]
 */
  __pyx_v_f2_0 = (__pyx_v_f2 * (__pyx_v_c_rv[0]));

  /* "src/helpers/helpers.pyx":809
 *     cdef double f2 = 3.0 * f1 / r2
 *     cdef double f2_0 = f2 * c_rv[0]
 *     cdef double f2_1 = f2 * c_rv[1]             # <<<<<<<<<<<<<<
 *     cdef double f2_2 = f2 * c_rv[2]
 * 
 */
  __pyx_v_f2_1 = (__pyx_v_f2 * (__pyx_v_c_rv[1]));

  /* "src/helpers/helpers.pyx":810
 *     cdef double f2_0 = f2 * c_rv[0]
 *     cdef double f2_1 = f2 * c_rv[1]
 *     cdef double f2_2 = f2 * c_rv[2]             # <<<<<<<<<<<<<<
 * 
 *     dipt[0] = f2_0 * c_rv[0] - f1
 */
  __pyx_v_f2_2 = (__pyx_v_f2 * (__pyx_v_c_rv[2]));

  /* "src/helpers/helpers.pyx":812
 *     cdef double f2_2 = f2 * c_rv[2]
 * 
 *     dipt[0] = f2_0 * c_rv[0] - f1             # <<<<<<<<<<<<<<
 *     dipt[1] = f2_1 * c_rv[1] - f1
 *     dipt[2] = f2_2 * c_rv[2] - f1
 */
  __pyx_t_7 = 0;
  if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_pybuffernd_dipt.diminfo[0].shape;
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dipt.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_dipt.diminfo[0].strides) = ((__pyx_v_f2_0 * (__pyx_v_c_rv[0])) - __pyx_v_f1);

  /* "src/helpers/helpers.pyx":813
 * 
 *     dipt[0] = f2_0 * c_rv[0] - f1
 *     dipt[1] = f2_1 * c_rv[1] - f1             # <<<<<<<<<<<<<<
 *     dipt[2] = f2_2 * c_rv[2] - f1
 *     dipt[3] = f2_0 * c_rv[1]
 */
  __pyx_t_7 = 1;
  if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_pybuffernd_dipt.diminfo[0].shape;
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dipt.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_dipt.diminfo[0].strides) = ((__pyx_v_f2_1 * (__pyx_v_c_rv[1])) - __pyx_v_f1);

  /* "src/helpers/helpers.pyx":814
 *     dipt[0] = f2_0 * c_rv[0] - f1
 *     dipt[1] = f2_1 * c_rv[1] - f1
 *     dipt[2] = f2_2 * c_rv[2] - f1             # <<<<<<<<<<<<<<
 *     dipt[3] = f2_0 * c_rv[1]
 *     dipt[4] = f2_0 * c_rv[2]
 */
  __pyx_t_7 = 2;
  if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_pybuffernd_dipt.diminfo[0].shape;
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dipt.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_dipt.diminfo[0].strides) = ((__pyx_v_f2_2 * (__pyx_v_c_rv[2])) - __pyx_v_f1);

  /* "src/helpers/helpers.pyx":815
 *     dipt[1] = f2_1 * c_rv[1] - f1
 *     dipt[2] = f2_2 * c_rv[2] - f1
 *     dipt[3] = f2_0 * c_rv[1]             # <<<<<<<<<<<<<<
 *     dipt[4] = f2_0 * c_rv[2]
 *     dipt[5] = f2_1 * c_rv[2]
 */
  __pyx_t_7 = 3;
  if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_pybuffernd_dipt.diminfo[0].shape;
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dipt.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_dipt.diminfo[0].strides) = (__pyx_v_f2_0 * (__pyx_v_c_rv[1]));

  /* "src/helpers/helpers.pyx":816
 *     dipt[2] = f2_2 * c_rv[2] - f1
 *     dipt[3] = f2_0 * c_rv[1]
 *     dipt[4] = f2_0 * c_rv[2]             # <<<<<<<<<<<<<<
 *     dipt[5] = f2_1 * c_rv[2]
 * 
 */
  __pyx_t_7 = 4;
  if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_pybuffernd_dipt.diminfo[0].shape;
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dipt.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_dipt.diminfo[0].strides) = (__pyx_v_f2_0 * (__pyx_v_c_rv[2]));

  /* "src/helpers/helpers.pyx":817
 *     dipt[3] = f2_0 * c_rv[1]
 *     dipt[4] = f2_0 * c_rv[2]
 *     dipt[5] = f2_1 * c_rv[2]             # <<<<<<<<<<<<<<
 * 
 *     return dipt
 */
  __pyx_t_7 = 5;
  if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_pybuffernd_dipt.diminfo[0].shape;
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dipt.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_dipt.diminfo[0].strides) = (__pyx_v_f2_1 * (__pyx_v_c_rv[2]));

  /* "src/helpers/helpers.pyx":819
 *     dipt[5] = f2_1 * c_rv[2]
 * 
 *     return dipt             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_dipt));
  __pyx_r = ((PyObject *)__pyx_v_dipt);
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":797
 * 
 * @cython.boundscheck(False)
 * def dipTen(np.ndarray[np.float64_t,ndim=1] rv,             # <<<<<<<<<<<<<<
 *            np.float64_t r2):
 *     """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dipt.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rv.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("newanalysis.helpers.dipTen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dipt.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rv.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dipt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":822
 * 
 * @cython.boundscheck(False)
 * def NQRself(np.ndarray[np.float64_t,ndim=2] py_xyz):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_45NQRself(PyObject *__pyx_self, PyObject *__pyx_v_py_xyz); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_45NQRself = {"NQRself", (PyCFunction)__pyx_pw_11newanalysis_7helpers_45NQRself, METH_O, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_45NQRself(PyObject *__pyx_self, PyObject *__pyx_v_py_xyz) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("NQRself (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_xyz), __pyx_ptype_5numpy_ndarray, 1, "py_xyz", 0))) __PYX_ERR(0, 822, __pyx_L1_error)
  __pyx_r = __pyx_pf_11newanalysis_7helpers_44NQRself(__pyx_self, ((PyArrayObject *)__pyx_v_py_xyz));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_44NQRself(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_py_xyz) {
  int __pyx_v_nwat;
  double *__pyx_v_xyz;
  double __pyx_v_H1x;
  double __pyx_v_H1y;
  double __pyx_v_H1z;
  double __pyx_v_H2x;
  double __pyx_v_H2y;
  double __pyx_v_H2z;
  double __pyx_v_n2;
  double __pyx_v_n3;
  double __pyx_v_Exx;
  double __pyx_v_Eyy;
  double __pyx_v_Ezz;
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_ind;
  PyArrayObject *__pyx_v_py_dipt = 0;
  double *__pyx_v_dipt;
  double *__pyx_v_B;
  double *__pyx_v_T;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_py_dipt;
  __Pyx_Buffer __pyx_pybuffer_py_dipt;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_py_xyz;
  __Pyx_Buffer __pyx_pybuffer_py_xyz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  long __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NQRself", 0);
  __pyx_pybuffer_py_dipt.pybuffer.buf = NULL;
  __pyx_pybuffer_py_dipt.refcount = 0;
  __pyx_pybuffernd_py_dipt.data = NULL;
  __pyx_pybuffernd_py_dipt.rcbuffer = &__pyx_pybuffer_py_dipt;
  __pyx_pybuffer_py_xyz.pybuffer.buf = NULL;
  __pyx_pybuffer_py_xyz.refcount = 0;
  __pyx_pybuffernd_py_xyz.data = NULL;
  __pyx_pybuffernd_py_xyz.rcbuffer = &__pyx_pybuffer_py_xyz;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_py_xyz.rcbuffer->pybuffer, (PyObject*)__pyx_v_py_xyz, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 822, __pyx_L1_error)
  }
  __pyx_pybuffernd_py_xyz.diminfo[0].strides = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_py_xyz.diminfo[0].shape = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_py_xyz.diminfo[1].strides = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_py_xyz.diminfo[1].shape = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.shape[1];

  /* "src/helpers/helpers.pyx":824
 * def NQRself(np.ndarray[np.float64_t,ndim=2] py_xyz):
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules             # <<<<<<<<<<<<<<
 *     cdef double *xyz = <double *> py_xyz.data
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_py_xyz)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 824, __pyx_L1_error)
  __pyx_v_nwat = __Pyx_div_Py_ssize_t(__pyx_t_1, 3);

  /* "src/helpers/helpers.pyx":825
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules
 *     cdef double *xyz = <double *> py_xyz.data             # <<<<<<<<<<<<<<
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 *     cdef double Exx = -2.3067236 # -2.0486*1.126
 */
  __pyx_v_xyz = ((double *)__pyx_v_py_xyz->data);

  /* "src/helpers/helpers.pyx":827
 *     cdef double *xyz = <double *> py_xyz.data
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 *     cdef double Exx = -2.3067236 # -2.0486*1.126             # <<<<<<<<<<<<<<
 *     cdef double Eyy =  2.0364836 # 1.8086*1.126
 *     cdef double Ezz =  0.27024   # 0.2400*1.126
 */
  __pyx_v_Exx = -2.3067236;

  /* "src/helpers/helpers.pyx":828
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 *     cdef double Exx = -2.3067236 # -2.0486*1.126
 *     cdef double Eyy =  2.0364836 # 1.8086*1.126             # <<<<<<<<<<<<<<
 *     cdef double Ezz =  0.27024   # 0.2400*1.126
 *     cdef int i, k, ind
 */
  __pyx_v_Eyy = 2.0364836;

  /* "src/helpers/helpers.pyx":829
 *     cdef double Exx = -2.3067236 # -2.0486*1.126
 *     cdef double Eyy =  2.0364836 # 1.8086*1.126
 *     cdef double Ezz =  0.27024   # 0.2400*1.126             # <<<<<<<<<<<<<<
 *     cdef int i, k, ind
 *     cdef np.ndarray[np.float64_t,ndim=1] py_dipt = np.zeros(nwat*6,dtype=np.float64)
 */
  __pyx_v_Ezz = 0.27024;

  /* "src/helpers/helpers.pyx":831
 *     cdef double Ezz =  0.27024   # 0.2400*1.126
 *     cdef int i, k, ind
 *     cdef np.ndarray[np.float64_t,ndim=1] py_dipt = np.zeros(nwat*6,dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef double *dipt = <double *> py_dipt.data
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_nwat * 6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 831, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_py_dipt.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_py_dipt = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 831, __pyx_L1_error)
    } else {__pyx_pybuffernd_py_dipt.diminfo[0].strides = __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_py_dipt.diminfo[0].shape = __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_py_dipt = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/helpers/helpers.pyx":832
 *     cdef int i, k, ind
 *     cdef np.ndarray[np.float64_t,ndim=1] py_dipt = np.zeros(nwat*6,dtype=np.float64)
 *     cdef double *dipt = <double *> py_dipt.data             # <<<<<<<<<<<<<<
 * 
 *     with nogil, parallel():
 */
  __pyx_v_dipt = ((double *)__pyx_v_py_dipt->data);

  /* "src/helpers/helpers.pyx":834
 *     cdef double *dipt = <double *> py_dipt.data
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel private(__pyx_v_B, __pyx_v_T) private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_8, __pyx_t_9) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
            #endif /* _OPENMP */
            {
                #ifdef _OPENMP
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                Py_BEGIN_ALLOW_THREADS
                #endif /* _OPENMP */
                /* Initialize private variables to invalid values */
                __pyx_v_B = ((double *)1);
                __pyx_v_T = ((double *)1);

                /* "src/helpers/helpers.pyx":835
 * 
 *     with nogil, parallel():
 *         B = <double *> malloc(sizeof(double) * 9)             # <<<<<<<<<<<<<<
 *         T = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,nwat*9,9): # loop over all coordinates of atoms of water molecules
 */
                __pyx_v_B = ((double *)malloc(((sizeof(double)) * 9)));

                /* "src/helpers/helpers.pyx":836
 *     with nogil, parallel():
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)             # <<<<<<<<<<<<<<
 *         for i in prange(0,nwat*9,9): # loop over all coordinates of atoms of water molecules
 *             for k in range(9):
 */
                __pyx_v_T = ((double *)malloc(((sizeof(double)) * 9)));

                /* "src/helpers/helpers.pyx":837
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,nwat*9,9): # loop over all coordinates of atoms of water molecules             # <<<<<<<<<<<<<<
 *             for k in range(9):
 *                 B[k] = 0.0
 */
                __pyx_t_8 = (__pyx_v_nwat * 9);
                if ((9 == 0)) abort();
                {
                    double __pyx_parallel_temp0 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp1 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp2 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp3 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp4 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp5 = ((double)__PYX_NAN());
                    int __pyx_parallel_temp6 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp7 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp8 = ((int)0xbad0bad0);
                    double __pyx_parallel_temp9 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp10 = ((double)__PYX_NAN());
                    const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
                    PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
                    int __pyx_parallel_why;
                    __pyx_parallel_why = 0;
                    __pyx_t_10 = (__pyx_t_8 - 0 + 9 - 9/abs(9)) / 9;
                    if (__pyx_t_10 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_H1x) lastprivate(__pyx_v_H1y) lastprivate(__pyx_v_H1z) lastprivate(__pyx_v_H2x) lastprivate(__pyx_v_H2y) lastprivate(__pyx_v_H2z) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_ind) lastprivate(__pyx_v_k) lastprivate(__pyx_v_n2) lastprivate(__pyx_v_n3)
                        #endif /* _OPENMP */
                        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_10; __pyx_t_9++){
                            if (__pyx_parallel_why < 2)
                            {
                                __pyx_v_i = (int)(0 + 9 * __pyx_t_9);
                                /* Initialize private variables to invalid values */
                                __pyx_v_H1x = ((double)__PYX_NAN());
                                __pyx_v_H1y = ((double)__PYX_NAN());
                                __pyx_v_H1z = ((double)__PYX_NAN());
                                __pyx_v_H2x = ((double)__PYX_NAN());
                                __pyx_v_H2y = ((double)__PYX_NAN());
                                __pyx_v_H2z = ((double)__PYX_NAN());
                                __pyx_v_ind = ((int)0xbad0bad0);
                                __pyx_v_k = ((int)0xbad0bad0);
                                __pyx_v_n2 = ((double)__PYX_NAN());
                                __pyx_v_n3 = ((double)__PYX_NAN());

                                /* "src/helpers/helpers.pyx":838
 *         T = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,nwat*9,9): # loop over all coordinates of atoms of water molecules
 *             for k in range(9):             # <<<<<<<<<<<<<<
 *                 B[k] = 0.0
 *                 T[k] = 0.0
 */
                                for (__pyx_t_11 = 0; __pyx_t_11 < 9; __pyx_t_11+=1) {
                                  __pyx_v_k = __pyx_t_11;

                                  /* "src/helpers/helpers.pyx":839
 *         for i in prange(0,nwat*9,9): # loop over all coordinates of atoms of water molecules
 *             for k in range(9):
 *                 B[k] = 0.0             # <<<<<<<<<<<<<<
 *                 T[k] = 0.0
 * 
 */
                                  (__pyx_v_B[__pyx_v_k]) = 0.0;

                                  /* "src/helpers/helpers.pyx":840
 *             for k in range(9):
 *                 B[k] = 0.0
 *                 T[k] = 0.0             # <<<<<<<<<<<<<<
 * 
 *             H1x = xyz[i+3]-xyz[i]
 */
                                  (__pyx_v_T[__pyx_v_k]) = 0.0;
                                }

                                /* "src/helpers/helpers.pyx":842
 *                 T[k] = 0.0
 * 
 *             H1x = xyz[i+3]-xyz[i]             # <<<<<<<<<<<<<<
 *             H1y = xyz[i+4]-xyz[i+1]
 *             H1z = xyz[i+5]-xyz[i+2]
 */
                                __pyx_v_H1x = ((__pyx_v_xyz[(__pyx_v_i + 3)]) - (__pyx_v_xyz[__pyx_v_i]));

                                /* "src/helpers/helpers.pyx":843
 * 
 *             H1x = xyz[i+3]-xyz[i]
 *             H1y = xyz[i+4]-xyz[i+1]             # <<<<<<<<<<<<<<
 *             H1z = xyz[i+5]-xyz[i+2]
 *             H2x = xyz[i+6]-xyz[i]
 */
                                __pyx_v_H1y = ((__pyx_v_xyz[(__pyx_v_i + 4)]) - (__pyx_v_xyz[(__pyx_v_i + 1)]));

                                /* "src/helpers/helpers.pyx":844
 *             H1x = xyz[i+3]-xyz[i]
 *             H1y = xyz[i+4]-xyz[i+1]
 *             H1z = xyz[i+5]-xyz[i+2]             # <<<<<<<<<<<<<<
 *             H2x = xyz[i+6]-xyz[i]
 *             H2y = xyz[i+7]-xyz[i+1]
 */
                                __pyx_v_H1z = ((__pyx_v_xyz[(__pyx_v_i + 5)]) - (__pyx_v_xyz[(__pyx_v_i + 2)]));

                                /* "src/helpers/helpers.pyx":845
 *             H1y = xyz[i+4]-xyz[i+1]
 *             H1z = xyz[i+5]-xyz[i+2]
 *             H2x = xyz[i+6]-xyz[i]             # <<<<<<<<<<<<<<
 *             H2y = xyz[i+7]-xyz[i+1]
 *             H2z = xyz[i+8]-xyz[i+2]
 */
                                __pyx_v_H2x = ((__pyx_v_xyz[(__pyx_v_i + 6)]) - (__pyx_v_xyz[__pyx_v_i]));

                                /* "src/helpers/helpers.pyx":846
 *             H1z = xyz[i+5]-xyz[i+2]
 *             H2x = xyz[i+6]-xyz[i]
 *             H2y = xyz[i+7]-xyz[i+1]             # <<<<<<<<<<<<<<
 *             H2z = xyz[i+8]-xyz[i+2]
 * 
 */
                                __pyx_v_H2y = ((__pyx_v_xyz[(__pyx_v_i + 7)]) - (__pyx_v_xyz[(__pyx_v_i + 1)]));

                                /* "src/helpers/helpers.pyx":847
 *             H2x = xyz[i+6]-xyz[i]
 *             H2y = xyz[i+7]-xyz[i+1]
 *             H2z = xyz[i+8]-xyz[i+2]             # <<<<<<<<<<<<<<
 * 
 *             B[3] = (H1x-H2x)
 */
                                __pyx_v_H2z = ((__pyx_v_xyz[(__pyx_v_i + 8)]) - (__pyx_v_xyz[(__pyx_v_i + 2)]));

                                /* "src/helpers/helpers.pyx":849
 *             H2z = xyz[i+8]-xyz[i+2]
 * 
 *             B[3] = (H1x-H2x)             # <<<<<<<<<<<<<<
 *             B[4] = (H1y-H2y)
 *             B[5] = (H1z-H2z)
 */
                                (__pyx_v_B[3]) = (__pyx_v_H1x - __pyx_v_H2x);

                                /* "src/helpers/helpers.pyx":850
 * 
 *             B[3] = (H1x-H2x)
 *             B[4] = (H1y-H2y)             # <<<<<<<<<<<<<<
 *             B[5] = (H1z-H2z)
 *             B[6] = (H1x+H2x)
 */
                                (__pyx_v_B[4]) = (__pyx_v_H1y - __pyx_v_H2y);

                                /* "src/helpers/helpers.pyx":851
 *             B[3] = (H1x-H2x)
 *             B[4] = (H1y-H2y)
 *             B[5] = (H1z-H2z)             # <<<<<<<<<<<<<<
 *             B[6] = (H1x+H2x)
 *             B[7] = (H1y+H2y)
 */
                                (__pyx_v_B[5]) = (__pyx_v_H1z - __pyx_v_H2z);

                                /* "src/helpers/helpers.pyx":852
 *             B[4] = (H1y-H2y)
 *             B[5] = (H1z-H2z)
 *             B[6] = (H1x+H2x)             # <<<<<<<<<<<<<<
 *             B[7] = (H1y+H2y)
 *             B[8] = (H1z+H2z)
 */
                                (__pyx_v_B[6]) = (__pyx_v_H1x + __pyx_v_H2x);

                                /* "src/helpers/helpers.pyx":853
 *             B[5] = (H1z-H2z)
 *             B[6] = (H1x+H2x)
 *             B[7] = (H1y+H2y)             # <<<<<<<<<<<<<<
 *             B[8] = (H1z+H2z)
 * 
 */
                                (__pyx_v_B[7]) = (__pyx_v_H1y + __pyx_v_H2y);

                                /* "src/helpers/helpers.pyx":854
 *             B[6] = (H1x+H2x)
 *             B[7] = (H1y+H2y)
 *             B[8] = (H1z+H2z)             # <<<<<<<<<<<<<<
 * 
 *             n2 = (B[3]*B[3]+B[4]*B[4]+B[5]*B[5])**.5 # normalization Bvec_2
 */
                                (__pyx_v_B[8]) = (__pyx_v_H1z + __pyx_v_H2z);

                                /* "src/helpers/helpers.pyx":856
 *             B[8] = (H1z+H2z)
 * 
 *             n2 = (B[3]*B[3]+B[4]*B[4]+B[5]*B[5])**.5 # normalization Bvec_2             # <<<<<<<<<<<<<<
 *             n3 = (B[6]*B[6]+B[7]*B[7]+B[8]*B[8])**.5 # normalization Bvec_3
 * 
 */
                                __pyx_v_n2 = pow(((((__pyx_v_B[3]) * (__pyx_v_B[3])) + ((__pyx_v_B[4]) * (__pyx_v_B[4]))) + ((__pyx_v_B[5]) * (__pyx_v_B[5]))), .5);

                                /* "src/helpers/helpers.pyx":857
 * 
 *             n2 = (B[3]*B[3]+B[4]*B[4]+B[5]*B[5])**.5 # normalization Bvec_2
 *             n3 = (B[6]*B[6]+B[7]*B[7]+B[8]*B[8])**.5 # normalization Bvec_3             # <<<<<<<<<<<<<<
 * 
 *             B[3] /= n2
 */
                                __pyx_v_n3 = pow(((((__pyx_v_B[6]) * (__pyx_v_B[6])) + ((__pyx_v_B[7]) * (__pyx_v_B[7]))) + ((__pyx_v_B[8]) * (__pyx_v_B[8]))), .5);

                                /* "src/helpers/helpers.pyx":859
 *             n3 = (B[6]*B[6]+B[7]*B[7]+B[8]*B[8])**.5 # normalization Bvec_3
 * 
 *             B[3] /= n2             # <<<<<<<<<<<<<<
 *             B[4] /= n2
 *             B[5] /= n2
 */
                                __pyx_t_12 = 3;
                                if (unlikely(__pyx_v_n2 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 859, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_12]) = ((__pyx_v_B[__pyx_t_12]) / __pyx_v_n2);

                                /* "src/helpers/helpers.pyx":860
 * 
 *             B[3] /= n2
 *             B[4] /= n2             # <<<<<<<<<<<<<<
 *             B[5] /= n2
 *             B[6] /= n3
 */
                                __pyx_t_12 = 4;
                                if (unlikely(__pyx_v_n2 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 860, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_12]) = ((__pyx_v_B[__pyx_t_12]) / __pyx_v_n2);

                                /* "src/helpers/helpers.pyx":861
 *             B[3] /= n2
 *             B[4] /= n2
 *             B[5] /= n2             # <<<<<<<<<<<<<<
 *             B[6] /= n3
 *             B[7] /= n3
 */
                                __pyx_t_12 = 5;
                                if (unlikely(__pyx_v_n2 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 861, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_12]) = ((__pyx_v_B[__pyx_t_12]) / __pyx_v_n2);

                                /* "src/helpers/helpers.pyx":862
 *             B[4] /= n2
 *             B[5] /= n2
 *             B[6] /= n3             # <<<<<<<<<<<<<<
 *             B[7] /= n3
 *             B[8] /= n3
 */
                                __pyx_t_12 = 6;
                                if (unlikely(__pyx_v_n3 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 862, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_12]) = ((__pyx_v_B[__pyx_t_12]) / __pyx_v_n3);

                                /* "src/helpers/helpers.pyx":863
 *             B[5] /= n2
 *             B[6] /= n3
 *             B[7] /= n3             # <<<<<<<<<<<<<<
 *             B[8] /= n3
 * 
 */
                                __pyx_t_12 = 7;
                                if (unlikely(__pyx_v_n3 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 863, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_12]) = ((__pyx_v_B[__pyx_t_12]) / __pyx_v_n3);

                                /* "src/helpers/helpers.pyx":864
 *             B[6] /= n3
 *             B[7] /= n3
 *             B[8] /= n3             # <<<<<<<<<<<<<<
 * 
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 */
                                __pyx_t_12 = 8;
                                if (unlikely(__pyx_v_n3 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 864, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_12]) = ((__pyx_v_B[__pyx_t_12]) / __pyx_v_n3);

                                /* "src/helpers/helpers.pyx":866
 *             B[8] /= n3
 * 
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product             # <<<<<<<<<<<<<<
 *             B[1] = B[5]*B[6]-B[3]*B[8]
 *             B[2] = B[3]*B[7]-B[4]*B[6]
 */
                                (__pyx_v_B[0]) = (((__pyx_v_B[4]) * (__pyx_v_B[8])) - ((__pyx_v_B[5]) * (__pyx_v_B[7])));

                                /* "src/helpers/helpers.pyx":867
 * 
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 *             B[1] = B[5]*B[6]-B[3]*B[8]             # <<<<<<<<<<<<<<
 *             B[2] = B[3]*B[7]-B[4]*B[6]
 * 
 */
                                (__pyx_v_B[1]) = (((__pyx_v_B[5]) * (__pyx_v_B[6])) - ((__pyx_v_B[3]) * (__pyx_v_B[8])));

                                /* "src/helpers/helpers.pyx":868
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 *             B[1] = B[5]*B[6]-B[3]*B[8]
 *             B[2] = B[3]*B[7]-B[4]*B[6]             # <<<<<<<<<<<<<<
 * 
 *             # B dot T
 */
                                (__pyx_v_B[2]) = (((__pyx_v_B[3]) * (__pyx_v_B[7])) - ((__pyx_v_B[4]) * (__pyx_v_B[6])));

                                /* "src/helpers/helpers.pyx":871
 * 
 *             # B dot T
 *             T[0] = B[0]*Exx             # <<<<<<<<<<<<<<
 *             T[1] = B[1]*Exx
 *             T[2] = B[2]*Exx
 */
                                (__pyx_v_T[0]) = ((__pyx_v_B[0]) * __pyx_v_Exx);

                                /* "src/helpers/helpers.pyx":872
 *             # B dot T
 *             T[0] = B[0]*Exx
 *             T[1] = B[1]*Exx             # <<<<<<<<<<<<<<
 *             T[2] = B[2]*Exx
 *             T[3] = B[3]*Eyy
 */
                                (__pyx_v_T[1]) = ((__pyx_v_B[1]) * __pyx_v_Exx);

                                /* "src/helpers/helpers.pyx":873
 *             T[0] = B[0]*Exx
 *             T[1] = B[1]*Exx
 *             T[2] = B[2]*Exx             # <<<<<<<<<<<<<<
 *             T[3] = B[3]*Eyy
 *             T[4] = B[4]*Eyy
 */
                                (__pyx_v_T[2]) = ((__pyx_v_B[2]) * __pyx_v_Exx);

                                /* "src/helpers/helpers.pyx":874
 *             T[1] = B[1]*Exx
 *             T[2] = B[2]*Exx
 *             T[3] = B[3]*Eyy             # <<<<<<<<<<<<<<
 *             T[4] = B[4]*Eyy
 *             T[5] = B[5]*Eyy
 */
                                (__pyx_v_T[3]) = ((__pyx_v_B[3]) * __pyx_v_Eyy);

                                /* "src/helpers/helpers.pyx":875
 *             T[2] = B[2]*Exx
 *             T[3] = B[3]*Eyy
 *             T[4] = B[4]*Eyy             # <<<<<<<<<<<<<<
 *             T[5] = B[5]*Eyy
 *             T[6] = B[6]*Ezz
 */
                                (__pyx_v_T[4]) = ((__pyx_v_B[4]) * __pyx_v_Eyy);

                                /* "src/helpers/helpers.pyx":876
 *             T[3] = B[3]*Eyy
 *             T[4] = B[4]*Eyy
 *             T[5] = B[5]*Eyy             # <<<<<<<<<<<<<<
 *             T[6] = B[6]*Ezz
 *             T[7] = B[7]*Ezz
 */
                                (__pyx_v_T[5]) = ((__pyx_v_B[5]) * __pyx_v_Eyy);

                                /* "src/helpers/helpers.pyx":877
 *             T[4] = B[4]*Eyy
 *             T[5] = B[5]*Eyy
 *             T[6] = B[6]*Ezz             # <<<<<<<<<<<<<<
 *             T[7] = B[7]*Ezz
 *             T[8] = B[8]*Ezz
 */
                                (__pyx_v_T[6]) = ((__pyx_v_B[6]) * __pyx_v_Ezz);

                                /* "src/helpers/helpers.pyx":878
 *             T[5] = B[5]*Eyy
 *             T[6] = B[6]*Ezz
 *             T[7] = B[7]*Ezz             # <<<<<<<<<<<<<<
 *             T[8] = B[8]*Ezz
 * 
 */
                                (__pyx_v_T[7]) = ((__pyx_v_B[7]) * __pyx_v_Ezz);

                                /* "src/helpers/helpers.pyx":879
 *             T[6] = B[6]*Ezz
 *             T[7] = B[7]*Ezz
 *             T[8] = B[8]*Ezz             # <<<<<<<<<<<<<<
 * 
 *             ind = (i/9)*6
 */
                                (__pyx_v_T[8]) = ((__pyx_v_B[8]) * __pyx_v_Ezz);

                                /* "src/helpers/helpers.pyx":881
 *             T[8] = B[8]*Ezz
 * 
 *             ind = (i/9)*6             # <<<<<<<<<<<<<<
 * 
 *             # (B dot T) dot B.T
 */
                                __pyx_v_ind = (__Pyx_div_long(__pyx_v_i, 9) * 6);

                                /* "src/helpers/helpers.pyx":884
 * 
 *             # (B dot T) dot B.T
 *             dipt[ind]   = T[0]*B[0]+T[3]*B[3]+T[6]*B[6] # 11 .... here B.T is taken directly from B             # <<<<<<<<<<<<<<
 *             dipt[ind+1] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7] # 22
 *             dipt[ind+2] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8] # 33
 */
                                (__pyx_v_dipt[__pyx_v_ind]) = ((((__pyx_v_T[0]) * (__pyx_v_B[0])) + ((__pyx_v_T[3]) * (__pyx_v_B[3]))) + ((__pyx_v_T[6]) * (__pyx_v_B[6])));

                                /* "src/helpers/helpers.pyx":885
 *             # (B dot T) dot B.T
 *             dipt[ind]   = T[0]*B[0]+T[3]*B[3]+T[6]*B[6] # 11 .... here B.T is taken directly from B
 *             dipt[ind+1] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7] # 22             # <<<<<<<<<<<<<<
 *             dipt[ind+2] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8] # 33
 *             dipt[ind+3] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6] # 21
 */
                                (__pyx_v_dipt[(__pyx_v_ind + 1)]) = ((((__pyx_v_T[1]) * (__pyx_v_B[1])) + ((__pyx_v_T[4]) * (__pyx_v_B[4]))) + ((__pyx_v_T[7]) * (__pyx_v_B[7])));

                                /* "src/helpers/helpers.pyx":886
 *             dipt[ind]   = T[0]*B[0]+T[3]*B[3]+T[6]*B[6] # 11 .... here B.T is taken directly from B
 *             dipt[ind+1] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7] # 22
 *             dipt[ind+2] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8] # 33             # <<<<<<<<<<<<<<
 *             dipt[ind+3] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6] # 21
 *             dipt[ind+4] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6] # 31
 */
                                (__pyx_v_dipt[(__pyx_v_ind + 2)]) = ((((__pyx_v_T[2]) * (__pyx_v_B[2])) + ((__pyx_v_T[5]) * (__pyx_v_B[5]))) + ((__pyx_v_T[8]) * (__pyx_v_B[8])));

                                /* "src/helpers/helpers.pyx":887
 *             dipt[ind+1] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7] # 22
 *             dipt[ind+2] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8] # 33
 *             dipt[ind+3] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6] # 21             # <<<<<<<<<<<<<<
 *             dipt[ind+4] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6] # 31
 *             dipt[ind+5] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7] # 32 .... matrix is symmetric
 */
                                (__pyx_v_dipt[(__pyx_v_ind + 3)]) = ((((__pyx_v_T[1]) * (__pyx_v_B[0])) + ((__pyx_v_T[4]) * (__pyx_v_B[3]))) + ((__pyx_v_T[7]) * (__pyx_v_B[6])));

                                /* "src/helpers/helpers.pyx":888
 *             dipt[ind+2] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8] # 33
 *             dipt[ind+3] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6] # 21
 *             dipt[ind+4] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6] # 31             # <<<<<<<<<<<<<<
 *             dipt[ind+5] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7] # 32 .... matrix is symmetric
 * 
 */
                                (__pyx_v_dipt[(__pyx_v_ind + 4)]) = ((((__pyx_v_T[2]) * (__pyx_v_B[0])) + ((__pyx_v_T[5]) * (__pyx_v_B[3]))) + ((__pyx_v_T[8]) * (__pyx_v_B[6])));

                                /* "src/helpers/helpers.pyx":889
 *             dipt[ind+3] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6] # 21
 *             dipt[ind+4] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6] # 31
 *             dipt[ind+5] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7] # 32 .... matrix is symmetric             # <<<<<<<<<<<<<<
 * 
 *         free(B)
 */
                                (__pyx_v_dipt[(__pyx_v_ind + 5)]) = ((((__pyx_v_T[2]) * (__pyx_v_B[1])) + ((__pyx_v_T[5]) * (__pyx_v_B[4]))) + ((__pyx_v_T[8]) * (__pyx_v_B[7])));
                                goto __pyx_L17;
                                __pyx_L12_error:;
                                {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    #ifdef _OPENMP
                                    #pragma omp flush(__pyx_parallel_exc_type)
                                    #endif /* _OPENMP */
                                    if (!__pyx_parallel_exc_type) {
                                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                                    }
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                }
                                __pyx_parallel_why = 4;
                                goto __pyx_L16;
                                __pyx_L16:;
                                #ifdef _OPENMP
                                #pragma omp critical(__pyx_parallel_lastprivates0)
                                #endif /* _OPENMP */
                                {
                                    __pyx_parallel_temp0 = __pyx_v_H1x;
                                    __pyx_parallel_temp1 = __pyx_v_H1y;
                                    __pyx_parallel_temp2 = __pyx_v_H1z;
                                    __pyx_parallel_temp3 = __pyx_v_H2x;
                                    __pyx_parallel_temp4 = __pyx_v_H2y;
                                    __pyx_parallel_temp5 = __pyx_v_H2z;
                                    __pyx_parallel_temp6 = __pyx_v_i;
                                    __pyx_parallel_temp7 = __pyx_v_ind;
                                    __pyx_parallel_temp8 = __pyx_v_k;
                                    __pyx_parallel_temp9 = __pyx_v_n2;
                                    __pyx_parallel_temp10 = __pyx_v_n3;
                                }
                                __pyx_L17:;
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_why)
                                #endif /* _OPENMP */
                            }
                        }
                    }
                    if (__pyx_parallel_exc_type) {
                      /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
                      __pyx_parallel_why = 4;
                    }
                    if (__pyx_parallel_why) {
                      __pyx_v_H1x = __pyx_parallel_temp0;
                      __pyx_v_H1y = __pyx_parallel_temp1;
                      __pyx_v_H1z = __pyx_parallel_temp2;
                      __pyx_v_H2x = __pyx_parallel_temp3;
                      __pyx_v_H2y = __pyx_parallel_temp4;
                      __pyx_v_H2z = __pyx_parallel_temp5;
                      __pyx_v_i = __pyx_parallel_temp6;
                      __pyx_v_ind = __pyx_parallel_temp7;
                      __pyx_v_k = __pyx_parallel_temp8;
                      __pyx_v_n2 = __pyx_parallel_temp9;
                      __pyx_v_n3 = __pyx_parallel_temp10;
                      switch (__pyx_parallel_why) {
                            case 4:
                        {
                            #ifdef WITH_THREAD
                            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                            #endif
                            __Pyx_GIVEREF(__pyx_parallel_exc_type);
                            __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                            __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                            #ifdef WITH_THREAD
                            __Pyx_PyGILState_Release(__pyx_gilstate_save);
                            #endif
                        }
                        goto __pyx_L8_error;
                      }
                    }
                }

                /* "src/helpers/helpers.pyx":891
 *             dipt[ind+5] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7] # 32 .... matrix is symmetric
 * 
 *         free(B)             # <<<<<<<<<<<<<<
 *         free(T)
 * 
 */
                free(__pyx_v_B);

                /* "src/helpers/helpers.pyx":892
 * 
 *         free(B)
 *         free(T)             # <<<<<<<<<<<<<<
 * 
 *     return py_dipt
 */
                free(__pyx_v_T);
                goto __pyx_L19;
                __pyx_L8_error:;
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    #ifdef _OPENMP
                    #pragma omp flush(__pyx_parallel_exc_type)
                    #endif /* _OPENMP */
                    if (!__pyx_parallel_exc_type) {
                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                    }
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                __pyx_parallel_why = 4;
                goto __pyx_L19;
                __pyx_L19:;
                #ifdef _OPENMP
                Py_END_ALLOW_THREADS
                #else
{
#ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                #endif /* _OPENMP */
                /* Clean up any temporaries */
                #ifdef WITH_THREAD
                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                #endif
                #ifndef _OPENMP
}
#endif /* _OPENMP */
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              switch (__pyx_parallel_why) {
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L4_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":834
 *     cdef double *dipt = <double *> py_dipt.data
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":894
 *         free(T)
 * 
 *     return py_dipt             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_dipt));
  __pyx_r = ((PyObject *)__pyx_v_py_dipt);
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":822
 * 
 * @cython.boundscheck(False)
 * def NQRself(np.ndarray[np.float64_t,ndim=2] py_xyz):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_dipt.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_xyz.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("newanalysis.helpers.NQRself", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_dipt.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_xyz.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_dipt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":897
 * 
 * @cython.boundscheck(False)
 * def waterRotationMatrix(double [:,:] coor):             # <<<<<<<<<<<<<<
 *     cdef int nwat = len(coor)/3 # number of water molecules
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_47waterRotationMatrix(PyObject *__pyx_self, PyObject *__pyx_arg_coor); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_47waterRotationMatrix = {"waterRotationMatrix", (PyCFunction)__pyx_pw_11newanalysis_7helpers_47waterRotationMatrix, METH_O, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_47waterRotationMatrix(PyObject *__pyx_self, PyObject *__pyx_arg_coor) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("waterRotationMatrix (wrapper)", 0);
  assert(__pyx_arg_coor); {
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_arg_coor, PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 897, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.waterRotationMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_46waterRotationMatrix(__pyx_self, __pyx_v_coor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_46waterRotationMatrix(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor) {
  int __pyx_v_nwat;
  double __pyx_v_H1x;
  double __pyx_v_H1y;
  double __pyx_v_H1z;
  double __pyx_v_H2x;
  double __pyx_v_H2y;
  double __pyx_v_H2z;
  double __pyx_v_n2;
  double __pyx_v_n3;
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_ind;
  __Pyx_memviewslice __pyx_v_B_out = { 0, 0, { 0 }, { 0 }, { 0 } };
  double *__pyx_v_B;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  long __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("waterRotationMatrix", 0);

  /* "src/helpers/helpers.pyx":898
 * @cython.boundscheck(False)
 * def waterRotationMatrix(double [:,:] coor):
 *     cdef int nwat = len(coor)/3 # number of water molecules             # <<<<<<<<<<<<<<
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 *     cdef int i, k, ind
 */
  __pyx_t_1 = __Pyx_MemoryView_Len(__pyx_v_coor); 
  __pyx_v_nwat = __Pyx_div_Py_ssize_t(__pyx_t_1, 3);

  /* "src/helpers/helpers.pyx":901
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 *     cdef int i, k, ind
 *     cdef double [:,:,:] B_out = np.zeros((nwat,3,3)) # rotation matrix to return from parallel code             # <<<<<<<<<<<<<<
 * 
 *     with nogil, parallel():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_nwat); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_int_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_B_out = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":903
 *     cdef double [:,:,:] B_out = np.zeros((nwat,3,3)) # rotation matrix to return from parallel code
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         B = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,nwat*3,3): # loop over all coordinates of atoms of water molecules
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel private(__pyx_v_B) private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_7, __pyx_t_8, __pyx_t_9) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
            #endif /* _OPENMP */
            {
                #ifdef _OPENMP
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                Py_BEGIN_ALLOW_THREADS
                #endif /* _OPENMP */
                /* Initialize private variables to invalid values */
                __pyx_v_B = ((double *)1);

                /* "src/helpers/helpers.pyx":904
 * 
 *     with nogil, parallel():
 *         B = <double *> malloc(sizeof(double) * 9)             # <<<<<<<<<<<<<<
 *         for i in prange(0,nwat*3,3): # loop over all coordinates of atoms of water molecules
 *             for k in range(9):
 */
                __pyx_v_B = ((double *)malloc(((sizeof(double)) * 9)));

                /* "src/helpers/helpers.pyx":905
 *     with nogil, parallel():
 *         B = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,nwat*3,3): # loop over all coordinates of atoms of water molecules             # <<<<<<<<<<<<<<
 *             for k in range(9):
 *                 B[k] = 0.0
 */
                __pyx_t_7 = (__pyx_v_nwat * 3);
                if ((3 == 0)) abort();
                {
                    double __pyx_parallel_temp0 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp1 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp2 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp3 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp4 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp5 = ((double)__PYX_NAN());
                    int __pyx_parallel_temp6 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp7 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp8 = ((int)0xbad0bad0);
                    double __pyx_parallel_temp9 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp10 = ((double)__PYX_NAN());
                    const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
                    PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
                    int __pyx_parallel_why;
                    __pyx_parallel_why = 0;
                    __pyx_t_9 = (__pyx_t_7 - 0 + 3 - 3/abs(3)) / 3;
                    if (__pyx_t_9 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_H1x) lastprivate(__pyx_v_H1y) lastprivate(__pyx_v_H1z) lastprivate(__pyx_v_H2x) lastprivate(__pyx_v_H2y) lastprivate(__pyx_v_H2z) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_ind) lastprivate(__pyx_v_k) lastprivate(__pyx_v_n2) lastprivate(__pyx_v_n3)
                        #endif /* _OPENMP */
                        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_9; __pyx_t_8++){
                            if (__pyx_parallel_why < 2)
                            {
                                __pyx_v_i = (int)(0 + 3 * __pyx_t_8);
                                /* Initialize private variables to invalid values */
                                __pyx_v_H1x = ((double)__PYX_NAN());
                                __pyx_v_H1y = ((double)__PYX_NAN());
                                __pyx_v_H1z = ((double)__PYX_NAN());
                                __pyx_v_H2x = ((double)__PYX_NAN());
                                __pyx_v_H2y = ((double)__PYX_NAN());
                                __pyx_v_H2z = ((double)__PYX_NAN());
                                __pyx_v_ind = ((int)0xbad0bad0);
                                __pyx_v_k = ((int)0xbad0bad0);
                                __pyx_v_n2 = ((double)__PYX_NAN());
                                __pyx_v_n3 = ((double)__PYX_NAN());

                                /* "src/helpers/helpers.pyx":906
 *         B = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,nwat*3,3): # loop over all coordinates of atoms of water molecules
 *             for k in range(9):             # <<<<<<<<<<<<<<
 *                 B[k] = 0.0
 * 
 */
                                for (__pyx_t_10 = 0; __pyx_t_10 < 9; __pyx_t_10+=1) {
                                  __pyx_v_k = __pyx_t_10;

                                  /* "src/helpers/helpers.pyx":907
 *         for i in prange(0,nwat*3,3): # loop over all coordinates of atoms of water molecules
 *             for k in range(9):
 *                 B[k] = 0.0             # <<<<<<<<<<<<<<
 * 
 *             H1x = coor[i+1,0]-coor[i,0] # rel. coordinates of H1 with respect to O
 */
                                  (__pyx_v_B[__pyx_v_k]) = 0.0;
                                }

                                /* "src/helpers/helpers.pyx":909
 *                 B[k] = 0.0
 * 
 *             H1x = coor[i+1,0]-coor[i,0] # rel. coordinates of H1 with respect to O             # <<<<<<<<<<<<<<
 *             H1y = coor[i+1,1]-coor[i,1]
 *             H1z = coor[i+1,2]-coor[i,2]
 */
                                __pyx_t_11 = (__pyx_v_i + 1);
                                __pyx_t_12 = 0;
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coor.shape[1];
                                __pyx_t_13 = __pyx_v_i;
                                __pyx_t_14 = 0;
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coor.shape[0];
                                if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[1];
                                __pyx_v_H1x = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_11 * __pyx_v_coor.strides[0]) ) + __pyx_t_12 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_13 * __pyx_v_coor.strides[0]) ) + __pyx_t_14 * __pyx_v_coor.strides[1]) ))));

                                /* "src/helpers/helpers.pyx":910
 * 
 *             H1x = coor[i+1,0]-coor[i,0] # rel. coordinates of H1 with respect to O
 *             H1y = coor[i+1,1]-coor[i,1]             # <<<<<<<<<<<<<<
 *             H1z = coor[i+1,2]-coor[i,2]
 * 
 */
                                __pyx_t_14 = (__pyx_v_i + 1);
                                __pyx_t_13 = 1;
                                if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[0];
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coor.shape[1];
                                __pyx_t_12 = __pyx_v_i;
                                __pyx_t_11 = 1;
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coor.shape[0];
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[1];
                                __pyx_v_H1y = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_14 * __pyx_v_coor.strides[0]) ) + __pyx_t_13 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_12 * __pyx_v_coor.strides[0]) ) + __pyx_t_11 * __pyx_v_coor.strides[1]) ))));

                                /* "src/helpers/helpers.pyx":911
 *             H1x = coor[i+1,0]-coor[i,0] # rel. coordinates of H1 with respect to O
 *             H1y = coor[i+1,1]-coor[i,1]
 *             H1z = coor[i+1,2]-coor[i,2]             # <<<<<<<<<<<<<<
 * 
 *             H2x = coor[i+2,0]-coor[i,0] # rel. coordinates of H2 with respect to O
 */
                                __pyx_t_11 = (__pyx_v_i + 1);
                                __pyx_t_12 = 2;
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coor.shape[1];
                                __pyx_t_13 = __pyx_v_i;
                                __pyx_t_14 = 2;
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coor.shape[0];
                                if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[1];
                                __pyx_v_H1z = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_11 * __pyx_v_coor.strides[0]) ) + __pyx_t_12 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_13 * __pyx_v_coor.strides[0]) ) + __pyx_t_14 * __pyx_v_coor.strides[1]) ))));

                                /* "src/helpers/helpers.pyx":913
 *             H1z = coor[i+1,2]-coor[i,2]
 * 
 *             H2x = coor[i+2,0]-coor[i,0] # rel. coordinates of H2 with respect to O             # <<<<<<<<<<<<<<
 *             H2y = coor[i+2,1]-coor[i,1]
 *             H2z = coor[i+2,2]-coor[i,2]
 */
                                __pyx_t_14 = (__pyx_v_i + 2);
                                __pyx_t_13 = 0;
                                if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[0];
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coor.shape[1];
                                __pyx_t_12 = __pyx_v_i;
                                __pyx_t_11 = 0;
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coor.shape[0];
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[1];
                                __pyx_v_H2x = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_14 * __pyx_v_coor.strides[0]) ) + __pyx_t_13 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_12 * __pyx_v_coor.strides[0]) ) + __pyx_t_11 * __pyx_v_coor.strides[1]) ))));

                                /* "src/helpers/helpers.pyx":914
 * 
 *             H2x = coor[i+2,0]-coor[i,0] # rel. coordinates of H2 with respect to O
 *             H2y = coor[i+2,1]-coor[i,1]             # <<<<<<<<<<<<<<
 *             H2z = coor[i+2,2]-coor[i,2]
 * 
 */
                                __pyx_t_11 = (__pyx_v_i + 2);
                                __pyx_t_12 = 1;
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coor.shape[1];
                                __pyx_t_13 = __pyx_v_i;
                                __pyx_t_14 = 1;
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coor.shape[0];
                                if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[1];
                                __pyx_v_H2y = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_11 * __pyx_v_coor.strides[0]) ) + __pyx_t_12 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_13 * __pyx_v_coor.strides[0]) ) + __pyx_t_14 * __pyx_v_coor.strides[1]) ))));

                                /* "src/helpers/helpers.pyx":915
 *             H2x = coor[i+2,0]-coor[i,0] # rel. coordinates of H2 with respect to O
 *             H2y = coor[i+2,1]-coor[i,1]
 *             H2z = coor[i+2,2]-coor[i,2]             # <<<<<<<<<<<<<<
 * 
 *             B[3] = (H1x-H2x)
 */
                                __pyx_t_14 = (__pyx_v_i + 2);
                                __pyx_t_13 = 2;
                                if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[0];
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coor.shape[1];
                                __pyx_t_12 = __pyx_v_i;
                                __pyx_t_11 = 2;
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coor.shape[0];
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[1];
                                __pyx_v_H2z = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_14 * __pyx_v_coor.strides[0]) ) + __pyx_t_13 * __pyx_v_coor.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_12 * __pyx_v_coor.strides[0]) ) + __pyx_t_11 * __pyx_v_coor.strides[1]) ))));

                                /* "src/helpers/helpers.pyx":917
 *             H2z = coor[i+2,2]-coor[i,2]
 * 
 *             B[3] = (H1x-H2x)             # <<<<<<<<<<<<<<
 *             B[4] = (H1y-H2y)
 *             B[5] = (H1z-H2z)
 */
                                (__pyx_v_B[3]) = (__pyx_v_H1x - __pyx_v_H2x);

                                /* "src/helpers/helpers.pyx":918
 * 
 *             B[3] = (H1x-H2x)
 *             B[4] = (H1y-H2y)             # <<<<<<<<<<<<<<
 *             B[5] = (H1z-H2z)
 *             B[6] = (H1x+H2x)
 */
                                (__pyx_v_B[4]) = (__pyx_v_H1y - __pyx_v_H2y);

                                /* "src/helpers/helpers.pyx":919
 *             B[3] = (H1x-H2x)
 *             B[4] = (H1y-H2y)
 *             B[5] = (H1z-H2z)             # <<<<<<<<<<<<<<
 *             B[6] = (H1x+H2x)
 *             B[7] = (H1y+H2y)
 */
                                (__pyx_v_B[5]) = (__pyx_v_H1z - __pyx_v_H2z);

                                /* "src/helpers/helpers.pyx":920
 *             B[4] = (H1y-H2y)
 *             B[5] = (H1z-H2z)
 *             B[6] = (H1x+H2x)             # <<<<<<<<<<<<<<
 *             B[7] = (H1y+H2y)
 *             B[8] = (H1z+H2z)
 */
                                (__pyx_v_B[6]) = (__pyx_v_H1x + __pyx_v_H2x);

                                /* "src/helpers/helpers.pyx":921
 *             B[5] = (H1z-H2z)
 *             B[6] = (H1x+H2x)
 *             B[7] = (H1y+H2y)             # <<<<<<<<<<<<<<
 *             B[8] = (H1z+H2z)
 * 
 */
                                (__pyx_v_B[7]) = (__pyx_v_H1y + __pyx_v_H2y);

                                /* "src/helpers/helpers.pyx":922
 *             B[6] = (H1x+H2x)
 *             B[7] = (H1y+H2y)
 *             B[8] = (H1z+H2z)             # <<<<<<<<<<<<<<
 * 
 *             n2 = (B[3]*B[3]+B[4]*B[4]+B[5]*B[5])**.5 # normalization Bvec_2
 */
                                (__pyx_v_B[8]) = (__pyx_v_H1z + __pyx_v_H2z);

                                /* "src/helpers/helpers.pyx":924
 *             B[8] = (H1z+H2z)
 * 
 *             n2 = (B[3]*B[3]+B[4]*B[4]+B[5]*B[5])**.5 # normalization Bvec_2             # <<<<<<<<<<<<<<
 *             n3 = (B[6]*B[6]+B[7]*B[7]+B[8]*B[8])**.5 # normalization Bvec_3
 * 
 */
                                __pyx_v_n2 = pow(((((__pyx_v_B[3]) * (__pyx_v_B[3])) + ((__pyx_v_B[4]) * (__pyx_v_B[4]))) + ((__pyx_v_B[5]) * (__pyx_v_B[5]))), .5);

                                /* "src/helpers/helpers.pyx":925
 * 
 *             n2 = (B[3]*B[3]+B[4]*B[4]+B[5]*B[5])**.5 # normalization Bvec_2
 *             n3 = (B[6]*B[6]+B[7]*B[7]+B[8]*B[8])**.5 # normalization Bvec_3             # <<<<<<<<<<<<<<
 * 
 *             B[3] /= n2
 */
                                __pyx_v_n3 = pow(((((__pyx_v_B[6]) * (__pyx_v_B[6])) + ((__pyx_v_B[7]) * (__pyx_v_B[7]))) + ((__pyx_v_B[8]) * (__pyx_v_B[8]))), .5);

                                /* "src/helpers/helpers.pyx":927
 *             n3 = (B[6]*B[6]+B[7]*B[7]+B[8]*B[8])**.5 # normalization Bvec_3
 * 
 *             B[3] /= n2             # <<<<<<<<<<<<<<
 *             B[4] /= n2
 *             B[5] /= n2
 */
                                __pyx_t_15 = 3;
                                if (unlikely(__pyx_v_n2 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 927, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n2);

                                /* "src/helpers/helpers.pyx":928
 * 
 *             B[3] /= n2
 *             B[4] /= n2             # <<<<<<<<<<<<<<
 *             B[5] /= n2
 *             B[6] /= n3
 */
                                __pyx_t_15 = 4;
                                if (unlikely(__pyx_v_n2 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 928, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n2);

                                /* "src/helpers/helpers.pyx":929
 *             B[3] /= n2
 *             B[4] /= n2
 *             B[5] /= n2             # <<<<<<<<<<<<<<
 *             B[6] /= n3
 *             B[7] /= n3
 */
                                __pyx_t_15 = 5;
                                if (unlikely(__pyx_v_n2 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 929, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n2);

                                /* "src/helpers/helpers.pyx":930
 *             B[4] /= n2
 *             B[5] /= n2
 *             B[6] /= n3             # <<<<<<<<<<<<<<
 *             B[7] /= n3
 *             B[8] /= n3
 */
                                __pyx_t_15 = 6;
                                if (unlikely(__pyx_v_n3 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 930, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n3);

                                /* "src/helpers/helpers.pyx":931
 *             B[5] /= n2
 *             B[6] /= n3
 *             B[7] /= n3             # <<<<<<<<<<<<<<
 *             B[8] /= n3
 * 
 */
                                __pyx_t_15 = 7;
                                if (unlikely(__pyx_v_n3 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 931, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n3);

                                /* "src/helpers/helpers.pyx":932
 *             B[6] /= n3
 *             B[7] /= n3
 *             B[8] /= n3             # <<<<<<<<<<<<<<
 * 
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 */
                                __pyx_t_15 = 8;
                                if (unlikely(__pyx_v_n3 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 932, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n3);

                                /* "src/helpers/helpers.pyx":934
 *             B[8] /= n3
 * 
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product             # <<<<<<<<<<<<<<
 *             B[1] = B[5]*B[6]-B[3]*B[8]
 *             B[2] = B[3]*B[7]-B[4]*B[6]
 */
                                (__pyx_v_B[0]) = (((__pyx_v_B[4]) * (__pyx_v_B[8])) - ((__pyx_v_B[5]) * (__pyx_v_B[7])));

                                /* "src/helpers/helpers.pyx":935
 * 
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 *             B[1] = B[5]*B[6]-B[3]*B[8]             # <<<<<<<<<<<<<<
 *             B[2] = B[3]*B[7]-B[4]*B[6]
 * 
 */
                                (__pyx_v_B[1]) = (((__pyx_v_B[5]) * (__pyx_v_B[6])) - ((__pyx_v_B[3]) * (__pyx_v_B[8])));

                                /* "src/helpers/helpers.pyx":936
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 *             B[1] = B[5]*B[6]-B[3]*B[8]
 *             B[2] = B[3]*B[7]-B[4]*B[6]             # <<<<<<<<<<<<<<
 * 
 *             ind =i/3
 */
                                (__pyx_v_B[2]) = (((__pyx_v_B[3]) * (__pyx_v_B[7])) - ((__pyx_v_B[4]) * (__pyx_v_B[6])));

                                /* "src/helpers/helpers.pyx":938
 *             B[2] = B[3]*B[7]-B[4]*B[6]
 * 
 *             ind =i/3             # <<<<<<<<<<<<<<
 * 
 *             B_out[ind,0,0] = B[0]
 */
                                __pyx_v_ind = __Pyx_div_long(__pyx_v_i, 3);

                                /* "src/helpers/helpers.pyx":940
 *             ind =i/3
 * 
 *             B_out[ind,0,0] = B[0]             # <<<<<<<<<<<<<<
 *             B_out[ind,0,1] = B[1]
 *             B_out[ind,0,2] = B[2]
 */
                                __pyx_t_11 = __pyx_v_ind;
                                __pyx_t_12 = 0;
                                __pyx_t_13 = 0;
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_B_out.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_B_out.shape[1];
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_B_out.shape[2];
                                *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_B_out.data + __pyx_t_11 * __pyx_v_B_out.strides[0]) ) + __pyx_t_12 * __pyx_v_B_out.strides[1]) ) + __pyx_t_13 * __pyx_v_B_out.strides[2]) )) = (__pyx_v_B[0]);

                                /* "src/helpers/helpers.pyx":941
 * 
 *             B_out[ind,0,0] = B[0]
 *             B_out[ind,0,1] = B[1]             # <<<<<<<<<<<<<<
 *             B_out[ind,0,2] = B[2]
 *             B_out[ind,1,0] = B[3]
 */
                                __pyx_t_13 = __pyx_v_ind;
                                __pyx_t_12 = 0;
                                __pyx_t_11 = 1;
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_B_out.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_B_out.shape[1];
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_B_out.shape[2];
                                *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_B_out.data + __pyx_t_13 * __pyx_v_B_out.strides[0]) ) + __pyx_t_12 * __pyx_v_B_out.strides[1]) ) + __pyx_t_11 * __pyx_v_B_out.strides[2]) )) = (__pyx_v_B[1]);

                                /* "src/helpers/helpers.pyx":942
 *             B_out[ind,0,0] = B[0]
 *             B_out[ind,0,1] = B[1]
 *             B_out[ind,0,2] = B[2]             # <<<<<<<<<<<<<<
 *             B_out[ind,1,0] = B[3]
 *             B_out[ind,1,1] = B[4]
 */
                                __pyx_t_11 = __pyx_v_ind;
                                __pyx_t_12 = 0;
                                __pyx_t_13 = 2;
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_B_out.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_B_out.shape[1];
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_B_out.shape[2];
                                *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_B_out.data + __pyx_t_11 * __pyx_v_B_out.strides[0]) ) + __pyx_t_12 * __pyx_v_B_out.strides[1]) ) + __pyx_t_13 * __pyx_v_B_out.strides[2]) )) = (__pyx_v_B[2]);

                                /* "src/helpers/helpers.pyx":943
 *             B_out[ind,0,1] = B[1]
 *             B_out[ind,0,2] = B[2]
 *             B_out[ind,1,0] = B[3]             # <<<<<<<<<<<<<<
 *             B_out[ind,1,1] = B[4]
 *             B_out[ind,1,2] = B[5]
 */
                                __pyx_t_13 = __pyx_v_ind;
                                __pyx_t_12 = 1;
                                __pyx_t_11 = 0;
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_B_out.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_B_out.shape[1];
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_B_out.shape[2];
                                *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_B_out.data + __pyx_t_13 * __pyx_v_B_out.strides[0]) ) + __pyx_t_12 * __pyx_v_B_out.strides[1]) ) + __pyx_t_11 * __pyx_v_B_out.strides[2]) )) = (__pyx_v_B[3]);

                                /* "src/helpers/helpers.pyx":944
 *             B_out[ind,0,2] = B[2]
 *             B_out[ind,1,0] = B[3]
 *             B_out[ind,1,1] = B[4]             # <<<<<<<<<<<<<<
 *             B_out[ind,1,2] = B[5]
 *             B_out[ind,2,0] = B[6]
 */
                                __pyx_t_11 = __pyx_v_ind;
                                __pyx_t_12 = 1;
                                __pyx_t_13 = 1;
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_B_out.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_B_out.shape[1];
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_B_out.shape[2];
                                *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_B_out.data + __pyx_t_11 * __pyx_v_B_out.strides[0]) ) + __pyx_t_12 * __pyx_v_B_out.strides[1]) ) + __pyx_t_13 * __pyx_v_B_out.strides[2]) )) = (__pyx_v_B[4]);

                                /* "src/helpers/helpers.pyx":945
 *             B_out[ind,1,0] = B[3]
 *             B_out[ind,1,1] = B[4]
 *             B_out[ind,1,2] = B[5]             # <<<<<<<<<<<<<<
 *             B_out[ind,2,0] = B[6]
 *             B_out[ind,2,1] = B[7]
 */
                                __pyx_t_13 = __pyx_v_ind;
                                __pyx_t_12 = 1;
                                __pyx_t_11 = 2;
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_B_out.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_B_out.shape[1];
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_B_out.shape[2];
                                *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_B_out.data + __pyx_t_13 * __pyx_v_B_out.strides[0]) ) + __pyx_t_12 * __pyx_v_B_out.strides[1]) ) + __pyx_t_11 * __pyx_v_B_out.strides[2]) )) = (__pyx_v_B[5]);

                                /* "src/helpers/helpers.pyx":946
 *             B_out[ind,1,1] = B[4]
 *             B_out[ind,1,2] = B[5]
 *             B_out[ind,2,0] = B[6]             # <<<<<<<<<<<<<<
 *             B_out[ind,2,1] = B[7]
 *             B_out[ind,2,2] = B[8]
 */
                                __pyx_t_11 = __pyx_v_ind;
                                __pyx_t_12 = 2;
                                __pyx_t_13 = 0;
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_B_out.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_B_out.shape[1];
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_B_out.shape[2];
                                *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_B_out.data + __pyx_t_11 * __pyx_v_B_out.strides[0]) ) + __pyx_t_12 * __pyx_v_B_out.strides[1]) ) + __pyx_t_13 * __pyx_v_B_out.strides[2]) )) = (__pyx_v_B[6]);

                                /* "src/helpers/helpers.pyx":947
 *             B_out[ind,1,2] = B[5]
 *             B_out[ind,2,0] = B[6]
 *             B_out[ind,2,1] = B[7]             # <<<<<<<<<<<<<<
 *             B_out[ind,2,2] = B[8]
 * 
 */
                                __pyx_t_13 = __pyx_v_ind;
                                __pyx_t_12 = 2;
                                __pyx_t_11 = 1;
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_B_out.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_B_out.shape[1];
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_B_out.shape[2];
                                *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_B_out.data + __pyx_t_13 * __pyx_v_B_out.strides[0]) ) + __pyx_t_12 * __pyx_v_B_out.strides[1]) ) + __pyx_t_11 * __pyx_v_B_out.strides[2]) )) = (__pyx_v_B[7]);

                                /* "src/helpers/helpers.pyx":948
 *             B_out[ind,2,0] = B[6]
 *             B_out[ind,2,1] = B[7]
 *             B_out[ind,2,2] = B[8]             # <<<<<<<<<<<<<<
 * 
 *         free(B)
 */
                                __pyx_t_11 = __pyx_v_ind;
                                __pyx_t_12 = 2;
                                __pyx_t_13 = 2;
                                if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_B_out.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_B_out.shape[1];
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_B_out.shape[2];
                                *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_B_out.data + __pyx_t_11 * __pyx_v_B_out.strides[0]) ) + __pyx_t_12 * __pyx_v_B_out.strides[1]) ) + __pyx_t_13 * __pyx_v_B_out.strides[2]) )) = (__pyx_v_B[8]);
                                goto __pyx_L17;
                                __pyx_L12_error:;
                                {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    #ifdef _OPENMP
                                    #pragma omp flush(__pyx_parallel_exc_type)
                                    #endif /* _OPENMP */
                                    if (!__pyx_parallel_exc_type) {
                                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                                    }
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                }
                                __pyx_parallel_why = 4;
                                goto __pyx_L16;
                                __pyx_L16:;
                                #ifdef _OPENMP
                                #pragma omp critical(__pyx_parallel_lastprivates1)
                                #endif /* _OPENMP */
                                {
                                    __pyx_parallel_temp0 = __pyx_v_H1x;
                                    __pyx_parallel_temp1 = __pyx_v_H1y;
                                    __pyx_parallel_temp2 = __pyx_v_H1z;
                                    __pyx_parallel_temp3 = __pyx_v_H2x;
                                    __pyx_parallel_temp4 = __pyx_v_H2y;
                                    __pyx_parallel_temp5 = __pyx_v_H2z;
                                    __pyx_parallel_temp6 = __pyx_v_i;
                                    __pyx_parallel_temp7 = __pyx_v_ind;
                                    __pyx_parallel_temp8 = __pyx_v_k;
                                    __pyx_parallel_temp9 = __pyx_v_n2;
                                    __pyx_parallel_temp10 = __pyx_v_n3;
                                }
                                __pyx_L17:;
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_why)
                                #endif /* _OPENMP */
                            }
                        }
                    }
                    if (__pyx_parallel_exc_type) {
                      /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
                      __pyx_parallel_why = 4;
                    }
                    if (__pyx_parallel_why) {
                      __pyx_v_H1x = __pyx_parallel_temp0;
                      __pyx_v_H1y = __pyx_parallel_temp1;
                      __pyx_v_H1z = __pyx_parallel_temp2;
                      __pyx_v_H2x = __pyx_parallel_temp3;
                      __pyx_v_H2y = __pyx_parallel_temp4;
                      __pyx_v_H2z = __pyx_parallel_temp5;
                      __pyx_v_i = __pyx_parallel_temp6;
                      __pyx_v_ind = __pyx_parallel_temp7;
                      __pyx_v_k = __pyx_parallel_temp8;
                      __pyx_v_n2 = __pyx_parallel_temp9;
                      __pyx_v_n3 = __pyx_parallel_temp10;
                      switch (__pyx_parallel_why) {
                            case 4:
                        {
                            #ifdef WITH_THREAD
                            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                            #endif
                            __Pyx_GIVEREF(__pyx_parallel_exc_type);
                            __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                            __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                            #ifdef WITH_THREAD
                            __Pyx_PyGILState_Release(__pyx_gilstate_save);
                            #endif
                        }
                        goto __pyx_L8_error;
                      }
                    }
                }

                /* "src/helpers/helpers.pyx":950
 *             B_out[ind,2,2] = B[8]
 * 
 *         free(B)             # <<<<<<<<<<<<<<
 * 
 *     return B_out
 */
                free(__pyx_v_B);
                goto __pyx_L19;
                __pyx_L8_error:;
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    #ifdef _OPENMP
                    #pragma omp flush(__pyx_parallel_exc_type)
                    #endif /* _OPENMP */
                    if (!__pyx_parallel_exc_type) {
                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                    }
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                __pyx_parallel_why = 4;
                goto __pyx_L19;
                __pyx_L19:;
                #ifdef _OPENMP
                Py_END_ALLOW_THREADS
                #else
{
#ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                #endif /* _OPENMP */
                /* Clean up any temporaries */
                #ifdef WITH_THREAD
                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                #endif
                #ifndef _OPENMP
}
#endif /* _OPENMP */
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              switch (__pyx_parallel_why) {
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L4_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":903
 *     cdef double [:,:,:] B_out = np.zeros((nwat,3,3)) # rotation matrix to return from parallel code
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         B = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,nwat*3,3): # loop over all coordinates of atoms of water molecules
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":952
 *         free(B)
 * 
 *     return B_out             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_B_out, 3, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":897
 * 
 * @cython.boundscheck(False)
 * def waterRotationMatrix(double [:,:] coor):             # <<<<<<<<<<<<<<
 *     cdef int nwat = len(coor)/3 # number of water molecules
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("newanalysis.helpers.waterRotationMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_B_out, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":955
 * 
 * @cython.boundscheck(False)
 * def NQRselfAndB(np.ndarray[np.float64_t,ndim=2] py_xyz):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_49NQRselfAndB(PyObject *__pyx_self, PyObject *__pyx_v_py_xyz); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_49NQRselfAndB = {"NQRselfAndB", (PyCFunction)__pyx_pw_11newanalysis_7helpers_49NQRselfAndB, METH_O, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_49NQRselfAndB(PyObject *__pyx_self, PyObject *__pyx_v_py_xyz) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("NQRselfAndB (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_xyz), __pyx_ptype_5numpy_ndarray, 1, "py_xyz", 0))) __PYX_ERR(0, 955, __pyx_L1_error)
  __pyx_r = __pyx_pf_11newanalysis_7helpers_48NQRselfAndB(__pyx_self, ((PyArrayObject *)__pyx_v_py_xyz));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_48NQRselfAndB(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_py_xyz) {
  int __pyx_v_nwat;
  double *__pyx_v_xyz;
  double __pyx_v_H1x;
  double __pyx_v_H1y;
  double __pyx_v_H1z;
  double __pyx_v_H2x;
  double __pyx_v_H2y;
  double __pyx_v_H2z;
  double __pyx_v_n2;
  double __pyx_v_n3;
  double __pyx_v_Exx;
  double __pyx_v_Eyy;
  double __pyx_v_Ezz;
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_ind;
  PyArrayObject *__pyx_v_py_dipt = 0;
  double *__pyx_v_dipt;
  PyArrayObject *__pyx_v_py_B1 = 0;
  double *__pyx_v_B1;
  PyArrayObject *__pyx_v_py_B2 = 0;
  double *__pyx_v_B2;
  PyArrayObject *__pyx_v_py_B3 = 0;
  double *__pyx_v_B3;
  double *__pyx_v_B;
  double *__pyx_v_T;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_py_B1;
  __Pyx_Buffer __pyx_pybuffer_py_B1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_py_B2;
  __Pyx_Buffer __pyx_pybuffer_py_B2;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_py_B3;
  __Pyx_Buffer __pyx_pybuffer_py_B3;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_py_dipt;
  __Pyx_Buffer __pyx_pybuffer_py_dipt;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_py_xyz;
  __Pyx_Buffer __pyx_pybuffer_py_xyz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  long __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  int __pyx_t_14;
  long __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NQRselfAndB", 0);
  __pyx_pybuffer_py_dipt.pybuffer.buf = NULL;
  __pyx_pybuffer_py_dipt.refcount = 0;
  __pyx_pybuffernd_py_dipt.data = NULL;
  __pyx_pybuffernd_py_dipt.rcbuffer = &__pyx_pybuffer_py_dipt;
  __pyx_pybuffer_py_B1.pybuffer.buf = NULL;
  __pyx_pybuffer_py_B1.refcount = 0;
  __pyx_pybuffernd_py_B1.data = NULL;
  __pyx_pybuffernd_py_B1.rcbuffer = &__pyx_pybuffer_py_B1;
  __pyx_pybuffer_py_B2.pybuffer.buf = NULL;
  __pyx_pybuffer_py_B2.refcount = 0;
  __pyx_pybuffernd_py_B2.data = NULL;
  __pyx_pybuffernd_py_B2.rcbuffer = &__pyx_pybuffer_py_B2;
  __pyx_pybuffer_py_B3.pybuffer.buf = NULL;
  __pyx_pybuffer_py_B3.refcount = 0;
  __pyx_pybuffernd_py_B3.data = NULL;
  __pyx_pybuffernd_py_B3.rcbuffer = &__pyx_pybuffer_py_B3;
  __pyx_pybuffer_py_xyz.pybuffer.buf = NULL;
  __pyx_pybuffer_py_xyz.refcount = 0;
  __pyx_pybuffernd_py_xyz.data = NULL;
  __pyx_pybuffernd_py_xyz.rcbuffer = &__pyx_pybuffer_py_xyz;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_py_xyz.rcbuffer->pybuffer, (PyObject*)__pyx_v_py_xyz, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 955, __pyx_L1_error)
  }
  __pyx_pybuffernd_py_xyz.diminfo[0].strides = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_py_xyz.diminfo[0].shape = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_py_xyz.diminfo[1].strides = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_py_xyz.diminfo[1].shape = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.shape[1];

  /* "src/helpers/helpers.pyx":957
 * def NQRselfAndB(np.ndarray[np.float64_t,ndim=2] py_xyz):
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules             # <<<<<<<<<<<<<<
 *     cdef double *xyz = <double *> py_xyz.data
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_py_xyz)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 957, __pyx_L1_error)
  __pyx_v_nwat = __Pyx_div_Py_ssize_t(__pyx_t_1, 3);

  /* "src/helpers/helpers.pyx":958
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules
 *     cdef double *xyz = <double *> py_xyz.data             # <<<<<<<<<<<<<<
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 *     cdef double Exx = -2.3067236 # -2.0486*1.126
 */
  __pyx_v_xyz = ((double *)__pyx_v_py_xyz->data);

  /* "src/helpers/helpers.pyx":960
 *     cdef double *xyz = <double *> py_xyz.data
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 *     cdef double Exx = -2.3067236 # -2.0486*1.126             # <<<<<<<<<<<<<<
 *     cdef double Eyy =  2.0364836 # 1.8086*1.126
 *     cdef double Ezz =  0.27024   # 0.2400*1.126
 */
  __pyx_v_Exx = -2.3067236;

  /* "src/helpers/helpers.pyx":961
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 *     cdef double Exx = -2.3067236 # -2.0486*1.126
 *     cdef double Eyy =  2.0364836 # 1.8086*1.126             # <<<<<<<<<<<<<<
 *     cdef double Ezz =  0.27024   # 0.2400*1.126
 *     cdef int i, k, ind
 */
  __pyx_v_Eyy = 2.0364836;

  /* "src/helpers/helpers.pyx":962
 *     cdef double Exx = -2.3067236 # -2.0486*1.126
 *     cdef double Eyy =  2.0364836 # 1.8086*1.126
 *     cdef double Ezz =  0.27024   # 0.2400*1.126             # <<<<<<<<<<<<<<
 *     cdef int i, k, ind
 * 
 */
  __pyx_v_Ezz = 0.27024;

  /* "src/helpers/helpers.pyx":965
 *     cdef int i, k, ind
 * 
 *     cdef np.ndarray[np.float64_t,ndim=1] py_dipt = np.zeros(nwat*6,dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef double *dipt = <double *> py_dipt.data
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B1 = np.zeros(nwat*3,dtype=np.float64)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_nwat * 6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 965, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_py_dipt.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_py_dipt = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 965, __pyx_L1_error)
    } else {__pyx_pybuffernd_py_dipt.diminfo[0].strides = __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_py_dipt.diminfo[0].shape = __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_py_dipt = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/helpers/helpers.pyx":966
 * 
 *     cdef np.ndarray[np.float64_t,ndim=1] py_dipt = np.zeros(nwat*6,dtype=np.float64)
 *     cdef double *dipt = <double *> py_dipt.data             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B1 = np.zeros(nwat*3,dtype=np.float64)
 *     cdef double *B1 = <double *> py_B1.data
 */
  __pyx_v_dipt = ((double *)__pyx_v_py_dipt->data);

  /* "src/helpers/helpers.pyx":967
 *     cdef np.ndarray[np.float64_t,ndim=1] py_dipt = np.zeros(nwat*6,dtype=np.float64)
 *     cdef double *dipt = <double *> py_dipt.data
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B1 = np.zeros(nwat*3,dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef double *B1 = <double *> py_B1.data
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B2 = np.zeros(nwat*3,dtype=np.float64)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_long((__pyx_v_nwat * 3)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 967, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_py_B1.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_py_B1 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_py_B1.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 967, __pyx_L1_error)
    } else {__pyx_pybuffernd_py_B1.diminfo[0].strides = __pyx_pybuffernd_py_B1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_py_B1.diminfo[0].shape = __pyx_pybuffernd_py_B1.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_py_B1 = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "src/helpers/helpers.pyx":968
 *     cdef double *dipt = <double *> py_dipt.data
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B1 = np.zeros(nwat*3,dtype=np.float64)
 *     cdef double *B1 = <double *> py_B1.data             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B2 = np.zeros(nwat*3,dtype=np.float64)
 *     cdef double *B2 = <double *> py_B2.data
 */
  __pyx_v_B1 = ((double *)__pyx_v_py_B1->data);

  /* "src/helpers/helpers.pyx":969
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B1 = np.zeros(nwat*3,dtype=np.float64)
 *     cdef double *B1 = <double *> py_B1.data
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B2 = np.zeros(nwat*3,dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef double *B2 = <double *> py_B2.data
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B3 = np.zeros(nwat*3,dtype=np.float64)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_nwat * 3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 969, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_py_B2.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_py_B2 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_py_B2.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 969, __pyx_L1_error)
    } else {__pyx_pybuffernd_py_B2.diminfo[0].strides = __pyx_pybuffernd_py_B2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_py_B2.diminfo[0].shape = __pyx_pybuffernd_py_B2.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v_py_B2 = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/helpers/helpers.pyx":970
 *     cdef double *B1 = <double *> py_B1.data
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B2 = np.zeros(nwat*3,dtype=np.float64)
 *     cdef double *B2 = <double *> py_B2.data             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B3 = np.zeros(nwat*3,dtype=np.float64)
 *     cdef double *B3 = <double *> py_B3.data
 */
  __pyx_v_B2 = ((double *)__pyx_v_py_B2->data);

  /* "src/helpers/helpers.pyx":971
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B2 = np.zeros(nwat*3,dtype=np.float64)
 *     cdef double *B2 = <double *> py_B2.data
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B3 = np.zeros(nwat*3,dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef double *B3 = <double *> py_B3.data
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_nwat * 3)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 971, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_py_B3.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_py_B3 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_py_B3.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 971, __pyx_L1_error)
    } else {__pyx_pybuffernd_py_B3.diminfo[0].strides = __pyx_pybuffernd_py_B3.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_py_B3.diminfo[0].shape = __pyx_pybuffernd_py_B3.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_py_B3 = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":972
 *     cdef double *B2 = <double *> py_B2.data
 *     cdef np.ndarray[np.float64_t,ndim=1] py_B3 = np.zeros(nwat*3,dtype=np.float64)
 *     cdef double *B3 = <double *> py_B3.data             # <<<<<<<<<<<<<<
 * 
 *     with nogil, parallel():
 */
  __pyx_v_B3 = ((double *)__pyx_v_py_B3->data);

  /* "src/helpers/helpers.pyx":974
 *     cdef double *B3 = <double *> py_B3.data
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel private(__pyx_v_B, __pyx_v_T) private(__pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
            #endif /* _OPENMP */
            {
                #ifdef _OPENMP
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                Py_BEGIN_ALLOW_THREADS
                #endif /* _OPENMP */
                /* Initialize private variables to invalid values */
                __pyx_v_B = ((double *)1);
                __pyx_v_T = ((double *)1);

                /* "src/helpers/helpers.pyx":975
 * 
 *     with nogil, parallel():
 *         B = <double *> malloc(sizeof(double) * 9)             # <<<<<<<<<<<<<<
 *         T = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,nwat*9,9): # loop over all coordinates of atoms of water molecules
 */
                __pyx_v_B = ((double *)malloc(((sizeof(double)) * 9)));

                /* "src/helpers/helpers.pyx":976
 *     with nogil, parallel():
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)             # <<<<<<<<<<<<<<
 *         for i in prange(0,nwat*9,9): # loop over all coordinates of atoms of water molecules
 *             for k in range(9):
 */
                __pyx_v_T = ((double *)malloc(((sizeof(double)) * 9)));

                /* "src/helpers/helpers.pyx":977
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,nwat*9,9): # loop over all coordinates of atoms of water molecules             # <<<<<<<<<<<<<<
 *             for k in range(9):
 *                 B[k] = 0.0
 */
                __pyx_t_11 = (__pyx_v_nwat * 9);
                if ((9 == 0)) abort();
                {
                    double __pyx_parallel_temp0 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp1 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp2 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp3 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp4 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp5 = ((double)__PYX_NAN());
                    int __pyx_parallel_temp6 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp7 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp8 = ((int)0xbad0bad0);
                    double __pyx_parallel_temp9 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp10 = ((double)__PYX_NAN());
                    const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
                    PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
                    int __pyx_parallel_why;
                    __pyx_parallel_why = 0;
                    __pyx_t_13 = (__pyx_t_11 - 0 + 9 - 9/abs(9)) / 9;
                    if (__pyx_t_13 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_H1x) lastprivate(__pyx_v_H1y) lastprivate(__pyx_v_H1z) lastprivate(__pyx_v_H2x) lastprivate(__pyx_v_H2y) lastprivate(__pyx_v_H2z) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_ind) lastprivate(__pyx_v_k) lastprivate(__pyx_v_n2) lastprivate(__pyx_v_n3)
                        #endif /* _OPENMP */
                        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_13; __pyx_t_12++){
                            if (__pyx_parallel_why < 2)
                            {
                                __pyx_v_i = (int)(0 + 9 * __pyx_t_12);
                                /* Initialize private variables to invalid values */
                                __pyx_v_H1x = ((double)__PYX_NAN());
                                __pyx_v_H1y = ((double)__PYX_NAN());
                                __pyx_v_H1z = ((double)__PYX_NAN());
                                __pyx_v_H2x = ((double)__PYX_NAN());
                                __pyx_v_H2y = ((double)__PYX_NAN());
                                __pyx_v_H2z = ((double)__PYX_NAN());
                                __pyx_v_ind = ((int)0xbad0bad0);
                                __pyx_v_k = ((int)0xbad0bad0);
                                __pyx_v_n2 = ((double)__PYX_NAN());
                                __pyx_v_n3 = ((double)__PYX_NAN());

                                /* "src/helpers/helpers.pyx":978
 *         T = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,nwat*9,9): # loop over all coordinates of atoms of water molecules
 *             for k in range(9):             # <<<<<<<<<<<<<<
 *                 B[k] = 0.0
 *                 T[k] = 0.0
 */
                                for (__pyx_t_14 = 0; __pyx_t_14 < 9; __pyx_t_14+=1) {
                                  __pyx_v_k = __pyx_t_14;

                                  /* "src/helpers/helpers.pyx":979
 *         for i in prange(0,nwat*9,9): # loop over all coordinates of atoms of water molecules
 *             for k in range(9):
 *                 B[k] = 0.0             # <<<<<<<<<<<<<<
 *                 T[k] = 0.0
 * 
 */
                                  (__pyx_v_B[__pyx_v_k]) = 0.0;

                                  /* "src/helpers/helpers.pyx":980
 *             for k in range(9):
 *                 B[k] = 0.0
 *                 T[k] = 0.0             # <<<<<<<<<<<<<<
 * 
 *             H1x = xyz[i+3]-xyz[i]
 */
                                  (__pyx_v_T[__pyx_v_k]) = 0.0;
                                }

                                /* "src/helpers/helpers.pyx":982
 *                 T[k] = 0.0
 * 
 *             H1x = xyz[i+3]-xyz[i]             # <<<<<<<<<<<<<<
 *             H1y = xyz[i+4]-xyz[i+1]
 *             H1z = xyz[i+5]-xyz[i+2]
 */
                                __pyx_v_H1x = ((__pyx_v_xyz[(__pyx_v_i + 3)]) - (__pyx_v_xyz[__pyx_v_i]));

                                /* "src/helpers/helpers.pyx":983
 * 
 *             H1x = xyz[i+3]-xyz[i]
 *             H1y = xyz[i+4]-xyz[i+1]             # <<<<<<<<<<<<<<
 *             H1z = xyz[i+5]-xyz[i+2]
 *             H2x = xyz[i+6]-xyz[i]
 */
                                __pyx_v_H1y = ((__pyx_v_xyz[(__pyx_v_i + 4)]) - (__pyx_v_xyz[(__pyx_v_i + 1)]));

                                /* "src/helpers/helpers.pyx":984
 *             H1x = xyz[i+3]-xyz[i]
 *             H1y = xyz[i+4]-xyz[i+1]
 *             H1z = xyz[i+5]-xyz[i+2]             # <<<<<<<<<<<<<<
 *             H2x = xyz[i+6]-xyz[i]
 *             H2y = xyz[i+7]-xyz[i+1]
 */
                                __pyx_v_H1z = ((__pyx_v_xyz[(__pyx_v_i + 5)]) - (__pyx_v_xyz[(__pyx_v_i + 2)]));

                                /* "src/helpers/helpers.pyx":985
 *             H1y = xyz[i+4]-xyz[i+1]
 *             H1z = xyz[i+5]-xyz[i+2]
 *             H2x = xyz[i+6]-xyz[i]             # <<<<<<<<<<<<<<
 *             H2y = xyz[i+7]-xyz[i+1]
 *             H2z = xyz[i+8]-xyz[i+2]
 */
                                __pyx_v_H2x = ((__pyx_v_xyz[(__pyx_v_i + 6)]) - (__pyx_v_xyz[__pyx_v_i]));

                                /* "src/helpers/helpers.pyx":986
 *             H1z = xyz[i+5]-xyz[i+2]
 *             H2x = xyz[i+6]-xyz[i]
 *             H2y = xyz[i+7]-xyz[i+1]             # <<<<<<<<<<<<<<
 *             H2z = xyz[i+8]-xyz[i+2]
 * 
 */
                                __pyx_v_H2y = ((__pyx_v_xyz[(__pyx_v_i + 7)]) - (__pyx_v_xyz[(__pyx_v_i + 1)]));

                                /* "src/helpers/helpers.pyx":987
 *             H2x = xyz[i+6]-xyz[i]
 *             H2y = xyz[i+7]-xyz[i+1]
 *             H2z = xyz[i+8]-xyz[i+2]             # <<<<<<<<<<<<<<
 * 
 *             B[3] = (H1x-H2x)
 */
                                __pyx_v_H2z = ((__pyx_v_xyz[(__pyx_v_i + 8)]) - (__pyx_v_xyz[(__pyx_v_i + 2)]));

                                /* "src/helpers/helpers.pyx":989
 *             H2z = xyz[i+8]-xyz[i+2]
 * 
 *             B[3] = (H1x-H2x)             # <<<<<<<<<<<<<<
 *             B[4] = (H1y-H2y)
 *             B[5] = (H1z-H2z)
 */
                                (__pyx_v_B[3]) = (__pyx_v_H1x - __pyx_v_H2x);

                                /* "src/helpers/helpers.pyx":990
 * 
 *             B[3] = (H1x-H2x)
 *             B[4] = (H1y-H2y)             # <<<<<<<<<<<<<<
 *             B[5] = (H1z-H2z)
 *             B[6] = (H1x+H2x)
 */
                                (__pyx_v_B[4]) = (__pyx_v_H1y - __pyx_v_H2y);

                                /* "src/helpers/helpers.pyx":991
 *             B[3] = (H1x-H2x)
 *             B[4] = (H1y-H2y)
 *             B[5] = (H1z-H2z)             # <<<<<<<<<<<<<<
 *             B[6] = (H1x+H2x)
 *             B[7] = (H1y+H2y)
 */
                                (__pyx_v_B[5]) = (__pyx_v_H1z - __pyx_v_H2z);

                                /* "src/helpers/helpers.pyx":992
 *             B[4] = (H1y-H2y)
 *             B[5] = (H1z-H2z)
 *             B[6] = (H1x+H2x)             # <<<<<<<<<<<<<<
 *             B[7] = (H1y+H2y)
 *             B[8] = (H1z+H2z)
 */
                                (__pyx_v_B[6]) = (__pyx_v_H1x + __pyx_v_H2x);

                                /* "src/helpers/helpers.pyx":993
 *             B[5] = (H1z-H2z)
 *             B[6] = (H1x+H2x)
 *             B[7] = (H1y+H2y)             # <<<<<<<<<<<<<<
 *             B[8] = (H1z+H2z)
 * 
 */
                                (__pyx_v_B[7]) = (__pyx_v_H1y + __pyx_v_H2y);

                                /* "src/helpers/helpers.pyx":994
 *             B[6] = (H1x+H2x)
 *             B[7] = (H1y+H2y)
 *             B[8] = (H1z+H2z)             # <<<<<<<<<<<<<<
 * 
 *             n2 = (B[3]*B[3]+B[4]*B[4]+B[5]*B[5])**.5 # normalization Bvec_2
 */
                                (__pyx_v_B[8]) = (__pyx_v_H1z + __pyx_v_H2z);

                                /* "src/helpers/helpers.pyx":996
 *             B[8] = (H1z+H2z)
 * 
 *             n2 = (B[3]*B[3]+B[4]*B[4]+B[5]*B[5])**.5 # normalization Bvec_2             # <<<<<<<<<<<<<<
 *             n3 = (B[6]*B[6]+B[7]*B[7]+B[8]*B[8])**.5 # normalization Bvec_3
 * 
 */
                                __pyx_v_n2 = pow(((((__pyx_v_B[3]) * (__pyx_v_B[3])) + ((__pyx_v_B[4]) * (__pyx_v_B[4]))) + ((__pyx_v_B[5]) * (__pyx_v_B[5]))), .5);

                                /* "src/helpers/helpers.pyx":997
 * 
 *             n2 = (B[3]*B[3]+B[4]*B[4]+B[5]*B[5])**.5 # normalization Bvec_2
 *             n3 = (B[6]*B[6]+B[7]*B[7]+B[8]*B[8])**.5 # normalization Bvec_3             # <<<<<<<<<<<<<<
 * 
 *             B[3] /= n2
 */
                                __pyx_v_n3 = pow(((((__pyx_v_B[6]) * (__pyx_v_B[6])) + ((__pyx_v_B[7]) * (__pyx_v_B[7]))) + ((__pyx_v_B[8]) * (__pyx_v_B[8]))), .5);

                                /* "src/helpers/helpers.pyx":999
 *             n3 = (B[6]*B[6]+B[7]*B[7]+B[8]*B[8])**.5 # normalization Bvec_3
 * 
 *             B[3] /= n2             # <<<<<<<<<<<<<<
 *             B[4] /= n2
 *             B[5] /= n2
 */
                                __pyx_t_15 = 3;
                                if (unlikely(__pyx_v_n2 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 999, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n2);

                                /* "src/helpers/helpers.pyx":1000
 * 
 *             B[3] /= n2
 *             B[4] /= n2             # <<<<<<<<<<<<<<
 *             B[5] /= n2
 *             B[6] /= n3
 */
                                __pyx_t_15 = 4;
                                if (unlikely(__pyx_v_n2 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 1000, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n2);

                                /* "src/helpers/helpers.pyx":1001
 *             B[3] /= n2
 *             B[4] /= n2
 *             B[5] /= n2             # <<<<<<<<<<<<<<
 *             B[6] /= n3
 *             B[7] /= n3
 */
                                __pyx_t_15 = 5;
                                if (unlikely(__pyx_v_n2 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 1001, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n2);

                                /* "src/helpers/helpers.pyx":1002
 *             B[4] /= n2
 *             B[5] /= n2
 *             B[6] /= n3             # <<<<<<<<<<<<<<
 *             B[7] /= n3
 *             B[8] /= n3
 */
                                __pyx_t_15 = 6;
                                if (unlikely(__pyx_v_n3 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 1002, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n3);

                                /* "src/helpers/helpers.pyx":1003
 *             B[5] /= n2
 *             B[6] /= n3
 *             B[7] /= n3             # <<<<<<<<<<<<<<
 *             B[8] /= n3
 * 
 */
                                __pyx_t_15 = 7;
                                if (unlikely(__pyx_v_n3 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 1003, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n3);

                                /* "src/helpers/helpers.pyx":1004
 *             B[6] /= n3
 *             B[7] /= n3
 *             B[8] /= n3             # <<<<<<<<<<<<<<
 * 
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 */
                                __pyx_t_15 = 8;
                                if (unlikely(__pyx_v_n3 == 0)) {
                                  #ifdef WITH_THREAD
                                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                  #endif
                                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                  #ifdef WITH_THREAD
                                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                  #endif
                                  __PYX_ERR(0, 1004, __pyx_L12_error)
                                }
                                (__pyx_v_B[__pyx_t_15]) = ((__pyx_v_B[__pyx_t_15]) / __pyx_v_n3);

                                /* "src/helpers/helpers.pyx":1006
 *             B[8] /= n3
 * 
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product             # <<<<<<<<<<<<<<
 *             B[1] = B[5]*B[6]-B[3]*B[8]
 *             B[2] = B[3]*B[7]-B[4]*B[6]
 */
                                (__pyx_v_B[0]) = (((__pyx_v_B[4]) * (__pyx_v_B[8])) - ((__pyx_v_B[5]) * (__pyx_v_B[7])));

                                /* "src/helpers/helpers.pyx":1007
 * 
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 *             B[1] = B[5]*B[6]-B[3]*B[8]             # <<<<<<<<<<<<<<
 *             B[2] = B[3]*B[7]-B[4]*B[6]
 * 
 */
                                (__pyx_v_B[1]) = (((__pyx_v_B[5]) * (__pyx_v_B[6])) - ((__pyx_v_B[3]) * (__pyx_v_B[8])));

                                /* "src/helpers/helpers.pyx":1008
 *             B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 *             B[1] = B[5]*B[6]-B[3]*B[8]
 *             B[2] = B[3]*B[7]-B[4]*B[6]             # <<<<<<<<<<<<<<
 * 
 *             # B dot T
 */
                                (__pyx_v_B[2]) = (((__pyx_v_B[3]) * (__pyx_v_B[7])) - ((__pyx_v_B[4]) * (__pyx_v_B[6])));

                                /* "src/helpers/helpers.pyx":1011
 * 
 *             # B dot T
 *             T[0] = B[0]*Exx             # <<<<<<<<<<<<<<
 *             T[1] = B[1]*Exx
 *             T[2] = B[2]*Exx
 */
                                (__pyx_v_T[0]) = ((__pyx_v_B[0]) * __pyx_v_Exx);

                                /* "src/helpers/helpers.pyx":1012
 *             # B dot T
 *             T[0] = B[0]*Exx
 *             T[1] = B[1]*Exx             # <<<<<<<<<<<<<<
 *             T[2] = B[2]*Exx
 *             T[3] = B[3]*Eyy
 */
                                (__pyx_v_T[1]) = ((__pyx_v_B[1]) * __pyx_v_Exx);

                                /* "src/helpers/helpers.pyx":1013
 *             T[0] = B[0]*Exx
 *             T[1] = B[1]*Exx
 *             T[2] = B[2]*Exx             # <<<<<<<<<<<<<<
 *             T[3] = B[3]*Eyy
 *             T[4] = B[4]*Eyy
 */
                                (__pyx_v_T[2]) = ((__pyx_v_B[2]) * __pyx_v_Exx);

                                /* "src/helpers/helpers.pyx":1014
 *             T[1] = B[1]*Exx
 *             T[2] = B[2]*Exx
 *             T[3] = B[3]*Eyy             # <<<<<<<<<<<<<<
 *             T[4] = B[4]*Eyy
 *             T[5] = B[5]*Eyy
 */
                                (__pyx_v_T[3]) = ((__pyx_v_B[3]) * __pyx_v_Eyy);

                                /* "src/helpers/helpers.pyx":1015
 *             T[2] = B[2]*Exx
 *             T[3] = B[3]*Eyy
 *             T[4] = B[4]*Eyy             # <<<<<<<<<<<<<<
 *             T[5] = B[5]*Eyy
 *             T[6] = B[6]*Ezz
 */
                                (__pyx_v_T[4]) = ((__pyx_v_B[4]) * __pyx_v_Eyy);

                                /* "src/helpers/helpers.pyx":1016
 *             T[3] = B[3]*Eyy
 *             T[4] = B[4]*Eyy
 *             T[5] = B[5]*Eyy             # <<<<<<<<<<<<<<
 *             T[6] = B[6]*Ezz
 *             T[7] = B[7]*Ezz
 */
                                (__pyx_v_T[5]) = ((__pyx_v_B[5]) * __pyx_v_Eyy);

                                /* "src/helpers/helpers.pyx":1017
 *             T[4] = B[4]*Eyy
 *             T[5] = B[5]*Eyy
 *             T[6] = B[6]*Ezz             # <<<<<<<<<<<<<<
 *             T[7] = B[7]*Ezz
 *             T[8] = B[8]*Ezz
 */
                                (__pyx_v_T[6]) = ((__pyx_v_B[6]) * __pyx_v_Ezz);

                                /* "src/helpers/helpers.pyx":1018
 *             T[5] = B[5]*Eyy
 *             T[6] = B[6]*Ezz
 *             T[7] = B[7]*Ezz             # <<<<<<<<<<<<<<
 *             T[8] = B[8]*Ezz
 * 
 */
                                (__pyx_v_T[7]) = ((__pyx_v_B[7]) * __pyx_v_Ezz);

                                /* "src/helpers/helpers.pyx":1019
 *             T[6] = B[6]*Ezz
 *             T[7] = B[7]*Ezz
 *             T[8] = B[8]*Ezz             # <<<<<<<<<<<<<<
 * 
 *             ind = (i/9)*6
 */
                                (__pyx_v_T[8]) = ((__pyx_v_B[8]) * __pyx_v_Ezz);

                                /* "src/helpers/helpers.pyx":1021
 *             T[8] = B[8]*Ezz
 * 
 *             ind = (i/9)*6             # <<<<<<<<<<<<<<
 * 
 *             # (B dot T) dot B.T
 */
                                __pyx_v_ind = (__Pyx_div_long(__pyx_v_i, 9) * 6);

                                /* "src/helpers/helpers.pyx":1024
 * 
 *             # (B dot T) dot B.T
 *             dipt[ind]   = T[0]*B[0]+T[3]*B[3]+T[6]*B[6] # 11 .... here B.T is taken directly from B             # <<<<<<<<<<<<<<
 *             dipt[ind+1] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7] # 22
 *             dipt[ind+2] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8] # 33
 */
                                (__pyx_v_dipt[__pyx_v_ind]) = ((((__pyx_v_T[0]) * (__pyx_v_B[0])) + ((__pyx_v_T[3]) * (__pyx_v_B[3]))) + ((__pyx_v_T[6]) * (__pyx_v_B[6])));

                                /* "src/helpers/helpers.pyx":1025
 *             # (B dot T) dot B.T
 *             dipt[ind]   = T[0]*B[0]+T[3]*B[3]+T[6]*B[6] # 11 .... here B.T is taken directly from B
 *             dipt[ind+1] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7] # 22             # <<<<<<<<<<<<<<
 *             dipt[ind+2] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8] # 33
 *             dipt[ind+3] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6] # 21
 */
                                (__pyx_v_dipt[(__pyx_v_ind + 1)]) = ((((__pyx_v_T[1]) * (__pyx_v_B[1])) + ((__pyx_v_T[4]) * (__pyx_v_B[4]))) + ((__pyx_v_T[7]) * (__pyx_v_B[7])));

                                /* "src/helpers/helpers.pyx":1026
 *             dipt[ind]   = T[0]*B[0]+T[3]*B[3]+T[6]*B[6] # 11 .... here B.T is taken directly from B
 *             dipt[ind+1] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7] # 22
 *             dipt[ind+2] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8] # 33             # <<<<<<<<<<<<<<
 *             dipt[ind+3] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6] # 21
 *             dipt[ind+4] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6] # 31
 */
                                (__pyx_v_dipt[(__pyx_v_ind + 2)]) = ((((__pyx_v_T[2]) * (__pyx_v_B[2])) + ((__pyx_v_T[5]) * (__pyx_v_B[5]))) + ((__pyx_v_T[8]) * (__pyx_v_B[8])));

                                /* "src/helpers/helpers.pyx":1027
 *             dipt[ind+1] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7] # 22
 *             dipt[ind+2] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8] # 33
 *             dipt[ind+3] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6] # 21             # <<<<<<<<<<<<<<
 *             dipt[ind+4] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6] # 31
 *             dipt[ind+5] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7] # 32 .... matrix is symmetric
 */
                                (__pyx_v_dipt[(__pyx_v_ind + 3)]) = ((((__pyx_v_T[1]) * (__pyx_v_B[0])) + ((__pyx_v_T[4]) * (__pyx_v_B[3]))) + ((__pyx_v_T[7]) * (__pyx_v_B[6])));

                                /* "src/helpers/helpers.pyx":1028
 *             dipt[ind+2] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8] # 33
 *             dipt[ind+3] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6] # 21
 *             dipt[ind+4] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6] # 31             # <<<<<<<<<<<<<<
 *             dipt[ind+5] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7] # 32 .... matrix is symmetric
 * 
 */
                                (__pyx_v_dipt[(__pyx_v_ind + 4)]) = ((((__pyx_v_T[2]) * (__pyx_v_B[0])) + ((__pyx_v_T[5]) * (__pyx_v_B[3]))) + ((__pyx_v_T[8]) * (__pyx_v_B[6])));

                                /* "src/helpers/helpers.pyx":1029
 *             dipt[ind+3] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6] # 21
 *             dipt[ind+4] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6] # 31
 *             dipt[ind+5] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7] # 32 .... matrix is symmetric             # <<<<<<<<<<<<<<
 * 
 *             ind = (i/9)*3
 */
                                (__pyx_v_dipt[(__pyx_v_ind + 5)]) = ((((__pyx_v_T[2]) * (__pyx_v_B[1])) + ((__pyx_v_T[5]) * (__pyx_v_B[4]))) + ((__pyx_v_T[8]) * (__pyx_v_B[7])));

                                /* "src/helpers/helpers.pyx":1031
 *             dipt[ind+5] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7] # 32 .... matrix is symmetric
 * 
 *             ind = (i/9)*3             # <<<<<<<<<<<<<<
 * 
 *             B1[ind]   = B[0]
 */
                                __pyx_v_ind = (__Pyx_div_long(__pyx_v_i, 9) * 3);

                                /* "src/helpers/helpers.pyx":1033
 *             ind = (i/9)*3
 * 
 *             B1[ind]   = B[0]             # <<<<<<<<<<<<<<
 *             B1[ind+1] = B[1]
 *             B1[ind+2] = B[2]
 */
                                (__pyx_v_B1[__pyx_v_ind]) = (__pyx_v_B[0]);

                                /* "src/helpers/helpers.pyx":1034
 * 
 *             B1[ind]   = B[0]
 *             B1[ind+1] = B[1]             # <<<<<<<<<<<<<<
 *             B1[ind+2] = B[2]
 *             B2[ind]   = B[3]
 */
                                (__pyx_v_B1[(__pyx_v_ind + 1)]) = (__pyx_v_B[1]);

                                /* "src/helpers/helpers.pyx":1035
 *             B1[ind]   = B[0]
 *             B1[ind+1] = B[1]
 *             B1[ind+2] = B[2]             # <<<<<<<<<<<<<<
 *             B2[ind]   = B[3]
 *             B2[ind+1] = B[4]
 */
                                (__pyx_v_B1[(__pyx_v_ind + 2)]) = (__pyx_v_B[2]);

                                /* "src/helpers/helpers.pyx":1036
 *             B1[ind+1] = B[1]
 *             B1[ind+2] = B[2]
 *             B2[ind]   = B[3]             # <<<<<<<<<<<<<<
 *             B2[ind+1] = B[4]
 *             B2[ind+2] = B[5]
 */
                                (__pyx_v_B2[__pyx_v_ind]) = (__pyx_v_B[3]);

                                /* "src/helpers/helpers.pyx":1037
 *             B1[ind+2] = B[2]
 *             B2[ind]   = B[3]
 *             B2[ind+1] = B[4]             # <<<<<<<<<<<<<<
 *             B2[ind+2] = B[5]
 *             B3[ind]   = B[6]
 */
                                (__pyx_v_B2[(__pyx_v_ind + 1)]) = (__pyx_v_B[4]);

                                /* "src/helpers/helpers.pyx":1038
 *             B2[ind]   = B[3]
 *             B2[ind+1] = B[4]
 *             B2[ind+2] = B[5]             # <<<<<<<<<<<<<<
 *             B3[ind]   = B[6]
 *             B3[ind+1] = B[7]
 */
                                (__pyx_v_B2[(__pyx_v_ind + 2)]) = (__pyx_v_B[5]);

                                /* "src/helpers/helpers.pyx":1039
 *             B2[ind+1] = B[4]
 *             B2[ind+2] = B[5]
 *             B3[ind]   = B[6]             # <<<<<<<<<<<<<<
 *             B3[ind+1] = B[7]
 *             B3[ind+2] = B[8]
 */
                                (__pyx_v_B3[__pyx_v_ind]) = (__pyx_v_B[6]);

                                /* "src/helpers/helpers.pyx":1040
 *             B2[ind+2] = B[5]
 *             B3[ind]   = B[6]
 *             B3[ind+1] = B[7]             # <<<<<<<<<<<<<<
 *             B3[ind+2] = B[8]
 * 
 */
                                (__pyx_v_B3[(__pyx_v_ind + 1)]) = (__pyx_v_B[7]);

                                /* "src/helpers/helpers.pyx":1041
 *             B3[ind]   = B[6]
 *             B3[ind+1] = B[7]
 *             B3[ind+2] = B[8]             # <<<<<<<<<<<<<<
 * 
 *         free(B)
 */
                                (__pyx_v_B3[(__pyx_v_ind + 2)]) = (__pyx_v_B[8]);
                                goto __pyx_L17;
                                __pyx_L12_error:;
                                {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    #ifdef _OPENMP
                                    #pragma omp flush(__pyx_parallel_exc_type)
                                    #endif /* _OPENMP */
                                    if (!__pyx_parallel_exc_type) {
                                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                                    }
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                }
                                __pyx_parallel_why = 4;
                                goto __pyx_L16;
                                __pyx_L16:;
                                #ifdef _OPENMP
                                #pragma omp critical(__pyx_parallel_lastprivates2)
                                #endif /* _OPENMP */
                                {
                                    __pyx_parallel_temp0 = __pyx_v_H1x;
                                    __pyx_parallel_temp1 = __pyx_v_H1y;
                                    __pyx_parallel_temp2 = __pyx_v_H1z;
                                    __pyx_parallel_temp3 = __pyx_v_H2x;
                                    __pyx_parallel_temp4 = __pyx_v_H2y;
                                    __pyx_parallel_temp5 = __pyx_v_H2z;
                                    __pyx_parallel_temp6 = __pyx_v_i;
                                    __pyx_parallel_temp7 = __pyx_v_ind;
                                    __pyx_parallel_temp8 = __pyx_v_k;
                                    __pyx_parallel_temp9 = __pyx_v_n2;
                                    __pyx_parallel_temp10 = __pyx_v_n3;
                                }
                                __pyx_L17:;
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_why)
                                #endif /* _OPENMP */
                            }
                        }
                    }
                    if (__pyx_parallel_exc_type) {
                      /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
                      __pyx_parallel_why = 4;
                    }
                    if (__pyx_parallel_why) {
                      __pyx_v_H1x = __pyx_parallel_temp0;
                      __pyx_v_H1y = __pyx_parallel_temp1;
                      __pyx_v_H1z = __pyx_parallel_temp2;
                      __pyx_v_H2x = __pyx_parallel_temp3;
                      __pyx_v_H2y = __pyx_parallel_temp4;
                      __pyx_v_H2z = __pyx_parallel_temp5;
                      __pyx_v_i = __pyx_parallel_temp6;
                      __pyx_v_ind = __pyx_parallel_temp7;
                      __pyx_v_k = __pyx_parallel_temp8;
                      __pyx_v_n2 = __pyx_parallel_temp9;
                      __pyx_v_n3 = __pyx_parallel_temp10;
                      switch (__pyx_parallel_why) {
                            case 4:
                        {
                            #ifdef WITH_THREAD
                            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                            #endif
                            __Pyx_GIVEREF(__pyx_parallel_exc_type);
                            __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                            __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                            #ifdef WITH_THREAD
                            __Pyx_PyGILState_Release(__pyx_gilstate_save);
                            #endif
                        }
                        goto __pyx_L8_error;
                      }
                    }
                }

                /* "src/helpers/helpers.pyx":1043
 *             B3[ind+2] = B[8]
 * 
 *         free(B)             # <<<<<<<<<<<<<<
 *         free(T)
 * 
 */
                free(__pyx_v_B);

                /* "src/helpers/helpers.pyx":1044
 * 
 *         free(B)
 *         free(T)             # <<<<<<<<<<<<<<
 * 
 *     return py_dipt,py_B1,py_B2,py_B3
 */
                free(__pyx_v_T);
                goto __pyx_L19;
                __pyx_L8_error:;
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    #ifdef _OPENMP
                    #pragma omp flush(__pyx_parallel_exc_type)
                    #endif /* _OPENMP */
                    if (!__pyx_parallel_exc_type) {
                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                    }
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                __pyx_parallel_why = 4;
                goto __pyx_L19;
                __pyx_L19:;
                #ifdef _OPENMP
                Py_END_ALLOW_THREADS
                #else
{
#ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                #endif /* _OPENMP */
                /* Clean up any temporaries */
                #ifdef WITH_THREAD
                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                #endif
                #ifndef _OPENMP
}
#endif /* _OPENMP */
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              switch (__pyx_parallel_why) {
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L4_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":974
 *     cdef double *B3 = <double *> py_B3.data
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":1046
 *         free(T)
 * 
 *     return py_dipt,py_B1,py_B2,py_B3             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_dipt));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_py_dipt));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_py_dipt));
  __Pyx_INCREF(((PyObject *)__pyx_v_py_B1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_py_B1));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_py_B1));
  __Pyx_INCREF(((PyObject *)__pyx_v_py_B2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_py_B2));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_py_B2));
  __Pyx_INCREF(((PyObject *)__pyx_v_py_B3));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_py_B3));
  PyTuple_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_v_py_B3));
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":955
 * 
 * @cython.boundscheck(False)
 * def NQRselfAndB(np.ndarray[np.float64_t,ndim=2] py_xyz):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_B1.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_B2.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_B3.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_dipt.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_xyz.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("newanalysis.helpers.NQRselfAndB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_B1.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_B2.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_B3.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_dipt.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_xyz.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_dipt);
  __Pyx_XDECREF((PyObject *)__pyx_v_py_B1);
  __Pyx_XDECREF((PyObject *)__pyx_v_py_B2);
  __Pyx_XDECREF((PyObject *)__pyx_v_py_B3);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1049
 * 
 * @cython.boundscheck(False)
 * def NQRdipTen(np.ndarray[np.float64_t,ndim=2] py_xyz,             # <<<<<<<<<<<<<<
 *               np.ndarray[np.float64_t,ndim=1] py_charges,
 *               aufpunkt):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_51NQRdipTen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_51NQRdipTen = {"NQRdipTen", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_51NQRdipTen, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_51NQRdipTen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_py_xyz = 0;
  PyArrayObject *__pyx_v_py_charges = 0;
  PyObject *__pyx_v_aufpunkt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("NQRdipTen (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_py_xyz,&__pyx_n_s_py_charges,&__pyx_n_s_aufpunkt,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py_xyz)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("NQRdipTen", 1, 3, 3, 1); __PYX_ERR(0, 1049, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aufpunkt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("NQRdipTen", 1, 3, 3, 2); __PYX_ERR(0, 1049, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "NQRdipTen") < 0)) __PYX_ERR(0, 1049, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_py_xyz = ((PyArrayObject *)values[0]);
    __pyx_v_py_charges = ((PyArrayObject *)values[1]);
    __pyx_v_aufpunkt = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("NQRdipTen", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1049, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.NQRdipTen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_xyz), __pyx_ptype_5numpy_ndarray, 1, "py_xyz", 0))) __PYX_ERR(0, 1049, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_charges), __pyx_ptype_5numpy_ndarray, 1, "py_charges", 0))) __PYX_ERR(0, 1050, __pyx_L1_error)
  __pyx_r = __pyx_pf_11newanalysis_7helpers_50NQRdipTen(__pyx_self, __pyx_v_py_xyz, __pyx_v_py_charges, __pyx_v_aufpunkt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_50NQRdipTen(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_py_xyz, PyArrayObject *__pyx_v_py_charges, PyObject *__pyx_v_aufpunkt) {
  int __pyx_v_n;
  int __pyx_v_auf;
  int __pyx_v_auf3;
  int __pyx_v_auf6;
  double *__pyx_v_xyz;
  double *__pyx_v_charges;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  double __pyx_v_r2;
  double __pyx_v_f1;
  double __pyx_v_f2;
  double __pyx_v_f2_x;
  double __pyx_v_f2_y;
  double __pyx_v_f2_z;
  double __pyx_v_auf_x1;
  double __pyx_v_auf_y1;
  double __pyx_v_auf_z1;
  double __pyx_v_auf_x2;
  double __pyx_v_auf_y2;
  double __pyx_v_auf_z2;
  double __pyx_v_tyH;
  double __pyx_v_tzH;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  PyArrayObject *__pyx_v_pyE = 0;
  PyArrayObject *__pyx_v_py_dipt = 0;
  double *__pyx_v_dipt;
  double *__pyx_v_E;
  double *__pyx_v_B;
  double *__pyx_v_T;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pyE;
  __Pyx_Buffer __pyx_pybuffer_pyE;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_py_charges;
  __Pyx_Buffer __pyx_pybuffer_py_charges;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_py_dipt;
  __Pyx_Buffer __pyx_pybuffer_py_dipt;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_py_xyz;
  __Pyx_Buffer __pyx_pybuffer_py_xyz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  long __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  double __pyx_t_15;
  long __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NQRdipTen", 0);
  __pyx_pybuffer_pyE.pybuffer.buf = NULL;
  __pyx_pybuffer_pyE.refcount = 0;
  __pyx_pybuffernd_pyE.data = NULL;
  __pyx_pybuffernd_pyE.rcbuffer = &__pyx_pybuffer_pyE;
  __pyx_pybuffer_py_dipt.pybuffer.buf = NULL;
  __pyx_pybuffer_py_dipt.refcount = 0;
  __pyx_pybuffernd_py_dipt.data = NULL;
  __pyx_pybuffernd_py_dipt.rcbuffer = &__pyx_pybuffer_py_dipt;
  __pyx_pybuffer_py_xyz.pybuffer.buf = NULL;
  __pyx_pybuffer_py_xyz.refcount = 0;
  __pyx_pybuffernd_py_xyz.data = NULL;
  __pyx_pybuffernd_py_xyz.rcbuffer = &__pyx_pybuffer_py_xyz;
  __pyx_pybuffer_py_charges.pybuffer.buf = NULL;
  __pyx_pybuffer_py_charges.refcount = 0;
  __pyx_pybuffernd_py_charges.data = NULL;
  __pyx_pybuffernd_py_charges.rcbuffer = &__pyx_pybuffer_py_charges;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_py_xyz.rcbuffer->pybuffer, (PyObject*)__pyx_v_py_xyz, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1049, __pyx_L1_error)
  }
  __pyx_pybuffernd_py_xyz.diminfo[0].strides = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_py_xyz.diminfo[0].shape = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_py_xyz.diminfo[1].strides = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_py_xyz.diminfo[1].shape = __pyx_pybuffernd_py_xyz.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_py_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_py_charges, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1049, __pyx_L1_error)
  }
  __pyx_pybuffernd_py_charges.diminfo[0].strides = __pyx_pybuffernd_py_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_py_charges.diminfo[0].shape = __pyx_pybuffernd_py_charges.rcbuffer->pybuffer.shape[0];

  /* "src/helpers/helpers.pyx":1053
 *               aufpunkt):
 * 
 *     cdef int n = 3*len(py_xyz)             # <<<<<<<<<<<<<<
 *     cdef int auf = <int> 3*aufpunkt # x,y,z for each atom -> *3
 *     cdef int auf3 = auf+3
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_py_xyz)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1053, __pyx_L1_error)
  __pyx_v_n = (3 * __pyx_t_1);

  /* "src/helpers/helpers.pyx":1054
 * 
 *     cdef int n = 3*len(py_xyz)
 *     cdef int auf = <int> 3*aufpunkt # x,y,z for each atom -> *3             # <<<<<<<<<<<<<<
 *     cdef int auf3 = auf+3
 *     cdef int auf6 = auf+6
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(((int)3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_aufpunkt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_auf = __pyx_t_4;

  /* "src/helpers/helpers.pyx":1055
 *     cdef int n = 3*len(py_xyz)
 *     cdef int auf = <int> 3*aufpunkt # x,y,z for each atom -> *3
 *     cdef int auf3 = auf+3             # <<<<<<<<<<<<<<
 *     cdef int auf6 = auf+6
 *     cdef double *xyz = <double *> py_xyz.data
 */
  __pyx_v_auf3 = (__pyx_v_auf + 3);

  /* "src/helpers/helpers.pyx":1056
 *     cdef int auf = <int> 3*aufpunkt # x,y,z for each atom -> *3
 *     cdef int auf3 = auf+3
 *     cdef int auf6 = auf+6             # <<<<<<<<<<<<<<
 *     cdef double *xyz = <double *> py_xyz.data
 *     cdef double *charges = <double *> py_charges.data
 */
  __pyx_v_auf6 = (__pyx_v_auf + 6);

  /* "src/helpers/helpers.pyx":1057
 *     cdef int auf3 = auf+3
 *     cdef int auf6 = auf+6
 *     cdef double *xyz = <double *> py_xyz.data             # <<<<<<<<<<<<<<
 *     cdef double *charges = <double *> py_charges.data
 *     cdef double x,y,z, r2, f1,f2, f2_x,f2_y,f2_z, auf_x1,auf_y1,auf_z1,auf_x2,auf_y2,auf_z2
 */
  __pyx_v_xyz = ((double *)__pyx_v_py_xyz->data);

  /* "src/helpers/helpers.pyx":1058
 *     cdef int auf6 = auf+6
 *     cdef double *xyz = <double *> py_xyz.data
 *     cdef double *charges = <double *> py_charges.data             # <<<<<<<<<<<<<<
 *     cdef double x,y,z, r2, f1,f2, f2_x,f2_y,f2_z, auf_x1,auf_y1,auf_z1,auf_x2,auf_y2,auf_z2
 *     cdef double tyH = 1.63
 */
  __pyx_v_charges = ((double *)__pyx_v_py_charges->data);

  /* "src/helpers/helpers.pyx":1060
 *     cdef double *charges = <double *> py_charges.data
 *     cdef double x,y,z, r2, f1,f2, f2_x,f2_y,f2_z, auf_x1,auf_y1,auf_z1,auf_x2,auf_y2,auf_z2
 *     cdef double tyH = 1.63             # <<<<<<<<<<<<<<
 *     cdef double tzH = 1.158921913
 *     cdef int i, j, k
 */
  __pyx_v_tyH = 1.63;

  /* "src/helpers/helpers.pyx":1061
 *     cdef double x,y,z, r2, f1,f2, f2_x,f2_y,f2_z, auf_x1,auf_y1,auf_z1,auf_x2,auf_y2,auf_z2
 *     cdef double tyH = 1.63
 *     cdef double tzH = 1.158921913             # <<<<<<<<<<<<<<
 *     cdef int i, j, k
 * #    cdef np.ndarray[np.float64_t,ndim=1] pyB = np.zeros(9,dtype=np.float64) # transformation matrix of aufpunkt wat
 */
  __pyx_v_tzH = 1.158921913;

  /* "src/helpers/helpers.pyx":1064
 *     cdef int i, j, k
 * #    cdef np.ndarray[np.float64_t,ndim=1] pyB = np.zeros(9,dtype=np.float64) # transformation matrix of aufpunkt wat
 *     cdef np.ndarray[np.float64_t,ndim=1] pyE = np.asarray([-2.0487,1.8086,0.2400],dtype=np.float64) # EFG matrix from Boykin             # <<<<<<<<<<<<<<
 * #    cdef np.ndarray[np.float64_t,ndim=1] pyT = np.zeros(9,dtype=np.float64) # temp matrix for mult
 *     #cdef np.ndarray[np.float64_t,ndim=1] py_dipt = np.zeros(15,dtype=np.float64)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_float_neg_2_0487);
  __Pyx_GIVEREF(__pyx_float_neg_2_0487);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_float_neg_2_0487);
  __Pyx_INCREF(__pyx_float_1_8086);
  __Pyx_GIVEREF(__pyx_float_1_8086);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_float_1_8086);
  __Pyx_INCREF(__pyx_float_0_2400);
  __Pyx_GIVEREF(__pyx_float_0_2400);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_float_0_2400);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1064, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pyE.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_pyE = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_pyE.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1064, __pyx_L1_error)
    } else {__pyx_pybuffernd_pyE.diminfo[0].strides = __pyx_pybuffernd_pyE.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pyE.diminfo[0].shape = __pyx_pybuffernd_pyE.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_pyE = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "src/helpers/helpers.pyx":1067
 * #    cdef np.ndarray[np.float64_t,ndim=1] pyT = np.zeros(9,dtype=np.float64) # temp matrix for mult
 *     #cdef np.ndarray[np.float64_t,ndim=1] py_dipt = np.zeros(15,dtype=np.float64)
 *     cdef np.ndarray[np.float64_t,ndim=2] py_dipt = np.zeros((n/3,15),dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *     cdef double *dipt = <double *> py_dipt.data
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_long(__Pyx_div_long(__pyx_v_n, 3)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
  __Pyx_INCREF(__pyx_int_15);
  __Pyx_GIVEREF(__pyx_int_15);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_15);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1067, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_py_dipt.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_py_dipt = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1067, __pyx_L1_error)
    } else {__pyx_pybuffernd_py_dipt.diminfo[0].strides = __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_py_dipt.diminfo[0].shape = __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_py_dipt.diminfo[1].strides = __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_py_dipt.diminfo[1].shape = __pyx_pybuffernd_py_dipt.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v_py_dipt = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/helpers/helpers.pyx":1069
 *     cdef np.ndarray[np.float64_t,ndim=2] py_dipt = np.zeros((n/3,15),dtype=np.float64)
 * 
 *     cdef double *dipt = <double *> py_dipt.data             # <<<<<<<<<<<<<<
 * #    cdef double *B = <double *> malloc(sizeof(double) * 9)
 * #    cdef double *T = <double *> malloc(sizeof(double) * 9)
 */
  __pyx_v_dipt = ((double *)__pyx_v_py_dipt->data);

  /* "src/helpers/helpers.pyx":1072
 * #    cdef double *B = <double *> malloc(sizeof(double) * 9)
 * #    cdef double *T = <double *> malloc(sizeof(double) * 9)
 *     cdef double *E = <double *> pyE.data             # <<<<<<<<<<<<<<
 * 
 *     with nogil, parallel():
 */
  __pyx_v_E = ((double *)__pyx_v_pyE->data);

  /* "src/helpers/helpers.pyx":1074
 *     cdef double *E = <double *> pyE.data
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel private(__pyx_v_B, __pyx_v_T) private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_4) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
            #endif /* _OPENMP */
            {
                #ifdef _OPENMP
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                Py_BEGIN_ALLOW_THREADS
                #endif /* _OPENMP */
                /* Initialize private variables to invalid values */
                __pyx_v_B = ((double *)1);
                __pyx_v_T = ((double *)1);

                /* "src/helpers/helpers.pyx":1075
 * 
 *     with nogil, parallel():
 *         B = <double *> malloc(sizeof(double) * 9)             # <<<<<<<<<<<<<<
 *         T = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,n,3): # dip-dip T for to all atoms on every other molecule
 */
                __pyx_v_B = ((double *)malloc(((sizeof(double)) * 9)));

                /* "src/helpers/helpers.pyx":1076
 *     with nogil, parallel():
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)             # <<<<<<<<<<<<<<
 *         for i in prange(0,n,3): # dip-dip T for to all atoms on every other molecule
 *             j = i/3 * 15
 */
                __pyx_v_T = ((double *)malloc(((sizeof(double)) * 9)));

                /* "src/helpers/helpers.pyx":1077
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,n,3): # dip-dip T for to all atoms on every other molecule             # <<<<<<<<<<<<<<
 *             j = i/3 * 15
 *             for k in range(9):
 */
                __pyx_t_4 = __pyx_v_n;
                if ((3 == 0)) abort();
                {
                    double __pyx_parallel_temp0 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp1 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp2 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp3 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp4 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp5 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp6 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp7 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp8 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp9 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp10 = ((double)__PYX_NAN());
                    int __pyx_parallel_temp11 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp12 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp13 = ((int)0xbad0bad0);
                    double __pyx_parallel_temp14 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp15 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp16 = ((double)__PYX_NAN());
                    double __pyx_parallel_temp17 = ((double)__PYX_NAN());
                    const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
                    PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
                    int __pyx_parallel_why;
                    __pyx_parallel_why = 0;
                    __pyx_t_11 = (__pyx_t_4 - 0 + 3 - 3/abs(3)) / 3;
                    if (__pyx_t_11 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_auf_x1) lastprivate(__pyx_v_auf_x2) lastprivate(__pyx_v_auf_y1) lastprivate(__pyx_v_auf_y2) lastprivate(__pyx_v_auf_z1) lastprivate(__pyx_v_auf_z2) lastprivate(__pyx_v_f1) lastprivate(__pyx_v_f2) lastprivate(__pyx_v_f2_x) lastprivate(__pyx_v_f2_y) lastprivate(__pyx_v_f2_z) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j) lastprivate(__pyx_v_k) lastprivate(__pyx_v_r2) lastprivate(__pyx_v_x) lastprivate(__pyx_v_y) lastprivate(__pyx_v_z)
                        #endif /* _OPENMP */
                        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_11; __pyx_t_10++){
                            if (__pyx_parallel_why < 2)
                            {
                                __pyx_v_i = (int)(0 + 3 * __pyx_t_10);
                                /* Initialize private variables to invalid values */
                                __pyx_v_auf_x1 = ((double)__PYX_NAN());
                                __pyx_v_auf_x2 = ((double)__PYX_NAN());
                                __pyx_v_auf_y1 = ((double)__PYX_NAN());
                                __pyx_v_auf_y2 = ((double)__PYX_NAN());
                                __pyx_v_auf_z1 = ((double)__PYX_NAN());
                                __pyx_v_auf_z2 = ((double)__PYX_NAN());
                                __pyx_v_f1 = ((double)__PYX_NAN());
                                __pyx_v_f2 = ((double)__PYX_NAN());
                                __pyx_v_f2_x = ((double)__PYX_NAN());
                                __pyx_v_f2_y = ((double)__PYX_NAN());
                                __pyx_v_f2_z = ((double)__PYX_NAN());
                                __pyx_v_j = ((int)0xbad0bad0);
                                __pyx_v_k = ((int)0xbad0bad0);
                                __pyx_v_r2 = ((double)__PYX_NAN());
                                __pyx_v_x = ((double)__PYX_NAN());
                                __pyx_v_y = ((double)__PYX_NAN());
                                __pyx_v_z = ((double)__PYX_NAN());

                                /* "src/helpers/helpers.pyx":1078
 *         T = <double *> malloc(sizeof(double) * 9)
 *         for i in prange(0,n,3): # dip-dip T for to all atoms on every other molecule
 *             j = i/3 * 15             # <<<<<<<<<<<<<<
 *             for k in range(9):
 *                 B[k] = 0.0
 */
                                __pyx_v_j = (__Pyx_div_long(__pyx_v_i, 3) * 15);

                                /* "src/helpers/helpers.pyx":1079
 *         for i in prange(0,n,3): # dip-dip T for to all atoms on every other molecule
 *             j = i/3 * 15
 *             for k in range(9):             # <<<<<<<<<<<<<<
 *                 B[k] = 0.0
 *                 T[k] = 0.0
 */
                                for (__pyx_t_12 = 0; __pyx_t_12 < 9; __pyx_t_12+=1) {
                                  __pyx_v_k = __pyx_t_12;

                                  /* "src/helpers/helpers.pyx":1080
 *             j = i/3 * 15
 *             for k in range(9):
 *                 B[k] = 0.0             # <<<<<<<<<<<<<<
 *                 T[k] = 0.0
 *             if i!=auf and i!=auf3 and i!=auf6:
 */
                                  (__pyx_v_B[__pyx_v_k]) = 0.0;

                                  /* "src/helpers/helpers.pyx":1081
 *             for k in range(9):
 *                 B[k] = 0.0
 *                 T[k] = 0.0             # <<<<<<<<<<<<<<
 *             if i!=auf and i!=auf3 and i!=auf6:
 *                 x = xyz[i]
 */
                                  (__pyx_v_T[__pyx_v_k]) = 0.0;
                                }

                                /* "src/helpers/helpers.pyx":1082
 *                 B[k] = 0.0
 *                 T[k] = 0.0
 *             if i!=auf and i!=auf3 and i!=auf6:             # <<<<<<<<<<<<<<
 *                 x = xyz[i]
 *                 y = xyz[i+1]
 */
                                __pyx_t_14 = ((__pyx_v_i != __pyx_v_auf) != 0);
                                if (__pyx_t_14) {
                                } else {
                                  __pyx_t_13 = __pyx_t_14;
                                  goto __pyx_L17_bool_binop_done;
                                }
                                __pyx_t_14 = ((__pyx_v_i != __pyx_v_auf3) != 0);
                                if (__pyx_t_14) {
                                } else {
                                  __pyx_t_13 = __pyx_t_14;
                                  goto __pyx_L17_bool_binop_done;
                                }
                                __pyx_t_14 = ((__pyx_v_i != __pyx_v_auf6) != 0);
                                __pyx_t_13 = __pyx_t_14;
                                __pyx_L17_bool_binop_done:;
                                if (__pyx_t_13) {

                                  /* "src/helpers/helpers.pyx":1083
 *                 T[k] = 0.0
 *             if i!=auf and i!=auf3 and i!=auf6:
 *                 x = xyz[i]             # <<<<<<<<<<<<<<
 *                 y = xyz[i+1]
 *                 z = xyz[i+2]
 */
                                  __pyx_v_x = (__pyx_v_xyz[__pyx_v_i]);

                                  /* "src/helpers/helpers.pyx":1084
 *             if i!=auf and i!=auf3 and i!=auf6:
 *                 x = xyz[i]
 *                 y = xyz[i+1]             # <<<<<<<<<<<<<<
 *                 z = xyz[i+2]
 *                 r2 = x*x+y*y+z*z
 */
                                  __pyx_v_y = (__pyx_v_xyz[(__pyx_v_i + 1)]);

                                  /* "src/helpers/helpers.pyx":1085
 *                 x = xyz[i]
 *                 y = xyz[i+1]
 *                 z = xyz[i+2]             # <<<<<<<<<<<<<<
 *                 r2 = x*x+y*y+z*z
 *                 f1 = pow(r2,-1.5) * charges[i/3]
 */
                                  __pyx_v_z = (__pyx_v_xyz[(__pyx_v_i + 2)]);

                                  /* "src/helpers/helpers.pyx":1086
 *                 y = xyz[i+1]
 *                 z = xyz[i+2]
 *                 r2 = x*x+y*y+z*z             # <<<<<<<<<<<<<<
 *                 f1 = pow(r2,-1.5) * charges[i/3]
 *                 f2 = 3.0 * f1 / r2
 */
                                  __pyx_v_r2 = (((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y)) + (__pyx_v_z * __pyx_v_z));

                                  /* "src/helpers/helpers.pyx":1087
 *                 z = xyz[i+2]
 *                 r2 = x*x+y*y+z*z
 *                 f1 = pow(r2,-1.5) * charges[i/3]             # <<<<<<<<<<<<<<
 *                 f2 = 3.0 * f1 / r2
 *                 f2_x = f2 * x
 */
                                  __pyx_v_f1 = (pow(__pyx_v_r2, -1.5) * (__pyx_v_charges[__Pyx_div_long(__pyx_v_i, 3)]));

                                  /* "src/helpers/helpers.pyx":1088
 *                 r2 = x*x+y*y+z*z
 *                 f1 = pow(r2,-1.5) * charges[i/3]
 *                 f2 = 3.0 * f1 / r2             # <<<<<<<<<<<<<<
 *                 f2_x = f2 * x
 *                 f2_y = f2 * y
 */
                                  __pyx_t_15 = (3.0 * __pyx_v_f1);
                                  if (unlikely(__pyx_v_r2 == 0)) {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                    __PYX_ERR(0, 1088, __pyx_L12_error)
                                  }
                                  __pyx_v_f2 = (__pyx_t_15 / __pyx_v_r2);

                                  /* "src/helpers/helpers.pyx":1089
 *                 f1 = pow(r2,-1.5) * charges[i/3]
 *                 f2 = 3.0 * f1 / r2
 *                 f2_x = f2 * x             # <<<<<<<<<<<<<<
 *                 f2_y = f2 * y
 *                 f2_z = f2 * z
 */
                                  __pyx_v_f2_x = (__pyx_v_f2 * __pyx_v_x);

                                  /* "src/helpers/helpers.pyx":1090
 *                 f2 = 3.0 * f1 / r2
 *                 f2_x = f2 * x
 *                 f2_y = f2 * y             # <<<<<<<<<<<<<<
 *                 f2_z = f2 * z
 *                 dipt[j] += f2_x * x - f1
 */
                                  __pyx_v_f2_y = (__pyx_v_f2 * __pyx_v_y);

                                  /* "src/helpers/helpers.pyx":1091
 *                 f2_x = f2 * x
 *                 f2_y = f2 * y
 *                 f2_z = f2 * z             # <<<<<<<<<<<<<<
 *                 dipt[j] += f2_x * x - f1
 *                 dipt[j+1] += f2_y * y - f1
 */
                                  __pyx_v_f2_z = (__pyx_v_f2 * __pyx_v_z);

                                  /* "src/helpers/helpers.pyx":1092
 *                 f2_y = f2 * y
 *                 f2_z = f2 * z
 *                 dipt[j] += f2_x * x - f1             # <<<<<<<<<<<<<<
 *                 dipt[j+1] += f2_y * y - f1
 *                 dipt[j+2] += f2_z * z - f1
 */
                                  __pyx_t_12 = __pyx_v_j;
                                  (__pyx_v_dipt[__pyx_t_12]) = ((__pyx_v_dipt[__pyx_t_12]) + ((__pyx_v_f2_x * __pyx_v_x) - __pyx_v_f1));

                                  /* "src/helpers/helpers.pyx":1093
 *                 f2_z = f2 * z
 *                 dipt[j] += f2_x * x - f1
 *                 dipt[j+1] += f2_y * y - f1             # <<<<<<<<<<<<<<
 *                 dipt[j+2] += f2_z * z - f1
 *                 dipt[j+3] += f2_x * y
 */
                                  __pyx_t_16 = (__pyx_v_j + 1);
                                  (__pyx_v_dipt[__pyx_t_16]) = ((__pyx_v_dipt[__pyx_t_16]) + ((__pyx_v_f2_y * __pyx_v_y) - __pyx_v_f1));

                                  /* "src/helpers/helpers.pyx":1094
 *                 dipt[j] += f2_x * x - f1
 *                 dipt[j+1] += f2_y * y - f1
 *                 dipt[j+2] += f2_z * z - f1             # <<<<<<<<<<<<<<
 *                 dipt[j+3] += f2_x * y
 *                 dipt[j+4] += f2_x * z
 */
                                  __pyx_t_16 = (__pyx_v_j + 2);
                                  (__pyx_v_dipt[__pyx_t_16]) = ((__pyx_v_dipt[__pyx_t_16]) + ((__pyx_v_f2_z * __pyx_v_z) - __pyx_v_f1));

                                  /* "src/helpers/helpers.pyx":1095
 *                 dipt[j+1] += f2_y * y - f1
 *                 dipt[j+2] += f2_z * z - f1
 *                 dipt[j+3] += f2_x * y             # <<<<<<<<<<<<<<
 *                 dipt[j+4] += f2_x * z
 *                 dipt[j+5] += f2_y * z
 */
                                  __pyx_t_16 = (__pyx_v_j + 3);
                                  (__pyx_v_dipt[__pyx_t_16]) = ((__pyx_v_dipt[__pyx_t_16]) + (__pyx_v_f2_x * __pyx_v_y));

                                  /* "src/helpers/helpers.pyx":1096
 *                 dipt[j+2] += f2_z * z - f1
 *                 dipt[j+3] += f2_x * y
 *                 dipt[j+4] += f2_x * z             # <<<<<<<<<<<<<<
 *                 dipt[j+5] += f2_y * z
 *             elif i == auf:
 */
                                  __pyx_t_16 = (__pyx_v_j + 4);
                                  (__pyx_v_dipt[__pyx_t_16]) = ((__pyx_v_dipt[__pyx_t_16]) + (__pyx_v_f2_x * __pyx_v_z));

                                  /* "src/helpers/helpers.pyx":1097
 *                 dipt[j+3] += f2_x * y
 *                 dipt[j+4] += f2_x * z
 *                 dipt[j+5] += f2_y * z             # <<<<<<<<<<<<<<
 *             elif i == auf:
 *                 auf_x1 = xyz[auf+3]
 */
                                  __pyx_t_16 = (__pyx_v_j + 5);
                                  (__pyx_v_dipt[__pyx_t_16]) = ((__pyx_v_dipt[__pyx_t_16]) + (__pyx_v_f2_y * __pyx_v_z));

                                  /* "src/helpers/helpers.pyx":1082
 *                 B[k] = 0.0
 *                 T[k] = 0.0
 *             if i!=auf and i!=auf3 and i!=auf6:             # <<<<<<<<<<<<<<
 *                 x = xyz[i]
 *                 y = xyz[i+1]
 */
                                  goto __pyx_L16;
                                }

                                /* "src/helpers/helpers.pyx":1098
 *                 dipt[j+4] += f2_x * z
 *                 dipt[j+5] += f2_y * z
 *             elif i == auf:             # <<<<<<<<<<<<<<
 *                 auf_x1 = xyz[auf+3]
 *                 auf_y1 = xyz[auf+4]
 */
                                __pyx_t_13 = ((__pyx_v_i == __pyx_v_auf) != 0);
                                if (__pyx_t_13) {

                                  /* "src/helpers/helpers.pyx":1099
 *                 dipt[j+5] += f2_y * z
 *             elif i == auf:
 *                 auf_x1 = xyz[auf+3]             # <<<<<<<<<<<<<<
 *                 auf_y1 = xyz[auf+4]
 *                 auf_z1 = xyz[auf+5]
 */
                                  __pyx_v_auf_x1 = (__pyx_v_xyz[(__pyx_v_auf + 3)]);

                                  /* "src/helpers/helpers.pyx":1100
 *             elif i == auf:
 *                 auf_x1 = xyz[auf+3]
 *                 auf_y1 = xyz[auf+4]             # <<<<<<<<<<<<<<
 *                 auf_z1 = xyz[auf+5]
 *                 auf_x2 = xyz[auf+6]
 */
                                  __pyx_v_auf_y1 = (__pyx_v_xyz[(__pyx_v_auf + 4)]);

                                  /* "src/helpers/helpers.pyx":1101
 *                 auf_x1 = xyz[auf+3]
 *                 auf_y1 = xyz[auf+4]
 *                 auf_z1 = xyz[auf+5]             # <<<<<<<<<<<<<<
 *                 auf_x2 = xyz[auf+6]
 *                 auf_y2 = xyz[auf+7]
 */
                                  __pyx_v_auf_z1 = (__pyx_v_xyz[(__pyx_v_auf + 5)]);

                                  /* "src/helpers/helpers.pyx":1102
 *                 auf_y1 = xyz[auf+4]
 *                 auf_z1 = xyz[auf+5]
 *                 auf_x2 = xyz[auf+6]             # <<<<<<<<<<<<<<
 *                 auf_y2 = xyz[auf+7]
 *                 auf_z2 = xyz[auf+8]
 */
                                  __pyx_v_auf_x2 = (__pyx_v_xyz[(__pyx_v_auf + 6)]);

                                  /* "src/helpers/helpers.pyx":1103
 *                 auf_z1 = xyz[auf+5]
 *                 auf_x2 = xyz[auf+6]
 *                 auf_y2 = xyz[auf+7]             # <<<<<<<<<<<<<<
 *                 auf_z2 = xyz[auf+8]
 * 
 */
                                  __pyx_v_auf_y2 = (__pyx_v_xyz[(__pyx_v_auf + 7)]);

                                  /* "src/helpers/helpers.pyx":1104
 *                 auf_x2 = xyz[auf+6]
 *                 auf_y2 = xyz[auf+7]
 *                 auf_z2 = xyz[auf+8]             # <<<<<<<<<<<<<<
 * 
 *                 B[3] = (auf_x1-auf_x2)/tyH
 */
                                  __pyx_v_auf_z2 = (__pyx_v_xyz[(__pyx_v_auf + 8)]);

                                  /* "src/helpers/helpers.pyx":1106
 *                 auf_z2 = xyz[auf+8]
 * 
 *                 B[3] = (auf_x1-auf_x2)/tyH             # <<<<<<<<<<<<<<
 *                 B[4] = (auf_y1-auf_y2)/tyH
 *                 B[5] = (auf_z1-auf_z2)/tyH
 */
                                  __pyx_t_15 = (__pyx_v_auf_x1 - __pyx_v_auf_x2);
                                  if (unlikely(__pyx_v_tyH == 0)) {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                    __PYX_ERR(0, 1106, __pyx_L12_error)
                                  }
                                  (__pyx_v_B[3]) = (__pyx_t_15 / __pyx_v_tyH);

                                  /* "src/helpers/helpers.pyx":1107
 * 
 *                 B[3] = (auf_x1-auf_x2)/tyH
 *                 B[4] = (auf_y1-auf_y2)/tyH             # <<<<<<<<<<<<<<
 *                 B[5] = (auf_z1-auf_z2)/tyH
 *                 B[6] = (auf_x1+auf_x2)/tzH
 */
                                  __pyx_t_15 = (__pyx_v_auf_y1 - __pyx_v_auf_y2);
                                  if (unlikely(__pyx_v_tyH == 0)) {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                    __PYX_ERR(0, 1107, __pyx_L12_error)
                                  }
                                  (__pyx_v_B[4]) = (__pyx_t_15 / __pyx_v_tyH);

                                  /* "src/helpers/helpers.pyx":1108
 *                 B[3] = (auf_x1-auf_x2)/tyH
 *                 B[4] = (auf_y1-auf_y2)/tyH
 *                 B[5] = (auf_z1-auf_z2)/tyH             # <<<<<<<<<<<<<<
 *                 B[6] = (auf_x1+auf_x2)/tzH
 *                 B[7] = (auf_y1+auf_y2)/tzH
 */
                                  __pyx_t_15 = (__pyx_v_auf_z1 - __pyx_v_auf_z2);
                                  if (unlikely(__pyx_v_tyH == 0)) {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                    __PYX_ERR(0, 1108, __pyx_L12_error)
                                  }
                                  (__pyx_v_B[5]) = (__pyx_t_15 / __pyx_v_tyH);

                                  /* "src/helpers/helpers.pyx":1109
 *                 B[4] = (auf_y1-auf_y2)/tyH
 *                 B[5] = (auf_z1-auf_z2)/tyH
 *                 B[6] = (auf_x1+auf_x2)/tzH             # <<<<<<<<<<<<<<
 *                 B[7] = (auf_y1+auf_y2)/tzH
 *                 B[8] = (auf_z1+auf_z2)/tzH
 */
                                  __pyx_t_15 = (__pyx_v_auf_x1 + __pyx_v_auf_x2);
                                  if (unlikely(__pyx_v_tzH == 0)) {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                    __PYX_ERR(0, 1109, __pyx_L12_error)
                                  }
                                  (__pyx_v_B[6]) = (__pyx_t_15 / __pyx_v_tzH);

                                  /* "src/helpers/helpers.pyx":1110
 *                 B[5] = (auf_z1-auf_z2)/tyH
 *                 B[6] = (auf_x1+auf_x2)/tzH
 *                 B[7] = (auf_y1+auf_y2)/tzH             # <<<<<<<<<<<<<<
 *                 B[8] = (auf_z1+auf_z2)/tzH
 *                 B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 */
                                  __pyx_t_15 = (__pyx_v_auf_y1 + __pyx_v_auf_y2);
                                  if (unlikely(__pyx_v_tzH == 0)) {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                    __PYX_ERR(0, 1110, __pyx_L12_error)
                                  }
                                  (__pyx_v_B[7]) = (__pyx_t_15 / __pyx_v_tzH);

                                  /* "src/helpers/helpers.pyx":1111
 *                 B[6] = (auf_x1+auf_x2)/tzH
 *                 B[7] = (auf_y1+auf_y2)/tzH
 *                 B[8] = (auf_z1+auf_z2)/tzH             # <<<<<<<<<<<<<<
 *                 B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 *                 B[1] = B[5]*B[6]-B[3]*B[8]
 */
                                  __pyx_t_15 = (__pyx_v_auf_z1 + __pyx_v_auf_z2);
                                  if (unlikely(__pyx_v_tzH == 0)) {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                    __PYX_ERR(0, 1111, __pyx_L12_error)
                                  }
                                  (__pyx_v_B[8]) = (__pyx_t_15 / __pyx_v_tzH);

                                  /* "src/helpers/helpers.pyx":1112
 *                 B[7] = (auf_y1+auf_y2)/tzH
 *                 B[8] = (auf_z1+auf_z2)/tzH
 *                 B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product             # <<<<<<<<<<<<<<
 *                 B[1] = B[5]*B[6]-B[3]*B[8]
 *                 B[2] = B[3]*B[7]-B[4]*B[6]
 */
                                  (__pyx_v_B[0]) = (((__pyx_v_B[4]) * (__pyx_v_B[8])) - ((__pyx_v_B[5]) * (__pyx_v_B[7])));

                                  /* "src/helpers/helpers.pyx":1113
 *                 B[8] = (auf_z1+auf_z2)/tzH
 *                 B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 *                 B[1] = B[5]*B[6]-B[3]*B[8]             # <<<<<<<<<<<<<<
 *                 B[2] = B[3]*B[7]-B[4]*B[6]
 * 
 */
                                  (__pyx_v_B[1]) = (((__pyx_v_B[5]) * (__pyx_v_B[6])) - ((__pyx_v_B[3]) * (__pyx_v_B[8])));

                                  /* "src/helpers/helpers.pyx":1114
 *                 B[0] = B[4]*B[8]-B[5]*B[7] # (Bvec_1,Bvec_2,Bvec_3) are orthonormal -> vector product
 *                 B[1] = B[5]*B[6]-B[3]*B[8]
 *                 B[2] = B[3]*B[7]-B[4]*B[6]             # <<<<<<<<<<<<<<
 * 
 *                 T[0] = B[0]*E[0]
 */
                                  (__pyx_v_B[2]) = (((__pyx_v_B[3]) * (__pyx_v_B[7])) - ((__pyx_v_B[4]) * (__pyx_v_B[6])));

                                  /* "src/helpers/helpers.pyx":1116
 *                 B[2] = B[3]*B[7]-B[4]*B[6]
 * 
 *                 T[0] = B[0]*E[0]             # <<<<<<<<<<<<<<
 *                 T[1] = B[1]*E[0]
 *                 T[2] = B[2]*E[0]
 */
                                  (__pyx_v_T[0]) = ((__pyx_v_B[0]) * (__pyx_v_E[0]));

                                  /* "src/helpers/helpers.pyx":1117
 * 
 *                 T[0] = B[0]*E[0]
 *                 T[1] = B[1]*E[0]             # <<<<<<<<<<<<<<
 *                 T[2] = B[2]*E[0]
 *                 T[3] = B[3]*E[1]
 */
                                  (__pyx_v_T[1]) = ((__pyx_v_B[1]) * (__pyx_v_E[0]));

                                  /* "src/helpers/helpers.pyx":1118
 *                 T[0] = B[0]*E[0]
 *                 T[1] = B[1]*E[0]
 *                 T[2] = B[2]*E[0]             # <<<<<<<<<<<<<<
 *                 T[3] = B[3]*E[1]
 *                 T[4] = B[4]*E[1]
 */
                                  (__pyx_v_T[2]) = ((__pyx_v_B[2]) * (__pyx_v_E[0]));

                                  /* "src/helpers/helpers.pyx":1119
 *                 T[1] = B[1]*E[0]
 *                 T[2] = B[2]*E[0]
 *                 T[3] = B[3]*E[1]             # <<<<<<<<<<<<<<
 *                 T[4] = B[4]*E[1]
 *                 T[5] = B[5]*E[1]
 */
                                  (__pyx_v_T[3]) = ((__pyx_v_B[3]) * (__pyx_v_E[1]));

                                  /* "src/helpers/helpers.pyx":1120
 *                 T[2] = B[2]*E[0]
 *                 T[3] = B[3]*E[1]
 *                 T[4] = B[4]*E[1]             # <<<<<<<<<<<<<<
 *                 T[5] = B[5]*E[1]
 *                 T[6] = B[6]*E[2]
 */
                                  (__pyx_v_T[4]) = ((__pyx_v_B[4]) * (__pyx_v_E[1]));

                                  /* "src/helpers/helpers.pyx":1121
 *                 T[3] = B[3]*E[1]
 *                 T[4] = B[4]*E[1]
 *                 T[5] = B[5]*E[1]             # <<<<<<<<<<<<<<
 *                 T[6] = B[6]*E[2]
 *                 T[7] = B[7]*E[2]
 */
                                  (__pyx_v_T[5]) = ((__pyx_v_B[5]) * (__pyx_v_E[1]));

                                  /* "src/helpers/helpers.pyx":1122
 *                 T[4] = B[4]*E[1]
 *                 T[5] = B[5]*E[1]
 *                 T[6] = B[6]*E[2]             # <<<<<<<<<<<<<<
 *                 T[7] = B[7]*E[2]
 *                 T[8] = B[8]*E[2]
 */
                                  (__pyx_v_T[6]) = ((__pyx_v_B[6]) * (__pyx_v_E[2]));

                                  /* "src/helpers/helpers.pyx":1123
 *                 T[5] = B[5]*E[1]
 *                 T[6] = B[6]*E[2]
 *                 T[7] = B[7]*E[2]             # <<<<<<<<<<<<<<
 *                 T[8] = B[8]*E[2]
 * 
 */
                                  (__pyx_v_T[7]) = ((__pyx_v_B[7]) * (__pyx_v_E[2]));

                                  /* "src/helpers/helpers.pyx":1124
 *                 T[6] = B[6]*E[2]
 *                 T[7] = B[7]*E[2]
 *                 T[8] = B[8]*E[2]             # <<<<<<<<<<<<<<
 * 
 *                 dipt[j+6] = T[0]*B[0]+T[3]*B[3]+T[6]*B[6]
 */
                                  (__pyx_v_T[8]) = ((__pyx_v_B[8]) * (__pyx_v_E[2]));

                                  /* "src/helpers/helpers.pyx":1126
 *                 T[8] = B[8]*E[2]
 * 
 *                 dipt[j+6] = T[0]*B[0]+T[3]*B[3]+T[6]*B[6]             # <<<<<<<<<<<<<<
 *                 dipt[j+7] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6]
 *                 dipt[j+8] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6]
 */
                                  (__pyx_v_dipt[(__pyx_v_j + 6)]) = ((((__pyx_v_T[0]) * (__pyx_v_B[0])) + ((__pyx_v_T[3]) * (__pyx_v_B[3]))) + ((__pyx_v_T[6]) * (__pyx_v_B[6])));

                                  /* "src/helpers/helpers.pyx":1127
 * 
 *                 dipt[j+6] = T[0]*B[0]+T[3]*B[3]+T[6]*B[6]
 *                 dipt[j+7] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6]             # <<<<<<<<<<<<<<
 *                 dipt[j+8] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6]
 *                 dipt[j+9] = T[0]*B[1]+T[3]*B[4]+T[6]*B[7]
 */
                                  (__pyx_v_dipt[(__pyx_v_j + 7)]) = ((((__pyx_v_T[1]) * (__pyx_v_B[0])) + ((__pyx_v_T[4]) * (__pyx_v_B[3]))) + ((__pyx_v_T[7]) * (__pyx_v_B[6])));

                                  /* "src/helpers/helpers.pyx":1128
 *                 dipt[j+6] = T[0]*B[0]+T[3]*B[3]+T[6]*B[6]
 *                 dipt[j+7] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6]
 *                 dipt[j+8] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6]             # <<<<<<<<<<<<<<
 *                 dipt[j+9] = T[0]*B[1]+T[3]*B[4]+T[6]*B[7]
 *                 dipt[j+10] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7]
 */
                                  (__pyx_v_dipt[(__pyx_v_j + 8)]) = ((((__pyx_v_T[2]) * (__pyx_v_B[0])) + ((__pyx_v_T[5]) * (__pyx_v_B[3]))) + ((__pyx_v_T[8]) * (__pyx_v_B[6])));

                                  /* "src/helpers/helpers.pyx":1129
 *                 dipt[j+7] = T[1]*B[0]+T[4]*B[3]+T[7]*B[6]
 *                 dipt[j+8] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6]
 *                 dipt[j+9] = T[0]*B[1]+T[3]*B[4]+T[6]*B[7]             # <<<<<<<<<<<<<<
 *                 dipt[j+10] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7]
 *                 dipt[j+11] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7]
 */
                                  (__pyx_v_dipt[(__pyx_v_j + 9)]) = ((((__pyx_v_T[0]) * (__pyx_v_B[1])) + ((__pyx_v_T[3]) * (__pyx_v_B[4]))) + ((__pyx_v_T[6]) * (__pyx_v_B[7])));

                                  /* "src/helpers/helpers.pyx":1130
 *                 dipt[j+8] = T[2]*B[0]+T[5]*B[3]+T[8]*B[6]
 *                 dipt[j+9] = T[0]*B[1]+T[3]*B[4]+T[6]*B[7]
 *                 dipt[j+10] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7]             # <<<<<<<<<<<<<<
 *                 dipt[j+11] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7]
 *                 dipt[j+12] = T[0]*B[2]+T[3]*B[5]+T[6]*B[8]
 */
                                  (__pyx_v_dipt[(__pyx_v_j + 10)]) = ((((__pyx_v_T[1]) * (__pyx_v_B[1])) + ((__pyx_v_T[4]) * (__pyx_v_B[4]))) + ((__pyx_v_T[7]) * (__pyx_v_B[7])));

                                  /* "src/helpers/helpers.pyx":1131
 *                 dipt[j+9] = T[0]*B[1]+T[3]*B[4]+T[6]*B[7]
 *                 dipt[j+10] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7]
 *                 dipt[j+11] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7]             # <<<<<<<<<<<<<<
 *                 dipt[j+12] = T[0]*B[2]+T[3]*B[5]+T[6]*B[8]
 *                 dipt[j+13] = T[1]*B[2]+T[4]*B[5]+T[7]*B[8]
 */
                                  (__pyx_v_dipt[(__pyx_v_j + 11)]) = ((((__pyx_v_T[2]) * (__pyx_v_B[1])) + ((__pyx_v_T[5]) * (__pyx_v_B[4]))) + ((__pyx_v_T[8]) * (__pyx_v_B[7])));

                                  /* "src/helpers/helpers.pyx":1132
 *                 dipt[j+10] = T[1]*B[1]+T[4]*B[4]+T[7]*B[7]
 *                 dipt[j+11] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7]
 *                 dipt[j+12] = T[0]*B[2]+T[3]*B[5]+T[6]*B[8]             # <<<<<<<<<<<<<<
 *                 dipt[j+13] = T[1]*B[2]+T[4]*B[5]+T[7]*B[8]
 *                 dipt[j+14] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8]
 */
                                  (__pyx_v_dipt[(__pyx_v_j + 12)]) = ((((__pyx_v_T[0]) * (__pyx_v_B[2])) + ((__pyx_v_T[3]) * (__pyx_v_B[5]))) + ((__pyx_v_T[6]) * (__pyx_v_B[8])));

                                  /* "src/helpers/helpers.pyx":1133
 *                 dipt[j+11] = T[2]*B[1]+T[5]*B[4]+T[8]*B[7]
 *                 dipt[j+12] = T[0]*B[2]+T[3]*B[5]+T[6]*B[8]
 *                 dipt[j+13] = T[1]*B[2]+T[4]*B[5]+T[7]*B[8]             # <<<<<<<<<<<<<<
 *                 dipt[j+14] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8]
 *             else:
 */
                                  (__pyx_v_dipt[(__pyx_v_j + 13)]) = ((((__pyx_v_T[1]) * (__pyx_v_B[2])) + ((__pyx_v_T[4]) * (__pyx_v_B[5]))) + ((__pyx_v_T[7]) * (__pyx_v_B[8])));

                                  /* "src/helpers/helpers.pyx":1134
 *                 dipt[j+12] = T[0]*B[2]+T[3]*B[5]+T[6]*B[8]
 *                 dipt[j+13] = T[1]*B[2]+T[4]*B[5]+T[7]*B[8]
 *                 dipt[j+14] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8]             # <<<<<<<<<<<<<<
 *             else:
 *                 continue
 */
                                  (__pyx_v_dipt[(__pyx_v_j + 14)]) = ((((__pyx_v_T[2]) * (__pyx_v_B[2])) + ((__pyx_v_T[5]) * (__pyx_v_B[5]))) + ((__pyx_v_T[8]) * (__pyx_v_B[8])));

                                  /* "src/helpers/helpers.pyx":1098
 *                 dipt[j+4] += f2_x * z
 *                 dipt[j+5] += f2_y * z
 *             elif i == auf:             # <<<<<<<<<<<<<<
 *                 auf_x1 = xyz[auf+3]
 *                 auf_y1 = xyz[auf+4]
 */
                                  goto __pyx_L16;
                                }

                                /* "src/helpers/helpers.pyx":1136
 *                 dipt[j+14] = T[2]*B[2]+T[5]*B[5]+T[8]*B[8]
 *             else:
 *                 continue             # <<<<<<<<<<<<<<
 *         free(B)
 *         free(T)
 */
                                /*else*/ {
                                  goto __pyx_L10_continue;
                                }
                                __pyx_L16:;
                                goto __pyx_L21;
                                __pyx_L10_continue:;
                                goto __pyx_L21;
                                __pyx_L12_error:;
                                {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    #ifdef _OPENMP
                                    #pragma omp flush(__pyx_parallel_exc_type)
                                    #endif /* _OPENMP */
                                    if (!__pyx_parallel_exc_type) {
                                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                                    }
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                }
                                __pyx_parallel_why = 4;
                                goto __pyx_L20;
                                __pyx_L20:;
                                #ifdef _OPENMP
                                #pragma omp critical(__pyx_parallel_lastprivates3)
                                #endif /* _OPENMP */
                                {
                                    __pyx_parallel_temp0 = __pyx_v_auf_x1;
                                    __pyx_parallel_temp1 = __pyx_v_auf_x2;
                                    __pyx_parallel_temp2 = __pyx_v_auf_y1;
                                    __pyx_parallel_temp3 = __pyx_v_auf_y2;
                                    __pyx_parallel_temp4 = __pyx_v_auf_z1;
                                    __pyx_parallel_temp5 = __pyx_v_auf_z2;
                                    __pyx_parallel_temp6 = __pyx_v_f1;
                                    __pyx_parallel_temp7 = __pyx_v_f2;
                                    __pyx_parallel_temp8 = __pyx_v_f2_x;
                                    __pyx_parallel_temp9 = __pyx_v_f2_y;
                                    __pyx_parallel_temp10 = __pyx_v_f2_z;
                                    __pyx_parallel_temp11 = __pyx_v_i;
                                    __pyx_parallel_temp12 = __pyx_v_j;
                                    __pyx_parallel_temp13 = __pyx_v_k;
                                    __pyx_parallel_temp14 = __pyx_v_r2;
                                    __pyx_parallel_temp15 = __pyx_v_x;
                                    __pyx_parallel_temp16 = __pyx_v_y;
                                    __pyx_parallel_temp17 = __pyx_v_z;
                                }
                                __pyx_L21:;
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_why)
                                #endif /* _OPENMP */
                            }
                        }
                    }
                    if (__pyx_parallel_exc_type) {
                      /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
                      __pyx_parallel_why = 4;
                    }
                    if (__pyx_parallel_why) {
                      __pyx_v_auf_x1 = __pyx_parallel_temp0;
                      __pyx_v_auf_x2 = __pyx_parallel_temp1;
                      __pyx_v_auf_y1 = __pyx_parallel_temp2;
                      __pyx_v_auf_y2 = __pyx_parallel_temp3;
                      __pyx_v_auf_z1 = __pyx_parallel_temp4;
                      __pyx_v_auf_z2 = __pyx_parallel_temp5;
                      __pyx_v_f1 = __pyx_parallel_temp6;
                      __pyx_v_f2 = __pyx_parallel_temp7;
                      __pyx_v_f2_x = __pyx_parallel_temp8;
                      __pyx_v_f2_y = __pyx_parallel_temp9;
                      __pyx_v_f2_z = __pyx_parallel_temp10;
                      __pyx_v_i = __pyx_parallel_temp11;
                      __pyx_v_j = __pyx_parallel_temp12;
                      __pyx_v_k = __pyx_parallel_temp13;
                      __pyx_v_r2 = __pyx_parallel_temp14;
                      __pyx_v_x = __pyx_parallel_temp15;
                      __pyx_v_y = __pyx_parallel_temp16;
                      __pyx_v_z = __pyx_parallel_temp17;
                      switch (__pyx_parallel_why) {
                            case 4:
                        {
                            #ifdef WITH_THREAD
                            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                            #endif
                            __Pyx_GIVEREF(__pyx_parallel_exc_type);
                            __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                            __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                            #ifdef WITH_THREAD
                            __Pyx_PyGILState_Release(__pyx_gilstate_save);
                            #endif
                        }
                        goto __pyx_L8_error;
                      }
                    }
                }

                /* "src/helpers/helpers.pyx":1137
 *             else:
 *                 continue
 *         free(B)             # <<<<<<<<<<<<<<
 *         free(T)
 * 
 */
                free(__pyx_v_B);

                /* "src/helpers/helpers.pyx":1138
 *                 continue
 *         free(B)
 *         free(T)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(1,n/3):
 */
                free(__pyx_v_T);
                goto __pyx_L23;
                __pyx_L8_error:;
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    #ifdef _OPENMP
                    #pragma omp flush(__pyx_parallel_exc_type)
                    #endif /* _OPENMP */
                    if (!__pyx_parallel_exc_type) {
                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                    }
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                __pyx_parallel_why = 4;
                goto __pyx_L23;
                __pyx_L23:;
                #ifdef _OPENMP
                Py_END_ALLOW_THREADS
                #else
{
#ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                #endif /* _OPENMP */
                /* Clean up any temporaries */
                #ifdef WITH_THREAD
                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                #endif
                #ifndef _OPENMP
}
#endif /* _OPENMP */
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              switch (__pyx_parallel_why) {
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L4_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":1074
 *     cdef double *E = <double *> pyE.data
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         B = <double *> malloc(sizeof(double) * 9)
 *         T = <double *> malloc(sizeof(double) * 9)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":1140
 *         free(T)
 * 
 *     for i in range(1,n/3):             # <<<<<<<<<<<<<<
 *         for j in range(15):
 *             dipt[j] += dipt[i*15+j]
 */
  __pyx_t_11 = __Pyx_div_long(__pyx_v_n, 3);
  __pyx_t_10 = __pyx_t_11;
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_10; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "src/helpers/helpers.pyx":1141
 * 
 *     for i in range(1,n/3):
 *         for j in range(15):             # <<<<<<<<<<<<<<
 *             dipt[j] += dipt[i*15+j]
 * 
 */
    for (__pyx_t_12 = 0; __pyx_t_12 < 15; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "src/helpers/helpers.pyx":1142
 *     for i in range(1,n/3):
 *         for j in range(15):
 *             dipt[j] += dipt[i*15+j]             # <<<<<<<<<<<<<<
 * 
 *     return py_dipt[0]
 */
      __pyx_t_17 = __pyx_v_j;
      (__pyx_v_dipt[__pyx_t_17]) = ((__pyx_v_dipt[__pyx_t_17]) + (__pyx_v_dipt[((__pyx_v_i * 15) + __pyx_v_j)]));
    }
  }

  /* "src/helpers/helpers.pyx":1144
 *             dipt[j] += dipt[i*15+j]
 * 
 *     return py_dipt[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_py_dipt), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":1049
 * 
 * @cython.boundscheck(False)
 * def NQRdipTen(np.ndarray[np.float64_t,ndim=2] py_xyz,             # <<<<<<<<<<<<<<
 *               np.ndarray[np.float64_t,ndim=1] py_charges,
 *               aufpunkt):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pyE.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_charges.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_dipt.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_xyz.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("newanalysis.helpers.NQRdipTen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pyE.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_charges.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_dipt.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_py_xyz.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pyE);
  __Pyx_XDECREF((PyObject *)__pyx_v_py_dipt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1286
 * 
 * 
 * def calcOctant(np.ndarray[np.float64_t,ndim=2,mode="c"] com,             # <<<<<<<<<<<<<<
 *                isolute, nmolecules):
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_53calcOctant(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_52calcOctant[] = "\n    calcOctant(com, isolute, nmolecules)\n\n    In a box, that is centered on a specific residue and rotated to its body-fixed frame, this determines in which\n    octant around this molecule each other molecule is centered. For speed and memory efficiency, this information\n    is encoded as follows:\n\n    x y z sign as bits in a binary number (0 for negative sign, 1 for positive sign),\n    3-bit number gives 8 dec. numbers -> 8 array indices needed\n\n    x y z\n    0 0 0 -> 0\n    0 0 1 -> 1\n    0 1 0 -> 2\n    0 1 1 -> 3\n    1 0 0 -> 4\n    1 0 1 -> 5\n    1 1 0 -> 6\n    1 1 1 -> 7\n\n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_53calcOctant = {"calcOctant", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_53calcOctant, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_52calcOctant};
static PyObject *__pyx_pw_11newanalysis_7helpers_53calcOctant(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_com = 0;
  PyObject *__pyx_v_isolute = 0;
  PyObject *__pyx_v_nmolecules = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcOctant (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_com,&__pyx_n_s_isolute,&__pyx_n_s_nmolecules,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_com)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isolute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcOctant", 1, 3, 3, 1); __PYX_ERR(0, 1286, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nmolecules)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcOctant", 1, 3, 3, 2); __PYX_ERR(0, 1286, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcOctant") < 0)) __PYX_ERR(0, 1286, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_com = ((PyArrayObject *)values[0]);
    __pyx_v_isolute = values[1];
    __pyx_v_nmolecules = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcOctant", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1286, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcOctant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_com), __pyx_ptype_5numpy_ndarray, 1, "com", 0))) __PYX_ERR(0, 1286, __pyx_L1_error)
  __pyx_r = __pyx_pf_11newanalysis_7helpers_52calcOctant(__pyx_self, __pyx_v_com, __pyx_v_isolute, __pyx_v_nmolecules);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_52calcOctant(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_com, PyObject *__pyx_v_isolute, PyObject *__pyx_v_nmolecules) {
  double *__pyx_v_ccom;
  int __pyx_v_nmol;
  int __pyx_v_islt;
  int __pyx_v_j;
  PyArrayObject *__pyx_v_octants = 0;
  int *__pyx_v_coct;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_z;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_com;
  __Pyx_Buffer __pyx_pybuffer_com;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_octants;
  __Pyx_Buffer __pyx_pybuffer_octants;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcOctant", 0);
  __pyx_pybuffer_octants.pybuffer.buf = NULL;
  __pyx_pybuffer_octants.refcount = 0;
  __pyx_pybuffernd_octants.data = NULL;
  __pyx_pybuffernd_octants.rcbuffer = &__pyx_pybuffer_octants;
  __pyx_pybuffer_com.pybuffer.buf = NULL;
  __pyx_pybuffer_com.refcount = 0;
  __pyx_pybuffernd_com.data = NULL;
  __pyx_pybuffernd_com.rcbuffer = &__pyx_pybuffer_com;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_com.rcbuffer->pybuffer, (PyObject*)__pyx_v_com, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1286, __pyx_L1_error)
  }
  __pyx_pybuffernd_com.diminfo[0].strides = __pyx_pybuffernd_com.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_com.diminfo[0].shape = __pyx_pybuffernd_com.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_com.diminfo[1].strides = __pyx_pybuffernd_com.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_com.diminfo[1].shape = __pyx_pybuffernd_com.rcbuffer->pybuffer.shape[1];

  /* "src/helpers/helpers.pyx":1309
 * 
 *     """
 *     cdef double *ccom    = <double *> com.data             # <<<<<<<<<<<<<<
 *     cdef int nmol=<int>nmolecules, islt=<int>isolute, j
 *     cdef np.ndarray[np.int32_t, ndim=1] octants = np.zeros(nmol,dtype=np.int32)
 */
  __pyx_v_ccom = ((double *)__pyx_v_com->data);

  /* "src/helpers/helpers.pyx":1310
 *     """
 *     cdef double *ccom    = <double *> com.data
 *     cdef int nmol=<int>nmolecules, islt=<int>isolute, j             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int32_t, ndim=1] octants = np.zeros(nmol,dtype=np.int32)
 *     cdef int* coct = <int *> octants.data
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_nmolecules); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1310, __pyx_L1_error)
  __pyx_v_nmol = ((int)__pyx_t_1);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_isolute); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1310, __pyx_L1_error)
  __pyx_v_islt = ((int)__pyx_t_1);

  /* "src/helpers/helpers.pyx":1311
 *     cdef double *ccom    = <double *> com.data
 *     cdef int nmol=<int>nmolecules, islt=<int>isolute, j
 *     cdef np.ndarray[np.int32_t, ndim=1] octants = np.zeros(nmol,dtype=np.int32)             # <<<<<<<<<<<<<<
 *     cdef int* coct = <int *> octants.data
 *     cdef int x, y, z
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_nmol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1311, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_octants.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_octants = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_octants.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1311, __pyx_L1_error)
    } else {__pyx_pybuffernd_octants.diminfo[0].strides = __pyx_pybuffernd_octants.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_octants.diminfo[0].shape = __pyx_pybuffernd_octants.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_octants = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/helpers/helpers.pyx":1312
 *     cdef int nmol=<int>nmolecules, islt=<int>isolute, j
 *     cdef np.ndarray[np.int32_t, ndim=1] octants = np.zeros(nmol,dtype=np.int32)
 *     cdef int* coct = <int *> octants.data             # <<<<<<<<<<<<<<
 *     cdef int x, y, z
 * 
 */
  __pyx_v_coct = ((int *)__pyx_v_octants->data);

  /* "src/helpers/helpers.pyx":1315
 *     cdef int x, y, z
 * 
 *     for j in range(nmol):             # <<<<<<<<<<<<<<
 *         if j == islt:
 *             continue
 */
  __pyx_t_1 = __pyx_v_nmol;
  __pyx_t_8 = __pyx_t_1;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_j = __pyx_t_9;

    /* "src/helpers/helpers.pyx":1316
 * 
 *     for j in range(nmol):
 *         if j == islt:             # <<<<<<<<<<<<<<
 *             continue
 *         x=sgn2bin(ccom[j*3])*4
 */
    __pyx_t_10 = ((__pyx_v_j == __pyx_v_islt) != 0);
    if (__pyx_t_10) {

      /* "src/helpers/helpers.pyx":1317
 *     for j in range(nmol):
 *         if j == islt:
 *             continue             # <<<<<<<<<<<<<<
 *         x=sgn2bin(ccom[j*3])*4
 *         y=sgn2bin(ccom[j*3+1])*2
 */
      goto __pyx_L3_continue;

      /* "src/helpers/helpers.pyx":1316
 * 
 *     for j in range(nmol):
 *         if j == islt:             # <<<<<<<<<<<<<<
 *             continue
 *         x=sgn2bin(ccom[j*3])*4
 */
    }

    /* "src/helpers/helpers.pyx":1318
 *         if j == islt:
 *             continue
 *         x=sgn2bin(ccom[j*3])*4             # <<<<<<<<<<<<<<
 *         y=sgn2bin(ccom[j*3+1])*2
 *         z=sgn2bin(ccom[j*3+2])
 */
    __pyx_v_x = (__pyx_f_11newanalysis_7helpers_sgn2bin((__pyx_v_ccom[(__pyx_v_j * 3)])) * 4);

    /* "src/helpers/helpers.pyx":1319
 *             continue
 *         x=sgn2bin(ccom[j*3])*4
 *         y=sgn2bin(ccom[j*3+1])*2             # <<<<<<<<<<<<<<
 *         z=sgn2bin(ccom[j*3+2])
 *         coct[j]=x|y|z
 */
    __pyx_v_y = (__pyx_f_11newanalysis_7helpers_sgn2bin((__pyx_v_ccom[((__pyx_v_j * 3) + 1)])) * 2);

    /* "src/helpers/helpers.pyx":1320
 *         x=sgn2bin(ccom[j*3])*4
 *         y=sgn2bin(ccom[j*3+1])*2
 *         z=sgn2bin(ccom[j*3+2])             # <<<<<<<<<<<<<<
 *         coct[j]=x|y|z
 * 
 */
    __pyx_v_z = __pyx_f_11newanalysis_7helpers_sgn2bin((__pyx_v_ccom[((__pyx_v_j * 3) + 2)]));

    /* "src/helpers/helpers.pyx":1321
 *         y=sgn2bin(ccom[j*3+1])*2
 *         z=sgn2bin(ccom[j*3+2])
 *         coct[j]=x|y|z             # <<<<<<<<<<<<<<
 * 
 *     return octants
 */
    (__pyx_v_coct[__pyx_v_j]) = ((__pyx_v_x | __pyx_v_y) | __pyx_v_z);
    __pyx_L3_continue:;
  }

  /* "src/helpers/helpers.pyx":1323
 *         coct[j]=x|y|z
 * 
 *     return octants             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_octants));
  __pyx_r = ((PyObject *)__pyx_v_octants);
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":1286
 * 
 * 
 * def calcOctant(np.ndarray[np.float64_t,ndim=2,mode="c"] com,             # <<<<<<<<<<<<<<
 *                isolute, nmolecules):
 *     """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_com.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_octants.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("newanalysis.helpers.calcOctant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_com.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_octants.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_octants);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1326
 * 
 * @cython.boundscheck(False)
 * def sumMDCage(double [:,:,:,:] mdcage_ts,             # <<<<<<<<<<<<<<
 *               double [:,:] dip_wat,
 *               int nres_wat, char [:] ds, int maxshell, int rep, int frame):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_55sumMDCage(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_55sumMDCage = {"sumMDCage", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_55sumMDCage, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_55sumMDCage(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_mdcage_ts = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_dip_wat = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_nres_wat;
  __Pyx_memviewslice __pyx_v_ds = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_maxshell;
  int __pyx_v_rep;
  int __pyx_v_frame;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sumMDCage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mdcage_ts,&__pyx_n_s_dip_wat,&__pyx_n_s_nres_wat,&__pyx_n_s_ds,&__pyx_n_s_maxshell,&__pyx_n_s_rep,&__pyx_n_s_frame,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mdcage_ts)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dip_wat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumMDCage", 1, 7, 7, 1); __PYX_ERR(0, 1326, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nres_wat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumMDCage", 1, 7, 7, 2); __PYX_ERR(0, 1326, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumMDCage", 1, 7, 7, 3); __PYX_ERR(0, 1326, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxshell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumMDCage", 1, 7, 7, 4); __PYX_ERR(0, 1326, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rep)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumMDCage", 1, 7, 7, 5); __PYX_ERR(0, 1326, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frame)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumMDCage", 1, 7, 7, 6); __PYX_ERR(0, 1326, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sumMDCage") < 0)) __PYX_ERR(0, 1326, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_mdcage_ts = __Pyx_PyObject_to_MemoryviewSlice_dsdsdsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_mdcage_ts.memview)) __PYX_ERR(0, 1326, __pyx_L3_error)
    __pyx_v_dip_wat = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_dip_wat.memview)) __PYX_ERR(0, 1327, __pyx_L3_error)
    __pyx_v_nres_wat = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nres_wat == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1328, __pyx_L3_error)
    __pyx_v_ds = __Pyx_PyObject_to_MemoryviewSlice_ds_char(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_ds.memview)) __PYX_ERR(0, 1328, __pyx_L3_error)
    __pyx_v_maxshell = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_maxshell == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1328, __pyx_L3_error)
    __pyx_v_rep = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_rep == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1328, __pyx_L3_error)
    __pyx_v_frame = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_frame == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1328, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sumMDCage", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1326, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.sumMDCage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_54sumMDCage(__pyx_self, __pyx_v_mdcage_ts, __pyx_v_dip_wat, __pyx_v_nres_wat, __pyx_v_ds, __pyx_v_maxshell, __pyx_v_rep, __pyx_v_frame);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_54sumMDCage(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_mdcage_ts, __Pyx_memviewslice __pyx_v_dip_wat, int __pyx_v_nres_wat, __Pyx_memviewslice __pyx_v_ds, int __pyx_v_maxshell, int __pyx_v_rep, int __pyx_v_frame) {
  int __pyx_v_w;
  int __pyx_v_shell;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  __Pyx_RefNannySetupContext("sumMDCage", 0);

  /* "src/helpers/helpers.pyx":1331
 * 
 *     cdef int w, shell, i
 *     for w in range(nres_wat):             # <<<<<<<<<<<<<<
 *         shell = ds[w]-1
 *         if shell < maxshell:
 */
  __pyx_t_1 = __pyx_v_nres_wat;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_w = __pyx_t_3;

    /* "src/helpers/helpers.pyx":1332
 *     cdef int w, shell, i
 *     for w in range(nres_wat):
 *         shell = ds[w]-1             # <<<<<<<<<<<<<<
 *         if shell < maxshell:
 *             for i in range(3):
 */
    __pyx_t_4 = __pyx_v_w;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_ds.shape[0];
    __pyx_v_shell = ((*((char *) ( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_4 * __pyx_v_ds.strides[0]) ))) - 1);

    /* "src/helpers/helpers.pyx":1333
 *     for w in range(nres_wat):
 *         shell = ds[w]-1
 *         if shell < maxshell:             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 mdcage_ts[rep,shell,frame,i] += dip_wat[w,i]
 */
    __pyx_t_5 = ((__pyx_v_shell < __pyx_v_maxshell) != 0);
    if (__pyx_t_5) {

      /* "src/helpers/helpers.pyx":1334
 *         shell = ds[w]-1
 *         if shell < maxshell:
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 mdcage_ts[rep,shell,frame,i] += dip_wat[w,i]
 *         else:
 */
      for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "src/helpers/helpers.pyx":1335
 *         if shell < maxshell:
 *             for i in range(3):
 *                 mdcage_ts[rep,shell,frame,i] += dip_wat[w,i]             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(3):
 */
        __pyx_t_4 = __pyx_v_w;
        __pyx_t_7 = __pyx_v_i;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_dip_wat.shape[0];
        if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_dip_wat.shape[1];
        __pyx_t_8 = __pyx_v_rep;
        __pyx_t_9 = __pyx_v_shell;
        __pyx_t_10 = __pyx_v_frame;
        __pyx_t_11 = __pyx_v_i;
        if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_mdcage_ts.shape[0];
        if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_mdcage_ts.shape[1];
        if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_mdcage_ts.shape[2];
        if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_mdcage_ts.shape[3];
        *((double *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_mdcage_ts.data + __pyx_t_8 * __pyx_v_mdcage_ts.strides[0]) ) + __pyx_t_9 * __pyx_v_mdcage_ts.strides[1]) ) + __pyx_t_10 * __pyx_v_mdcage_ts.strides[2]) ) + __pyx_t_11 * __pyx_v_mdcage_ts.strides[3]) )) += (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dip_wat.data + __pyx_t_4 * __pyx_v_dip_wat.strides[0]) ) + __pyx_t_7 * __pyx_v_dip_wat.strides[1]) )));
      }

      /* "src/helpers/helpers.pyx":1333
 *     for w in range(nres_wat):
 *         shell = ds[w]-1
 *         if shell < maxshell:             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 mdcage_ts[rep,shell,frame,i] += dip_wat[w,i]
 */
      goto __pyx_L5;
    }

    /* "src/helpers/helpers.pyx":1337
 *                 mdcage_ts[rep,shell,frame,i] += dip_wat[w,i]
 *         else:
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 mdcage_ts[rep,maxshell,frame,i] += dip_wat[w,i]
 * 
 */
    /*else*/ {
      for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "src/helpers/helpers.pyx":1338
 *         else:
 *             for i in range(3):
 *                 mdcage_ts[rep,maxshell,frame,i] += dip_wat[w,i]             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
        __pyx_t_7 = __pyx_v_w;
        __pyx_t_4 = __pyx_v_i;
        if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_dip_wat.shape[0];
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_dip_wat.shape[1];
        __pyx_t_11 = __pyx_v_rep;
        __pyx_t_10 = __pyx_v_maxshell;
        __pyx_t_9 = __pyx_v_frame;
        __pyx_t_8 = __pyx_v_i;
        if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_mdcage_ts.shape[0];
        if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_mdcage_ts.shape[1];
        if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_mdcage_ts.shape[2];
        if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_mdcage_ts.shape[3];
        *((double *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_mdcage_ts.data + __pyx_t_11 * __pyx_v_mdcage_ts.strides[0]) ) + __pyx_t_10 * __pyx_v_mdcage_ts.strides[1]) ) + __pyx_t_9 * __pyx_v_mdcage_ts.strides[2]) ) + __pyx_t_8 * __pyx_v_mdcage_ts.strides[3]) )) += (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dip_wat.data + __pyx_t_7 * __pyx_v_dip_wat.strides[0]) ) + __pyx_t_4 * __pyx_v_dip_wat.strides[1]) )));
      }
    }
    __pyx_L5:;
  }

  /* "src/helpers/helpers.pyx":1326
 * 
 * @cython.boundscheck(False)
 * def sumMDCage(double [:,:,:,:] mdcage_ts,             # <<<<<<<<<<<<<<
 *               double [:,:] dip_wat,
 *               int nres_wat, char [:] ds, int maxshell, int rep, int frame):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __PYX_XDEC_MEMVIEW(&__pyx_v_mdcage_ts, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_dip_wat, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1341
 * 
 * @cython.boundscheck(False)
 * def sumMDCageSingle(double [:,:,:] mdcage_ts, double [:,:] dip_wat,             # <<<<<<<<<<<<<<
 *                     char [:] ds, int maxshell, int frame):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_57sumMDCageSingle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_57sumMDCageSingle = {"sumMDCageSingle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_57sumMDCageSingle, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_57sumMDCageSingle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_mdcage_ts = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_dip_wat = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_ds = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_maxshell;
  int __pyx_v_frame;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sumMDCageSingle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mdcage_ts,&__pyx_n_s_dip_wat,&__pyx_n_s_ds,&__pyx_n_s_maxshell,&__pyx_n_s_frame,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mdcage_ts)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dip_wat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumMDCageSingle", 1, 5, 5, 1); __PYX_ERR(0, 1341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumMDCageSingle", 1, 5, 5, 2); __PYX_ERR(0, 1341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxshell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumMDCageSingle", 1, 5, 5, 3); __PYX_ERR(0, 1341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frame)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumMDCageSingle", 1, 5, 5, 4); __PYX_ERR(0, 1341, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sumMDCageSingle") < 0)) __PYX_ERR(0, 1341, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_mdcage_ts = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_mdcage_ts.memview)) __PYX_ERR(0, 1341, __pyx_L3_error)
    __pyx_v_dip_wat = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_dip_wat.memview)) __PYX_ERR(0, 1341, __pyx_L3_error)
    __pyx_v_ds = __Pyx_PyObject_to_MemoryviewSlice_ds_char(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_ds.memview)) __PYX_ERR(0, 1342, __pyx_L3_error)
    __pyx_v_maxshell = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_maxshell == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1342, __pyx_L3_error)
    __pyx_v_frame = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_frame == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1342, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sumMDCageSingle", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1341, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.sumMDCageSingle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_56sumMDCageSingle(__pyx_self, __pyx_v_mdcage_ts, __pyx_v_dip_wat, __pyx_v_ds, __pyx_v_maxshell, __pyx_v_frame);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_56sumMDCageSingle(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_mdcage_ts, __Pyx_memviewslice __pyx_v_dip_wat, __Pyx_memviewslice __pyx_v_ds, int __pyx_v_maxshell, int __pyx_v_frame) {
  int __pyx_v_w;
  int __pyx_v_shell;
  int __pyx_v_i;
  int __pyx_v_nres_wat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  __Pyx_RefNannySetupContext("sumMDCageSingle", 0);

  /* "src/helpers/helpers.pyx":1344
 *                     char [:] ds, int maxshell, int frame):
 * 
 *     cdef int w, shell, i, nres_wat = dip_wat.shape[0]             # <<<<<<<<<<<<<<
 * 
 *     for w in range(nres_wat):
 */
  __pyx_v_nres_wat = (__pyx_v_dip_wat.shape[0]);

  /* "src/helpers/helpers.pyx":1346
 *     cdef int w, shell, i, nres_wat = dip_wat.shape[0]
 * 
 *     for w in range(nres_wat):             # <<<<<<<<<<<<<<
 *         shell = ds[w]-1
 *         if shell < maxshell:
 */
  __pyx_t_1 = __pyx_v_nres_wat;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_w = __pyx_t_3;

    /* "src/helpers/helpers.pyx":1347
 * 
 *     for w in range(nres_wat):
 *         shell = ds[w]-1             # <<<<<<<<<<<<<<
 *         if shell < maxshell:
 *             for i in range(3):
 */
    __pyx_t_4 = __pyx_v_w;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_ds.shape[0];
    __pyx_v_shell = ((*((char *) ( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_4 * __pyx_v_ds.strides[0]) ))) - 1);

    /* "src/helpers/helpers.pyx":1348
 *     for w in range(nres_wat):
 *         shell = ds[w]-1
 *         if shell < maxshell:             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 mdcage_ts[shell,frame,i] += dip_wat[w,i]
 */
    __pyx_t_5 = ((__pyx_v_shell < __pyx_v_maxshell) != 0);
    if (__pyx_t_5) {

      /* "src/helpers/helpers.pyx":1349
 *         shell = ds[w]-1
 *         if shell < maxshell:
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 mdcage_ts[shell,frame,i] += dip_wat[w,i]
 *         else:
 */
      for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "src/helpers/helpers.pyx":1350
 *         if shell < maxshell:
 *             for i in range(3):
 *                 mdcage_ts[shell,frame,i] += dip_wat[w,i]             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(3):
 */
        __pyx_t_4 = __pyx_v_w;
        __pyx_t_7 = __pyx_v_i;
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_dip_wat.shape[0];
        if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_dip_wat.shape[1];
        __pyx_t_8 = __pyx_v_shell;
        __pyx_t_9 = __pyx_v_frame;
        __pyx_t_10 = __pyx_v_i;
        if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_mdcage_ts.shape[0];
        if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_mdcage_ts.shape[1];
        if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_mdcage_ts.shape[2];
        *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_mdcage_ts.data + __pyx_t_8 * __pyx_v_mdcage_ts.strides[0]) ) + __pyx_t_9 * __pyx_v_mdcage_ts.strides[1]) ) + __pyx_t_10 * __pyx_v_mdcage_ts.strides[2]) )) += (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dip_wat.data + __pyx_t_4 * __pyx_v_dip_wat.strides[0]) ) + __pyx_t_7 * __pyx_v_dip_wat.strides[1]) )));
      }

      /* "src/helpers/helpers.pyx":1348
 *     for w in range(nres_wat):
 *         shell = ds[w]-1
 *         if shell < maxshell:             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 mdcage_ts[shell,frame,i] += dip_wat[w,i]
 */
      goto __pyx_L5;
    }

    /* "src/helpers/helpers.pyx":1352
 *                 mdcage_ts[shell,frame,i] += dip_wat[w,i]
 *         else:
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 mdcage_ts[maxshell,frame,i] += dip_wat[w,i]
 * 
 */
    /*else*/ {
      for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "src/helpers/helpers.pyx":1353
 *         else:
 *             for i in range(3):
 *                 mdcage_ts[maxshell,frame,i] += dip_wat[w,i]             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
        __pyx_t_7 = __pyx_v_w;
        __pyx_t_4 = __pyx_v_i;
        if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_dip_wat.shape[0];
        if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_dip_wat.shape[1];
        __pyx_t_10 = __pyx_v_maxshell;
        __pyx_t_9 = __pyx_v_frame;
        __pyx_t_8 = __pyx_v_i;
        if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_mdcage_ts.shape[0];
        if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_mdcage_ts.shape[1];
        if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_mdcage_ts.shape[2];
        *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_mdcage_ts.data + __pyx_t_10 * __pyx_v_mdcage_ts.strides[0]) ) + __pyx_t_9 * __pyx_v_mdcage_ts.strides[1]) ) + __pyx_t_8 * __pyx_v_mdcage_ts.strides[2]) )) += (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_dip_wat.data + __pyx_t_7 * __pyx_v_dip_wat.strides[0]) ) + __pyx_t_4 * __pyx_v_dip_wat.strides[1]) )));
      }
    }
    __pyx_L5:;
  }

  /* "src/helpers/helpers.pyx":1341
 * 
 * @cython.boundscheck(False)
 * def sumMDCageSingle(double [:,:,:] mdcage_ts, double [:,:] dip_wat,             # <<<<<<<<<<<<<<
 *                     char [:] ds, int maxshell, int frame):
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __PYX_XDEC_MEMVIEW(&__pyx_v_mdcage_ts, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_dip_wat, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1356
 * 
 * @cython.boundscheck(False)
 * def calcAngularMomentum(double [:,:] coor, double [:,:] vel, double [:] masses, int natoms):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.float64_t, ndim=1] L = np.zeros(3)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_59calcAngularMomentum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_59calcAngularMomentum = {"calcAngularMomentum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_59calcAngularMomentum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_59calcAngularMomentum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_vel = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_masses = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_natoms;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcAngularMomentum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_vel,&__pyx_n_s_masses,&__pyx_n_s_natoms,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcAngularMomentum", 1, 4, 4, 1); __PYX_ERR(0, 1356, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_masses)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcAngularMomentum", 1, 4, 4, 2); __PYX_ERR(0, 1356, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_natoms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcAngularMomentum", 1, 4, 4, 3); __PYX_ERR(0, 1356, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcAngularMomentum") < 0)) __PYX_ERR(0, 1356, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 1356, __pyx_L3_error)
    __pyx_v_vel = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_vel.memview)) __PYX_ERR(0, 1356, __pyx_L3_error)
    __pyx_v_masses = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_masses.memview)) __PYX_ERR(0, 1356, __pyx_L3_error)
    __pyx_v_natoms = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_natoms == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1356, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcAngularMomentum", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1356, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcAngularMomentum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_58calcAngularMomentum(__pyx_self, __pyx_v_coor, __pyx_v_vel, __pyx_v_masses, __pyx_v_natoms);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_58calcAngularMomentum(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_vel, __Pyx_memviewslice __pyx_v_masses, int __pyx_v_natoms) {
  PyArrayObject *__pyx_v_L = 0;
  double *__pyx_v_cL;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_L;
  __Pyx_Buffer __pyx_pybuffer_L;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyArrayObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcAngularMomentum", 0);
  __pyx_pybuffer_L.pybuffer.buf = NULL;
  __pyx_pybuffer_L.refcount = 0;
  __pyx_pybuffernd_L.data = NULL;
  __pyx_pybuffernd_L.rcbuffer = &__pyx_pybuffer_L;

  /* "src/helpers/helpers.pyx":1358
 * def calcAngularMomentum(double [:,:] coor, double [:,:] vel, double [:] masses, int natoms):
 * 
 *     cdef np.ndarray[np.float64_t, ndim=1] L = np.zeros(3)             # <<<<<<<<<<<<<<
 *     cdef double *cL = <double *> L.data
 *     cdef int i
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_int_3) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1358, __pyx_L1_error)
  __pyx_t_4 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_L.rcbuffer->pybuffer, (PyObject*)__pyx_t_4, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_L = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_L.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1358, __pyx_L1_error)
    } else {__pyx_pybuffernd_L.diminfo[0].strides = __pyx_pybuffernd_L.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_L.diminfo[0].shape = __pyx_pybuffernd_L.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_4 = 0;
  __pyx_v_L = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/helpers/helpers.pyx":1359
 * 
 *     cdef np.ndarray[np.float64_t, ndim=1] L = np.zeros(3)
 *     cdef double *cL = <double *> L.data             # <<<<<<<<<<<<<<
 *     cdef int i
 * 
 */
  __pyx_v_cL = ((double *)__pyx_v_L->data);

  /* "src/helpers/helpers.pyx":1362
 *     cdef int i
 * 
 *     for i in range(natoms):             # <<<<<<<<<<<<<<
 *         cL[0] += masses[i] * (coor[i,1] * vel[i,2] - coor[i,2] * vel[i,1])
 *         cL[1] += masses[i] * (coor[i,2] * vel[i,0] - coor[i,0] * vel[i,2])
 */
  __pyx_t_5 = __pyx_v_natoms;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "src/helpers/helpers.pyx":1363
 * 
 *     for i in range(natoms):
 *         cL[0] += masses[i] * (coor[i,1] * vel[i,2] - coor[i,2] * vel[i,1])             # <<<<<<<<<<<<<<
 *         cL[1] += masses[i] * (coor[i,2] * vel[i,0] - coor[i,0] * vel[i,2])
 *         cL[2] += masses[i] * (coor[i,0] * vel[i,1] - coor[i,1] * vel[i,0])
 */
    __pyx_t_8 = 0;
    __pyx_t_9 = __pyx_v_i;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_masses.shape[0];
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = 1;
    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor.shape[0];
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[1];
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 2;
    if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_vel.shape[0];
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_vel.shape[1];
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_15 = 2;
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[0];
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[1];
    __pyx_t_16 = __pyx_v_i;
    __pyx_t_17 = 1;
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_vel.shape[0];
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_vel.shape[1];
    (__pyx_v_cL[__pyx_t_8]) = ((__pyx_v_cL[__pyx_t_8]) + ((*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_9 * __pyx_v_masses.strides[0]) ))) * (((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_10 * __pyx_v_coor.strides[0]) ) + __pyx_t_11 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vel.data + __pyx_t_12 * __pyx_v_vel.strides[0]) ) + __pyx_t_13 * __pyx_v_vel.strides[1]) )))) - ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_14 * __pyx_v_coor.strides[0]) ) + __pyx_t_15 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vel.data + __pyx_t_16 * __pyx_v_vel.strides[0]) ) + __pyx_t_17 * __pyx_v_vel.strides[1]) )))))));

    /* "src/helpers/helpers.pyx":1364
 *     for i in range(natoms):
 *         cL[0] += masses[i] * (coor[i,1] * vel[i,2] - coor[i,2] * vel[i,1])
 *         cL[1] += masses[i] * (coor[i,2] * vel[i,0] - coor[i,0] * vel[i,2])             # <<<<<<<<<<<<<<
 *         cL[2] += masses[i] * (coor[i,0] * vel[i,1] - coor[i,1] * vel[i,0])
 * 
 */
    __pyx_t_8 = 1;
    __pyx_t_17 = __pyx_v_i;
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_masses.shape[0];
    __pyx_t_16 = __pyx_v_i;
    __pyx_t_15 = 2;
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_coor.shape[0];
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[1];
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_13 = 0;
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_vel.shape[0];
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_vel.shape[1];
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_11 = 0;
    if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coor.shape[0];
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[1];
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_9 = 2;
    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_vel.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_vel.shape[1];
    (__pyx_v_cL[__pyx_t_8]) = ((__pyx_v_cL[__pyx_t_8]) + ((*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_17 * __pyx_v_masses.strides[0]) ))) * (((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_16 * __pyx_v_coor.strides[0]) ) + __pyx_t_15 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vel.data + __pyx_t_14 * __pyx_v_vel.strides[0]) ) + __pyx_t_13 * __pyx_v_vel.strides[1]) )))) - ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_12 * __pyx_v_coor.strides[0]) ) + __pyx_t_11 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vel.data + __pyx_t_10 * __pyx_v_vel.strides[0]) ) + __pyx_t_9 * __pyx_v_vel.strides[1]) )))))));

    /* "src/helpers/helpers.pyx":1365
 *         cL[0] += masses[i] * (coor[i,1] * vel[i,2] - coor[i,2] * vel[i,1])
 *         cL[1] += masses[i] * (coor[i,2] * vel[i,0] - coor[i,0] * vel[i,2])
 *         cL[2] += masses[i] * (coor[i,0] * vel[i,1] - coor[i,1] * vel[i,0])             # <<<<<<<<<<<<<<
 * 
 *     return L
 */
    __pyx_t_8 = 2;
    __pyx_t_9 = __pyx_v_i;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_masses.shape[0];
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = 0;
    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor.shape[0];
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[1];
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 1;
    if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_vel.shape[0];
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_vel.shape[1];
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_15 = 1;
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[0];
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[1];
    __pyx_t_16 = __pyx_v_i;
    __pyx_t_17 = 0;
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_vel.shape[0];
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_vel.shape[1];
    (__pyx_v_cL[__pyx_t_8]) = ((__pyx_v_cL[__pyx_t_8]) + ((*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_9 * __pyx_v_masses.strides[0]) ))) * (((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_10 * __pyx_v_coor.strides[0]) ) + __pyx_t_11 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vel.data + __pyx_t_12 * __pyx_v_vel.strides[0]) ) + __pyx_t_13 * __pyx_v_vel.strides[1]) )))) - ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_14 * __pyx_v_coor.strides[0]) ) + __pyx_t_15 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vel.data + __pyx_t_16 * __pyx_v_vel.strides[0]) ) + __pyx_t_17 * __pyx_v_vel.strides[1]) )))))));
  }

  /* "src/helpers/helpers.pyx":1367
 *         cL[2] += masses[i] * (coor[i,0] * vel[i,1] - coor[i,1] * vel[i,0])
 * 
 *     return L             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_L));
  __pyx_r = ((PyObject *)__pyx_v_L);
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":1356
 * 
 * @cython.boundscheck(False)
 * def calcAngularMomentum(double [:,:] coor, double [:,:] vel, double [:] masses, int natoms):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.float64_t, ndim=1] L = np.zeros(3)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_L.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("newanalysis.helpers.calcAngularMomentum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_L.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_L);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_vel, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_masses, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1370
 * 
 * @cython.boundscheck(False)
 * def calcInertiaTensor(double [:,:] coor, double [:] masses, int natoms):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.float64_t, ndim=2] I = np.zeros((3,3))
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_61calcInertiaTensor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_61calcInertiaTensor = {"calcInertiaTensor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_61calcInertiaTensor, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_61calcInertiaTensor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_masses = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_natoms;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcInertiaTensor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_masses,&__pyx_n_s_natoms,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_masses)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcInertiaTensor", 1, 3, 3, 1); __PYX_ERR(0, 1370, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_natoms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcInertiaTensor", 1, 3, 3, 2); __PYX_ERR(0, 1370, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcInertiaTensor") < 0)) __PYX_ERR(0, 1370, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 1370, __pyx_L3_error)
    __pyx_v_masses = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_masses.memview)) __PYX_ERR(0, 1370, __pyx_L3_error)
    __pyx_v_natoms = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_natoms == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1370, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcInertiaTensor", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1370, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcInertiaTensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_60calcInertiaTensor(__pyx_self, __pyx_v_coor, __pyx_v_masses, __pyx_v_natoms);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_60calcInertiaTensor(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_masses, int __pyx_v_natoms) {
  PyArrayObject *__pyx_v_I = 0;
  double *__pyx_v_cI;
  int __pyx_v_i;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_I;
  __Pyx_Buffer __pyx_pybuffer_I;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyArrayObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  long __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcInertiaTensor", 0);
  __pyx_pybuffer_I.pybuffer.buf = NULL;
  __pyx_pybuffer_I.refcount = 0;
  __pyx_pybuffernd_I.data = NULL;
  __pyx_pybuffernd_I.rcbuffer = &__pyx_pybuffer_I;

  /* "src/helpers/helpers.pyx":1372
 * def calcInertiaTensor(double [:,:] coor, double [:] masses, int natoms):
 * 
 *     cdef np.ndarray[np.float64_t, ndim=2] I = np.zeros((3,3))             # <<<<<<<<<<<<<<
 *     cdef double *cI = <double *> I.data
 *     cdef int i
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_tuple_) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_tuple_);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1372, __pyx_L1_error)
  __pyx_t_4 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_I.rcbuffer->pybuffer, (PyObject*)__pyx_t_4, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_I = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_I.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1372, __pyx_L1_error)
    } else {__pyx_pybuffernd_I.diminfo[0].strides = __pyx_pybuffernd_I.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_I.diminfo[0].shape = __pyx_pybuffernd_I.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_I.diminfo[1].strides = __pyx_pybuffernd_I.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_I.diminfo[1].shape = __pyx_pybuffernd_I.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_4 = 0;
  __pyx_v_I = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/helpers/helpers.pyx":1373
 * 
 *     cdef np.ndarray[np.float64_t, ndim=2] I = np.zeros((3,3))
 *     cdef double *cI = <double *> I.data             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef double x, y, z
 */
  __pyx_v_cI = ((double *)__pyx_v_I->data);

  /* "src/helpers/helpers.pyx":1377
 *     cdef double x, y, z
 * 
 *     for i in range(natoms):             # <<<<<<<<<<<<<<
 *         x = coor[i,0]
 *         y = coor[i,1]
 */
  __pyx_t_5 = __pyx_v_natoms;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "src/helpers/helpers.pyx":1378
 * 
 *     for i in range(natoms):
 *         x = coor[i,0]             # <<<<<<<<<<<<<<
 *         y = coor[i,1]
 *         z = coor[i,2]
 */
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = 0;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[1];
    __pyx_v_x = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_8 * __pyx_v_coor.strides[0]) ) + __pyx_t_9 * __pyx_v_coor.strides[1]) )));

    /* "src/helpers/helpers.pyx":1379
 *     for i in range(natoms):
 *         x = coor[i,0]
 *         y = coor[i,1]             # <<<<<<<<<<<<<<
 *         z = coor[i,2]
 *         cI[0] += masses[i] * (y*y+z*z)
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_8 = 1;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[0];
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor.shape[1];
    __pyx_v_y = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_9 * __pyx_v_coor.strides[0]) ) + __pyx_t_8 * __pyx_v_coor.strides[1]) )));

    /* "src/helpers/helpers.pyx":1380
 *         x = coor[i,0]
 *         y = coor[i,1]
 *         z = coor[i,2]             # <<<<<<<<<<<<<<
 *         cI[0] += masses[i] * (y*y+z*z)
 *         cI[1] -= masses[i] * x*y
 */
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = 2;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[1];
    __pyx_v_z = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_8 * __pyx_v_coor.strides[0]) ) + __pyx_t_9 * __pyx_v_coor.strides[1]) )));

    /* "src/helpers/helpers.pyx":1381
 *         y = coor[i,1]
 *         z = coor[i,2]
 *         cI[0] += masses[i] * (y*y+z*z)             # <<<<<<<<<<<<<<
 *         cI[1] -= masses[i] * x*y
 *         cI[2] -= masses[i] * x*z
 */
    __pyx_t_10 = 0;
    __pyx_t_9 = __pyx_v_i;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_masses.shape[0];
    (__pyx_v_cI[__pyx_t_10]) = ((__pyx_v_cI[__pyx_t_10]) + ((*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_9 * __pyx_v_masses.strides[0]) ))) * ((__pyx_v_y * __pyx_v_y) + (__pyx_v_z * __pyx_v_z))));

    /* "src/helpers/helpers.pyx":1382
 *         z = coor[i,2]
 *         cI[0] += masses[i] * (y*y+z*z)
 *         cI[1] -= masses[i] * x*y             # <<<<<<<<<<<<<<
 *         cI[2] -= masses[i] * x*z
 *         cI[4] += masses[i] * (x*x+z*z)
 */
    __pyx_t_10 = 1;
    __pyx_t_9 = __pyx_v_i;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_masses.shape[0];
    (__pyx_v_cI[__pyx_t_10]) = ((__pyx_v_cI[__pyx_t_10]) - (((*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_9 * __pyx_v_masses.strides[0]) ))) * __pyx_v_x) * __pyx_v_y));

    /* "src/helpers/helpers.pyx":1383
 *         cI[0] += masses[i] * (y*y+z*z)
 *         cI[1] -= masses[i] * x*y
 *         cI[2] -= masses[i] * x*z             # <<<<<<<<<<<<<<
 *         cI[4] += masses[i] * (x*x+z*z)
 *         cI[5] -= masses[i] * y*z
 */
    __pyx_t_10 = 2;
    __pyx_t_9 = __pyx_v_i;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_masses.shape[0];
    (__pyx_v_cI[__pyx_t_10]) = ((__pyx_v_cI[__pyx_t_10]) - (((*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_9 * __pyx_v_masses.strides[0]) ))) * __pyx_v_x) * __pyx_v_z));

    /* "src/helpers/helpers.pyx":1384
 *         cI[1] -= masses[i] * x*y
 *         cI[2] -= masses[i] * x*z
 *         cI[4] += masses[i] * (x*x+z*z)             # <<<<<<<<<<<<<<
 *         cI[5] -= masses[i] * y*z
 *         cI[8] += masses[i] * (x*x+y*y)
 */
    __pyx_t_10 = 4;
    __pyx_t_9 = __pyx_v_i;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_masses.shape[0];
    (__pyx_v_cI[__pyx_t_10]) = ((__pyx_v_cI[__pyx_t_10]) + ((*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_9 * __pyx_v_masses.strides[0]) ))) * ((__pyx_v_x * __pyx_v_x) + (__pyx_v_z * __pyx_v_z))));

    /* "src/helpers/helpers.pyx":1385
 *         cI[2] -= masses[i] * x*z
 *         cI[4] += masses[i] * (x*x+z*z)
 *         cI[5] -= masses[i] * y*z             # <<<<<<<<<<<<<<
 *         cI[8] += masses[i] * (x*x+y*y)
 * 
 */
    __pyx_t_10 = 5;
    __pyx_t_9 = __pyx_v_i;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_masses.shape[0];
    (__pyx_v_cI[__pyx_t_10]) = ((__pyx_v_cI[__pyx_t_10]) - (((*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_9 * __pyx_v_masses.strides[0]) ))) * __pyx_v_y) * __pyx_v_z));

    /* "src/helpers/helpers.pyx":1386
 *         cI[4] += masses[i] * (x*x+z*z)
 *         cI[5] -= masses[i] * y*z
 *         cI[8] += masses[i] * (x*x+y*y)             # <<<<<<<<<<<<<<
 * 
 *     cI[3] = cI[1]
 */
    __pyx_t_10 = 8;
    __pyx_t_9 = __pyx_v_i;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_masses.shape[0];
    (__pyx_v_cI[__pyx_t_10]) = ((__pyx_v_cI[__pyx_t_10]) + ((*((double *) ( /* dim=0 */ (__pyx_v_masses.data + __pyx_t_9 * __pyx_v_masses.strides[0]) ))) * ((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y))));
  }

  /* "src/helpers/helpers.pyx":1388
 *         cI[8] += masses[i] * (x*x+y*y)
 * 
 *     cI[3] = cI[1]             # <<<<<<<<<<<<<<
 *     cI[6] = cI[2]
 *     cI[7] = cI[5]
 */
  (__pyx_v_cI[3]) = (__pyx_v_cI[1]);

  /* "src/helpers/helpers.pyx":1389
 * 
 *     cI[3] = cI[1]
 *     cI[6] = cI[2]             # <<<<<<<<<<<<<<
 *     cI[7] = cI[5]
 * 
 */
  (__pyx_v_cI[6]) = (__pyx_v_cI[2]);

  /* "src/helpers/helpers.pyx":1390
 *     cI[3] = cI[1]
 *     cI[6] = cI[2]
 *     cI[7] = cI[5]             # <<<<<<<<<<<<<<
 * 
 *     return I
 */
  (__pyx_v_cI[7]) = (__pyx_v_cI[5]);

  /* "src/helpers/helpers.pyx":1392
 *     cI[7] = cI[5]
 * 
 *     return I             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_I));
  __pyx_r = ((PyObject *)__pyx_v_I);
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":1370
 * 
 * @cython.boundscheck(False)
 * def calcInertiaTensor(double [:,:] coor, double [:] masses, int natoms):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.float64_t, ndim=2] I = np.zeros((3,3))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_I.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("newanalysis.helpers.calcInertiaTensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_I.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_I);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_masses, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1396
 * 
 * @cython.boundscheck(False)
 * def calcResidenceTimeseries(char [:,:] ds, int nshells):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nmol    = len(ds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_63calcResidenceTimeseries(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_63calcResidenceTimeseries = {"calcResidenceTimeseries", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_63calcResidenceTimeseries, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_63calcResidenceTimeseries(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_ds = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_nshells;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcResidenceTimeseries (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ds,&__pyx_n_s_nshells,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ds)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nshells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcResidenceTimeseries", 1, 2, 2, 1); __PYX_ERR(0, 1396, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcResidenceTimeseries") < 0)) __PYX_ERR(0, 1396, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ds = __Pyx_PyObject_to_MemoryviewSlice_dsds_char(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_ds.memview)) __PYX_ERR(0, 1396, __pyx_L3_error)
    __pyx_v_nshells = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_nshells == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1396, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcResidenceTimeseries", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1396, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcResidenceTimeseries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_62calcResidenceTimeseries(__pyx_self, __pyx_v_ds, __pyx_v_nshells);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_62calcResidenceTimeseries(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_ds, int __pyx_v_nshells) {
  int __pyx_v_nmol;
  int __pyx_v_nt;
  __Pyx_memviewslice __pyx_v_ts = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_memviewslice __pyx_t_2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcResidenceTimeseries", 0);

  /* "src/helpers/helpers.pyx":1398
 * def calcResidenceTimeseries(char [:,:] ds, int nshells):
 * 
 *     cdef int nmol    = len(ds)             # <<<<<<<<<<<<<<
 *     cdef int nt      = len(ds[0])
 * 
 */
  __pyx_t_1 = __Pyx_MemoryView_Len(__pyx_v_ds); 
  __pyx_v_nmol = __pyx_t_1;

  /* "src/helpers/helpers.pyx":1399
 * 
 *     cdef int nmol    = len(ds)
 *     cdef int nt      = len(ds[0])             # <<<<<<<<<<<<<<
 * 
 *     cdef char [:,:,:] ts = np.zeros((nshells,nmol,nt),dtype=np.int8)
 */
  __pyx_t_2.data = __pyx_v_ds.data;
  __pyx_t_2.memview = __pyx_v_ds.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_2, 0);
  {
    Py_ssize_t __pyx_tmp_idx = 0;
        Py_ssize_t __pyx_tmp_shape = __pyx_v_ds.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_ds.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        __pyx_t_2.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_2.shape[0] = __pyx_v_ds.shape[1];
__pyx_t_2.strides[0] = __pyx_v_ds.strides[1];
    __pyx_t_2.suboffsets[0] = -1;

__pyx_t_1 = __Pyx_MemoryView_Len(__pyx_t_2); 
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;
  __pyx_v_nt = __pyx_t_1;

  /* "src/helpers/helpers.pyx":1401
 *     cdef int nt      = len(ds[0])
 * 
 *     cdef char [:,:,:] ts = np.zeros((nshells,nmol,nt),dtype=np.int8)             # <<<<<<<<<<<<<<
 * 
 *     cdef int i,j,ind
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_nshells); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_nmol); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_nt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_char(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ts = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "src/helpers/helpers.pyx":1405
 *     cdef int i,j,ind
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         for i in prange(nmol):
 *             for j in range(nt):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_9)
            #endif /* _OPENMP */
            {

                /* "src/helpers/helpers.pyx":1406
 * 
 *     with nogil, parallel():
 *         for i in prange(nmol):             # <<<<<<<<<<<<<<
 *             for j in range(nt):
 *                 ts[ds[i,j]-1, i, j] += 1
 */
                __pyx_t_9 = __pyx_v_nmol;
                if ((1 == 0)) abort();
                {
                    __pyx_t_11 = (__pyx_t_9 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_11 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j)
                        #endif /* _OPENMP */
                        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_11; __pyx_t_10++){
                            {
                                __pyx_v_i = (int)(0 + 1 * __pyx_t_10);
                                /* Initialize private variables to invalid values */
                                __pyx_v_j = ((int)0xbad0bad0);

                                /* "src/helpers/helpers.pyx":1407
 *     with nogil, parallel():
 *         for i in prange(nmol):
 *             for j in range(nt):             # <<<<<<<<<<<<<<
 *                 ts[ds[i,j]-1, i, j] += 1
 * 
 */
                                __pyx_t_12 = __pyx_v_nt;
                                __pyx_t_13 = __pyx_t_12;
                                for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
                                  __pyx_v_j = __pyx_t_14;

                                  /* "src/helpers/helpers.pyx":1408
 *         for i in prange(nmol):
 *             for j in range(nt):
 *                 ts[ds[i,j]-1, i, j] += 1             # <<<<<<<<<<<<<<
 * 
 *     return np.asarray(ts)
 */
                                  __pyx_t_15 = __pyx_v_i;
                                  __pyx_t_16 = __pyx_v_j;
                                  if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_ds.shape[0];
                                  if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_ds.shape[1];
                                  __pyx_t_17 = ((*((char *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_15 * __pyx_v_ds.strides[0]) ) + __pyx_t_16 * __pyx_v_ds.strides[1]) ))) - 1);
                                  __pyx_t_18 = __pyx_v_i;
                                  __pyx_t_19 = __pyx_v_j;
                                  if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_ts.shape[0];
                                  if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_ts.shape[1];
                                  if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_ts.shape[2];
                                  *((char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_ts.data + __pyx_t_17 * __pyx_v_ts.strides[0]) ) + __pyx_t_18 * __pyx_v_ts.strides[1]) ) + __pyx_t_19 * __pyx_v_ts.strides[2]) )) += 1;
                                }
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":1405
 *     cdef int i,j,ind
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         for i in prange(nmol):
 *             for j in range(nt):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":1410
 *                 ts[ds[i,j]-1, i, j] += 1
 * 
 *     return np.asarray(ts)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_ts, 3, (PyObject *(*)(char *)) __pyx_memview_get_char, (int (*)(char *, PyObject *)) __pyx_memview_set_char, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":1396
 * 
 * @cython.boundscheck(False)
 * def calcResidenceTimeseries(char [:,:] ds, int nshells):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nmol    = len(ds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("newanalysis.helpers.calcResidenceTimeseries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_ts, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1413
 * 
 * @cython.boundscheck(False)
 * def calcAngularDisplacement(double [:,:] wts, double dt):             # <<<<<<<<<<<<<<
 * 
 *     cdef int tn = wts.shape[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_65calcAngularDisplacement(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_65calcAngularDisplacement = {"calcAngularDisplacement", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_65calcAngularDisplacement, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_65calcAngularDisplacement(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_wts = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dt;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcAngularDisplacement (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wts,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wts)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcAngularDisplacement", 1, 2, 2, 1); __PYX_ERR(0, 1413, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcAngularDisplacement") < 0)) __PYX_ERR(0, 1413, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_wts = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_wts.memview)) __PYX_ERR(0, 1413, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1413, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcAngularDisplacement", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1413, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcAngularDisplacement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_64calcAngularDisplacement(__pyx_self, __pyx_v_wts, __pyx_v_dt);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_64calcAngularDisplacement(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_wts, double __pyx_v_dt) {
  int __pyx_v_tn;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  __Pyx_memviewslice __pyx_v_integral = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_msd = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_ctr = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcAngularDisplacement", 0);

  /* "src/helpers/helpers.pyx":1415
 * def calcAngularDisplacement(double [:,:] wts, double dt):
 * 
 *     cdef int tn = wts.shape[0]             # <<<<<<<<<<<<<<
 *     cdef int i, j, k
 *     cdef double [:,:] integral = np.zeros((tn,3))
 */
  __pyx_v_tn = (__pyx_v_wts.shape[0]);

  /* "src/helpers/helpers.pyx":1417
 *     cdef int tn = wts.shape[0]
 *     cdef int i, j, k
 *     cdef double [:,:] integral = np.zeros((tn,3))             # <<<<<<<<<<<<<<
 *     cdef double [:,:] msd = np.zeros((tn,3))
 *     cdef int [:] ctr = np.zeros(tn, dtype=np.int32)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_tn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_integral = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "src/helpers/helpers.pyx":1418
 *     cdef int i, j, k
 *     cdef double [:,:] integral = np.zeros((tn,3))
 *     cdef double [:,:] msd = np.zeros((tn,3))             # <<<<<<<<<<<<<<
 *     cdef int [:] ctr = np.zeros(tn, dtype=np.int32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_msd = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "src/helpers/helpers.pyx":1419
 *     cdef double [:,:] integral = np.zeros((tn,3))
 *     cdef double [:,:] msd = np.zeros((tn,3))
 *     cdef int [:] ctr = np.zeros(tn, dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *     # calculate integral
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_tn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_ctr = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "src/helpers/helpers.pyx":1422
 * 
 *     # calculate integral
 *     for i in range(1,tn):             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             k = i-1
 */
  __pyx_t_8 = __pyx_v_tn;
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 1; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "src/helpers/helpers.pyx":1423
 *     # calculate integral
 *     for i in range(1,tn):
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             k = i-1
 *             integral[i,j] = integral[k,j] + (wts[k,j] + wts[i,j]) * 0.5 * dt
 */
    for (__pyx_t_11 = 0; __pyx_t_11 < 3; __pyx_t_11+=1) {
      __pyx_v_j = __pyx_t_11;

      /* "src/helpers/helpers.pyx":1424
 *     for i in range(1,tn):
 *         for j in range(3):
 *             k = i-1             # <<<<<<<<<<<<<<
 *             integral[i,j] = integral[k,j] + (wts[k,j] + wts[i,j]) * 0.5 * dt
 * 
 */
      __pyx_v_k = (__pyx_v_i - 1);

      /* "src/helpers/helpers.pyx":1425
 *         for j in range(3):
 *             k = i-1
 *             integral[i,j] = integral[k,j] + (wts[k,j] + wts[i,j]) * 0.5 * dt             # <<<<<<<<<<<<<<
 * 
 *     # calculate angular displacement
 */
      __pyx_t_12 = __pyx_v_k;
      __pyx_t_13 = __pyx_v_j;
      if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_integral.shape[0];
      if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_integral.shape[1];
      __pyx_t_14 = __pyx_v_k;
      __pyx_t_15 = __pyx_v_j;
      if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_wts.shape[0];
      if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_wts.shape[1];
      __pyx_t_16 = __pyx_v_i;
      __pyx_t_17 = __pyx_v_j;
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_wts.shape[0];
      if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_wts.shape[1];
      __pyx_t_18 = __pyx_v_i;
      __pyx_t_19 = __pyx_v_j;
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_integral.shape[0];
      if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_integral.shape[1];
      *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_integral.data + __pyx_t_18 * __pyx_v_integral.strides[0]) ) + __pyx_t_19 * __pyx_v_integral.strides[1]) )) = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_integral.data + __pyx_t_12 * __pyx_v_integral.strides[0]) ) + __pyx_t_13 * __pyx_v_integral.strides[1]) ))) + ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_wts.data + __pyx_t_14 * __pyx_v_wts.strides[0]) ) + __pyx_t_15 * __pyx_v_wts.strides[1]) ))) + (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_wts.data + __pyx_t_16 * __pyx_v_wts.strides[0]) ) + __pyx_t_17 * __pyx_v_wts.strides[1]) )))) * 0.5) * __pyx_v_dt));
    }
  }

  /* "src/helpers/helpers.pyx":1428
 * 
 *     # calculate angular displacement
 *     for i in prange(tn,nogil=True,schedule=dynamic):             # <<<<<<<<<<<<<<
 *         for j in range(tn-i):
 *             for k in range(3):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_8 = __pyx_v_tn;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_10 = (__pyx_t_8 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_10 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_20, __pyx_t_21, __pyx_t_22)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j) lastprivate(__pyx_v_k)
                    #endif /* _OPENMP */
                    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_10; __pyx_t_9++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_9);
                            /* Initialize private variables to invalid values */
                            __pyx_v_j = ((int)0xbad0bad0);
                            __pyx_v_k = ((int)0xbad0bad0);

                            /* "src/helpers/helpers.pyx":1429
 *     # calculate angular displacement
 *     for i in prange(tn,nogil=True,schedule=dynamic):
 *         for j in range(tn-i):             # <<<<<<<<<<<<<<
 *             for k in range(3):
 *                 msd[i,k] += pow(integral[j,k] - integral[j+i,k], 2)
 */
                            __pyx_t_11 = (__pyx_v_tn - __pyx_v_i);
                            __pyx_t_20 = __pyx_t_11;
                            for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
                              __pyx_v_j = __pyx_t_21;

                              /* "src/helpers/helpers.pyx":1430
 *     for i in prange(tn,nogil=True,schedule=dynamic):
 *         for j in range(tn-i):
 *             for k in range(3):             # <<<<<<<<<<<<<<
 *                 msd[i,k] += pow(integral[j,k] - integral[j+i,k], 2)
 *             ctr[i] += 1
 */
                              for (__pyx_t_22 = 0; __pyx_t_22 < 3; __pyx_t_22+=1) {
                                __pyx_v_k = __pyx_t_22;

                                /* "src/helpers/helpers.pyx":1431
 *         for j in range(tn-i):
 *             for k in range(3):
 *                 msd[i,k] += pow(integral[j,k] - integral[j+i,k], 2)             # <<<<<<<<<<<<<<
 *             ctr[i] += 1
 * 
 */
                                __pyx_t_17 = __pyx_v_j;
                                __pyx_t_16 = __pyx_v_k;
                                if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_integral.shape[0];
                                if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_integral.shape[1];
                                __pyx_t_15 = (__pyx_v_j + __pyx_v_i);
                                __pyx_t_14 = __pyx_v_k;
                                if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_integral.shape[0];
                                if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_integral.shape[1];
                                __pyx_t_13 = __pyx_v_i;
                                __pyx_t_12 = __pyx_v_k;
                                if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_msd.shape[0];
                                if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_msd.shape[1];
                                *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_msd.data + __pyx_t_13 * __pyx_v_msd.strides[0]) ) + __pyx_t_12 * __pyx_v_msd.strides[1]) )) += pow(((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_integral.data + __pyx_t_17 * __pyx_v_integral.strides[0]) ) + __pyx_t_16 * __pyx_v_integral.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_integral.data + __pyx_t_15 * __pyx_v_integral.strides[0]) ) + __pyx_t_14 * __pyx_v_integral.strides[1]) )))), 2.0);
                              }

                              /* "src/helpers/helpers.pyx":1432
 *             for k in range(3):
 *                 msd[i,k] += pow(integral[j,k] - integral[j+i,k], 2)
 *             ctr[i] += 1             # <<<<<<<<<<<<<<
 * 
 *     for i in range(tn):
 */
                              __pyx_t_14 = __pyx_v_i;
                              if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_ctr.shape[0];
                              *((int *) ( /* dim=0 */ (__pyx_v_ctr.data + __pyx_t_14 * __pyx_v_ctr.strides[0]) )) += 1;
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":1428
 * 
 *     # calculate angular displacement
 *     for i in prange(tn,nogil=True,schedule=dynamic):             # <<<<<<<<<<<<<<
 *         for j in range(tn-i):
 *             for k in range(3):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L9:;
      }
  }

  /* "src/helpers/helpers.pyx":1434
 *             ctr[i] += 1
 * 
 *     for i in range(tn):             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             msd[i,j] /= ctr[i]
 */
  __pyx_t_10 = __pyx_v_tn;
  __pyx_t_9 = __pyx_t_10;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_9; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "src/helpers/helpers.pyx":1435
 * 
 *     for i in range(tn):
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             msd[i,j] /= ctr[i]
 * 
 */
    for (__pyx_t_11 = 0; __pyx_t_11 < 3; __pyx_t_11+=1) {
      __pyx_v_j = __pyx_t_11;

      /* "src/helpers/helpers.pyx":1436
 *     for i in range(tn):
 *         for j in range(3):
 *             msd[i,j] /= ctr[i]             # <<<<<<<<<<<<<<
 * 
 *     return msd
 */
      __pyx_t_14 = __pyx_v_i;
      if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_ctr.shape[0];
      __pyx_t_15 = __pyx_v_i;
      __pyx_t_16 = __pyx_v_j;
      if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_msd.shape[0];
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_msd.shape[1];
      *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_msd.data + __pyx_t_15 * __pyx_v_msd.strides[0]) ) + __pyx_t_16 * __pyx_v_msd.strides[1]) )) /= (*((int *) ( /* dim=0 */ (__pyx_v_ctr.data + __pyx_t_14 * __pyx_v_ctr.strides[0]) )));
    }
  }

  /* "src/helpers/helpers.pyx":1438
 *             msd[i,j] /= ctr[i]
 * 
 *     return msd             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_msd, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":1413
 * 
 * @cython.boundscheck(False)
 * def calcAngularDisplacement(double [:,:] wts, double dt):             # <<<<<<<<<<<<<<
 * 
 *     cdef int tn = wts.shape[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_AddTraceback("newanalysis.helpers.calcAngularDisplacement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_integral, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_msd, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ctr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_wts, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1441
 * 
 * @cython.boundscheck(False)
 * def findNearestAtom(double [:,:] coor_core, double [:,:] coor_surr, double [:] mindist,             # <<<<<<<<<<<<<<
 *                     double [:] mindist2, double [:,:] minvec, int [:] next_id):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_67findNearestAtom(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_67findNearestAtom = {"findNearestAtom", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_67findNearestAtom, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_67findNearestAtom(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor_core = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coor_surr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_mindist = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_mindist2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_minvec = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_next_id = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findNearestAtom (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor_core,&__pyx_n_s_coor_surr,&__pyx_n_s_mindist,&__pyx_n_s_mindist2,&__pyx_n_s_minvec,&__pyx_n_s_next_id,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor_core)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor_surr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findNearestAtom", 1, 6, 6, 1); __PYX_ERR(0, 1441, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mindist)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findNearestAtom", 1, 6, 6, 2); __PYX_ERR(0, 1441, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mindist2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findNearestAtom", 1, 6, 6, 3); __PYX_ERR(0, 1441, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_minvec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findNearestAtom", 1, 6, 6, 4); __PYX_ERR(0, 1441, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_next_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findNearestAtom", 1, 6, 6, 5); __PYX_ERR(0, 1441, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "findNearestAtom") < 0)) __PYX_ERR(0, 1441, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_coor_core = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor_core.memview)) __PYX_ERR(0, 1441, __pyx_L3_error)
    __pyx_v_coor_surr = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor_surr.memview)) __PYX_ERR(0, 1441, __pyx_L3_error)
    __pyx_v_mindist = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_mindist.memview)) __PYX_ERR(0, 1441, __pyx_L3_error)
    __pyx_v_mindist2 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_mindist2.memview)) __PYX_ERR(0, 1442, __pyx_L3_error)
    __pyx_v_minvec = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_minvec.memview)) __PYX_ERR(0, 1442, __pyx_L3_error)
    __pyx_v_next_id = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_next_id.memview)) __PYX_ERR(0, 1442, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findNearestAtom", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1441, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.findNearestAtom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_66findNearestAtom(__pyx_self, __pyx_v_coor_core, __pyx_v_coor_surr, __pyx_v_mindist, __pyx_v_mindist2, __pyx_v_minvec, __pyx_v_next_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_66findNearestAtom(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor_core, __Pyx_memviewslice __pyx_v_coor_surr, __Pyx_memviewslice __pyx_v_mindist, __Pyx_memviewslice __pyx_v_mindist2, __Pyx_memviewslice __pyx_v_minvec, __Pyx_memviewslice __pyx_v_next_id) {
  CYTHON_UNUSED int __pyx_v_n_core;
  int __pyx_v_n_surr;
  int __pyx_v_i;
  int __pyx_v_j;
  double __pyx_v_tmp_x;
  double __pyx_v_tmp_y;
  double __pyx_v_tmp_z;
  double __pyx_v_dist2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  __Pyx_RefNannySetupContext("findNearestAtom", 0);

  /* "src/helpers/helpers.pyx":1444
 *                     double [:] mindist2, double [:,:] minvec, int [:] next_id):
 * 
 *     cdef int n_core = coor_core.shape[0]             # <<<<<<<<<<<<<<
 *     cdef int n_surr = coor_surr.shape[0]
 *     cdef int i, j
 */
  __pyx_v_n_core = (__pyx_v_coor_core.shape[0]);

  /* "src/helpers/helpers.pyx":1445
 * 
 *     cdef int n_core = coor_core.shape[0]
 *     cdef int n_surr = coor_surr.shape[0]             # <<<<<<<<<<<<<<
 *     cdef int i, j
 * 
 */
  __pyx_v_n_surr = (__pyx_v_coor_surr.shape[0]);

  /* "src/helpers/helpers.pyx":1450
 *     cdef double tmp_x, tmp_y, tmp_z, dist2
 * 
 *     for i in prange(n_core, nogil=True):             # <<<<<<<<<<<<<<
 *         for j in range(n_surr):
 *             tmp_x = coor_surr[j,0] - coor_core[i,0]
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_1 = __pyx_v_n_core;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_3 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for lastprivate(__pyx_v_dist2) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j) lastprivate(__pyx_v_tmp_x) lastprivate(__pyx_v_tmp_y) lastprivate(__pyx_v_tmp_z)
                    #endif /* _OPENMP */
                    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_2);
                            /* Initialize private variables to invalid values */
                            __pyx_v_dist2 = ((double)__PYX_NAN());
                            __pyx_v_j = ((int)0xbad0bad0);
                            __pyx_v_tmp_x = ((double)__PYX_NAN());
                            __pyx_v_tmp_y = ((double)__PYX_NAN());
                            __pyx_v_tmp_z = ((double)__PYX_NAN());

                            /* "src/helpers/helpers.pyx":1451
 * 
 *     for i in prange(n_core, nogil=True):
 *         for j in range(n_surr):             # <<<<<<<<<<<<<<
 *             tmp_x = coor_surr[j,0] - coor_core[i,0]
 *             tmp_y = coor_surr[j,1] - coor_core[i,1]
 */
                            __pyx_t_4 = __pyx_v_n_surr;
                            __pyx_t_5 = __pyx_t_4;
                            for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
                              __pyx_v_j = __pyx_t_6;

                              /* "src/helpers/helpers.pyx":1452
 *     for i in prange(n_core, nogil=True):
 *         for j in range(n_surr):
 *             tmp_x = coor_surr[j,0] - coor_core[i,0]             # <<<<<<<<<<<<<<
 *             tmp_y = coor_surr[j,1] - coor_core[i,1]
 *             tmp_z = coor_surr[j,2] - coor_core[i,2]
 */
                              __pyx_t_7 = __pyx_v_j;
                              __pyx_t_8 = 0;
                              if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_coor_surr.shape[0];
                              if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor_surr.shape[1];
                              __pyx_t_9 = __pyx_v_i;
                              __pyx_t_10 = 0;
                              if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor_core.shape[0];
                              if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor_core.shape[1];
                              __pyx_v_tmp_x = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_surr.data + __pyx_t_7 * __pyx_v_coor_surr.strides[0]) ) + __pyx_t_8 * __pyx_v_coor_surr.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_core.data + __pyx_t_9 * __pyx_v_coor_core.strides[0]) ) + __pyx_t_10 * __pyx_v_coor_core.strides[1]) ))));

                              /* "src/helpers/helpers.pyx":1453
 *         for j in range(n_surr):
 *             tmp_x = coor_surr[j,0] - coor_core[i,0]
 *             tmp_y = coor_surr[j,1] - coor_core[i,1]             # <<<<<<<<<<<<<<
 *             tmp_z = coor_surr[j,2] - coor_core[i,2]
 * 
 */
                              __pyx_t_10 = __pyx_v_j;
                              __pyx_t_9 = 1;
                              if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor_surr.shape[0];
                              if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor_surr.shape[1];
                              __pyx_t_8 = __pyx_v_i;
                              __pyx_t_7 = 1;
                              if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor_core.shape[0];
                              if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_coor_core.shape[1];
                              __pyx_v_tmp_y = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_surr.data + __pyx_t_10 * __pyx_v_coor_surr.strides[0]) ) + __pyx_t_9 * __pyx_v_coor_surr.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_core.data + __pyx_t_8 * __pyx_v_coor_core.strides[0]) ) + __pyx_t_7 * __pyx_v_coor_core.strides[1]) ))));

                              /* "src/helpers/helpers.pyx":1454
 *             tmp_x = coor_surr[j,0] - coor_core[i,0]
 *             tmp_y = coor_surr[j,1] - coor_core[i,1]
 *             tmp_z = coor_surr[j,2] - coor_core[i,2]             # <<<<<<<<<<<<<<
 * 
 *             dist2 = tmp_x*tmp_x + tmp_y*tmp_y + tmp_z*tmp_z
 */
                              __pyx_t_7 = __pyx_v_j;
                              __pyx_t_8 = 2;
                              if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_coor_surr.shape[0];
                              if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor_surr.shape[1];
                              __pyx_t_9 = __pyx_v_i;
                              __pyx_t_10 = 2;
                              if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor_core.shape[0];
                              if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor_core.shape[1];
                              __pyx_v_tmp_z = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_surr.data + __pyx_t_7 * __pyx_v_coor_surr.strides[0]) ) + __pyx_t_8 * __pyx_v_coor_surr.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_core.data + __pyx_t_9 * __pyx_v_coor_core.strides[0]) ) + __pyx_t_10 * __pyx_v_coor_core.strides[1]) ))));

                              /* "src/helpers/helpers.pyx":1456
 *             tmp_z = coor_surr[j,2] - coor_core[i,2]
 * 
 *             dist2 = tmp_x*tmp_x + tmp_y*tmp_y + tmp_z*tmp_z             # <<<<<<<<<<<<<<
 * 
 *             if dist2 < mindist2[i]:
 */
                              __pyx_v_dist2 = (((__pyx_v_tmp_x * __pyx_v_tmp_x) + (__pyx_v_tmp_y * __pyx_v_tmp_y)) + (__pyx_v_tmp_z * __pyx_v_tmp_z));

                              /* "src/helpers/helpers.pyx":1458
 *             dist2 = tmp_x*tmp_x + tmp_y*tmp_y + tmp_z*tmp_z
 * 
 *             if dist2 < mindist2[i]:             # <<<<<<<<<<<<<<
 *                 mindist2[i] = dist2
 *                 next_id[i] = j
 */
                              __pyx_t_10 = __pyx_v_i;
                              if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_mindist2.shape[0];
                              __pyx_t_11 = ((__pyx_v_dist2 < (*((double *) ( /* dim=0 */ (__pyx_v_mindist2.data + __pyx_t_10 * __pyx_v_mindist2.strides[0]) )))) != 0);
                              if (__pyx_t_11) {

                                /* "src/helpers/helpers.pyx":1459
 * 
 *             if dist2 < mindist2[i]:
 *                 mindist2[i] = dist2             # <<<<<<<<<<<<<<
 *                 next_id[i] = j
 * 
 */
                                __pyx_t_10 = __pyx_v_i;
                                if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_mindist2.shape[0];
                                *((double *) ( /* dim=0 */ (__pyx_v_mindist2.data + __pyx_t_10 * __pyx_v_mindist2.strides[0]) )) = __pyx_v_dist2;

                                /* "src/helpers/helpers.pyx":1460
 *             if dist2 < mindist2[i]:
 *                 mindist2[i] = dist2
 *                 next_id[i] = j             # <<<<<<<<<<<<<<
 * 
 *         mindist[i] = sqrt(mindist2[i])
 */
                                __pyx_t_10 = __pyx_v_i;
                                if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_next_id.shape[0];
                                *((int *) ( /* dim=0 */ (__pyx_v_next_id.data + __pyx_t_10 * __pyx_v_next_id.strides[0]) )) = __pyx_v_j;

                                /* "src/helpers/helpers.pyx":1458
 *             dist2 = tmp_x*tmp_x + tmp_y*tmp_y + tmp_z*tmp_z
 * 
 *             if dist2 < mindist2[i]:             # <<<<<<<<<<<<<<
 *                 mindist2[i] = dist2
 *                 next_id[i] = j
 */
                              }
                            }

                            /* "src/helpers/helpers.pyx":1462
 *                 next_id[i] = j
 * 
 *         mindist[i] = sqrt(mindist2[i])             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             minvec[i,j] = coor_surr[next_id[i],j] - coor_core[i,j]
 */
                            __pyx_t_10 = __pyx_v_i;
                            if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_mindist2.shape[0];
                            __pyx_t_9 = __pyx_v_i;
                            if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_mindist.shape[0];
                            *((double *) ( /* dim=0 */ (__pyx_v_mindist.data + __pyx_t_9 * __pyx_v_mindist.strides[0]) )) = sqrt((*((double *) ( /* dim=0 */ (__pyx_v_mindist2.data + __pyx_t_10 * __pyx_v_mindist2.strides[0]) ))));

                            /* "src/helpers/helpers.pyx":1463
 * 
 *         mindist[i] = sqrt(mindist2[i])
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             minvec[i,j] = coor_surr[next_id[i],j] - coor_core[i,j]
 * 
 */
                            for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
                              __pyx_v_j = __pyx_t_4;

                              /* "src/helpers/helpers.pyx":1464
 *         mindist[i] = sqrt(mindist2[i])
 *         for j in range(3):
 *             minvec[i,j] = coor_surr[next_id[i],j] - coor_core[i,j]             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
                              __pyx_t_10 = __pyx_v_i;
                              if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_next_id.shape[0];
                              __pyx_t_9 = (*((int *) ( /* dim=0 */ (__pyx_v_next_id.data + __pyx_t_10 * __pyx_v_next_id.strides[0]) )));
                              __pyx_t_8 = __pyx_v_j;
                              if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor_surr.shape[0];
                              if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor_surr.shape[1];
                              __pyx_t_7 = __pyx_v_i;
                              __pyx_t_12 = __pyx_v_j;
                              if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_coor_core.shape[0];
                              if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coor_core.shape[1];
                              __pyx_t_13 = __pyx_v_i;
                              __pyx_t_14 = __pyx_v_j;
                              if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_minvec.shape[0];
                              if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_minvec.shape[1];
                              *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_minvec.data + __pyx_t_13 * __pyx_v_minvec.strides[0]) ) + __pyx_t_14 * __pyx_v_minvec.strides[1]) )) = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_surr.data + __pyx_t_9 * __pyx_v_coor_surr.strides[0]) ) + __pyx_t_8 * __pyx_v_coor_surr.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_core.data + __pyx_t_7 * __pyx_v_coor_core.strides[0]) ) + __pyx_t_12 * __pyx_v_coor_core.strides[1]) ))));
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":1450
 *     cdef double tmp_x, tmp_y, tmp_z, dist2
 * 
 *     for i in prange(n_core, nogil=True):             # <<<<<<<<<<<<<<
 *         for j in range(n_surr):
 *             tmp_x = coor_surr[j,0] - coor_core[i,0]
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":1441
 * 
 * @cython.boundscheck(False)
 * def findNearestAtom(double [:,:] coor_core, double [:,:] coor_surr, double [:] mindist,             # <<<<<<<<<<<<<<
 *                     double [:] mindist2, double [:,:] minvec, int [:] next_id):
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor_core, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor_surr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_mindist, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_mindist2, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_minvec, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_next_id, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1467
 * 
 * @cython.boundscheck(False)
 * def checkHBond(double [:,:] coor_surr, double [:,:] coor_oh2, int nres_surr, double maxdist):             # <<<<<<<<<<<<<<
 *     # this function is designed only for water hydrogen bonds!
 *     cdef int sites_per_res = coor_surr.shape[0] / nres_surr
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_69checkHBond(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_69checkHBond = {"checkHBond", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_69checkHBond, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_69checkHBond(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor_surr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coor_oh2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_nres_surr;
  double __pyx_v_maxdist;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkHBond (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor_surr,&__pyx_n_s_coor_oh2,&__pyx_n_s_nres_surr,&__pyx_n_s_maxdist,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor_surr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor_oh2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkHBond", 1, 4, 4, 1); __PYX_ERR(0, 1467, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nres_surr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkHBond", 1, 4, 4, 2); __PYX_ERR(0, 1467, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxdist)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkHBond", 1, 4, 4, 3); __PYX_ERR(0, 1467, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "checkHBond") < 0)) __PYX_ERR(0, 1467, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_coor_surr = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor_surr.memview)) __PYX_ERR(0, 1467, __pyx_L3_error)
    __pyx_v_coor_oh2 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor_oh2.memview)) __PYX_ERR(0, 1467, __pyx_L3_error)
    __pyx_v_nres_surr = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nres_surr == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1467, __pyx_L3_error)
    __pyx_v_maxdist = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_maxdist == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1467, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkHBond", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1467, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.checkHBond", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_68checkHBond(__pyx_self, __pyx_v_coor_surr, __pyx_v_coor_oh2, __pyx_v_nres_surr, __pyx_v_maxdist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_68checkHBond(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor_surr, __Pyx_memviewslice __pyx_v_coor_oh2, int __pyx_v_nres_surr, double __pyx_v_maxdist) {
  int __pyx_v_sites_per_res;
  int __pyx_v_nsurr;
  int __pyx_v_nwat;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_l;
  int __pyx_v_idx;
  int __pyx_v_idx2;
  int __pyx_v_idx3;
  __Pyx_memviewslice __pyx_v_hbond = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_v_dx2;
  double __pyx_v_dy2;
  double __pyx_v_dz2;
  double __pyx_v_dot;
  double __pyx_v_dot2;
  double __pyx_v_dist;
  double __pyx_v_dist2;
  double __pyx_v_cosine;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  double __pyx_t_22;
  double __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkHBond", 0);

  /* "src/helpers/helpers.pyx":1469
 * def checkHBond(double [:,:] coor_surr, double [:,:] coor_oh2, int nres_surr, double maxdist):
 *     # this function is designed only for water hydrogen bonds!
 *     cdef int sites_per_res = coor_surr.shape[0] / nres_surr             # <<<<<<<<<<<<<<
 *     cdef int nsurr = coor_surr.shape[0] / sites_per_res
 *     cdef int nwat = coor_oh2.shape[0] / 3
 */
  if (unlikely(__pyx_v_nres_surr == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 1469, __pyx_L1_error)
  }
  else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_nres_surr == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW((__pyx_v_coor_surr.shape[0])))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 1469, __pyx_L1_error)
  }
  __pyx_v_sites_per_res = __Pyx_div_Py_ssize_t((__pyx_v_coor_surr.shape[0]), __pyx_v_nres_surr);

  /* "src/helpers/helpers.pyx":1470
 *     # this function is designed only for water hydrogen bonds!
 *     cdef int sites_per_res = coor_surr.shape[0] / nres_surr
 *     cdef int nsurr = coor_surr.shape[0] / sites_per_res             # <<<<<<<<<<<<<<
 *     cdef int nwat = coor_oh2.shape[0] / 3
 *     cdef int i, j, k, l, idx, idx2, idx3
 */
  if (unlikely(__pyx_v_sites_per_res == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 1470, __pyx_L1_error)
  }
  else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_sites_per_res == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW((__pyx_v_coor_surr.shape[0])))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 1470, __pyx_L1_error)
  }
  __pyx_v_nsurr = __Pyx_div_Py_ssize_t((__pyx_v_coor_surr.shape[0]), __pyx_v_sites_per_res);

  /* "src/helpers/helpers.pyx":1471
 *     cdef int sites_per_res = coor_surr.shape[0] / nres_surr
 *     cdef int nsurr = coor_surr.shape[0] / sites_per_res
 *     cdef int nwat = coor_oh2.shape[0] / 3             # <<<<<<<<<<<<<<
 *     cdef int i, j, k, l, idx, idx2, idx3
 * 
 */
  __pyx_v_nwat = __Pyx_div_Py_ssize_t((__pyx_v_coor_oh2.shape[0]), 3);

  /* "src/helpers/helpers.pyx":1474
 *     cdef int i, j, k, l, idx, idx2, idx3
 * 
 *     cdef char [:] hbond = np.zeros(nwat, dtype=np.int8)             # <<<<<<<<<<<<<<
 * 
 *     cdef double dx, dy, dz, dx2, dy2, dz2, dot, dot2, dist, dist2, cosine
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nwat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_char(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_hbond = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "src/helpers/helpers.pyx":1479
 * 
 *     # loop over water molecules
 *     for i in prange(nwat, nogil=True):             # <<<<<<<<<<<<<<
 *         if hbond[i] == 0:
 *             # loop over h atoms
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_7 = __pyx_v_nwat;
        if ((1 == 0)) abort();
        {
            double __pyx_parallel_temp0 = ((double)__PYX_NAN());
            double __pyx_parallel_temp1 = ((double)__PYX_NAN());
            double __pyx_parallel_temp2 = ((double)__PYX_NAN());
            double __pyx_parallel_temp3 = ((double)__PYX_NAN());
            double __pyx_parallel_temp4 = ((double)__PYX_NAN());
            double __pyx_parallel_temp5 = ((double)__PYX_NAN());
            double __pyx_parallel_temp6 = ((double)__PYX_NAN());
            double __pyx_parallel_temp7 = ((double)__PYX_NAN());
            double __pyx_parallel_temp8 = ((double)__PYX_NAN());
            double __pyx_parallel_temp9 = ((double)__PYX_NAN());
            double __pyx_parallel_temp10 = ((double)__PYX_NAN());
            int __pyx_parallel_temp11 = ((int)0xbad0bad0);
            int __pyx_parallel_temp12 = ((int)0xbad0bad0);
            int __pyx_parallel_temp13 = ((int)0xbad0bad0);
            int __pyx_parallel_temp14 = ((int)0xbad0bad0);
            int __pyx_parallel_temp15 = ((int)0xbad0bad0);
            int __pyx_parallel_temp16 = ((int)0xbad0bad0);
            int __pyx_parallel_temp17 = ((int)0xbad0bad0);
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_9 = (__pyx_t_7 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_9 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    Py_BEGIN_ALLOW_THREADS
                    #endif /* _OPENMP */
                    #ifdef _OPENMP
                    #pragma omp for lastprivate(__pyx_v_cosine) lastprivate(__pyx_v_dist) lastprivate(__pyx_v_dist2) lastprivate(__pyx_v_dot) lastprivate(__pyx_v_dot2) lastprivate(__pyx_v_dx) lastprivate(__pyx_v_dx2) lastprivate(__pyx_v_dy) lastprivate(__pyx_v_dy2) lastprivate(__pyx_v_dz) lastprivate(__pyx_v_dz2) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_idx) lastprivate(__pyx_v_idx2) lastprivate(__pyx_v_idx3) lastprivate(__pyx_v_j) lastprivate(__pyx_v_k) lastprivate(__pyx_v_l)
                    #endif /* _OPENMP */
                    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_9; __pyx_t_8++){
                        if (__pyx_parallel_why < 2)
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_8);
                            /* Initialize private variables to invalid values */
                            __pyx_v_cosine = ((double)__PYX_NAN());
                            __pyx_v_dist = ((double)__PYX_NAN());
                            __pyx_v_dist2 = ((double)__PYX_NAN());
                            __pyx_v_dot = ((double)__PYX_NAN());
                            __pyx_v_dot2 = ((double)__PYX_NAN());
                            __pyx_v_dx = ((double)__PYX_NAN());
                            __pyx_v_dx2 = ((double)__PYX_NAN());
                            __pyx_v_dy = ((double)__PYX_NAN());
                            __pyx_v_dy2 = ((double)__PYX_NAN());
                            __pyx_v_dz = ((double)__PYX_NAN());
                            __pyx_v_dz2 = ((double)__PYX_NAN());
                            __pyx_v_idx = ((int)0xbad0bad0);
                            __pyx_v_idx2 = ((int)0xbad0bad0);
                            __pyx_v_idx3 = ((int)0xbad0bad0);
                            __pyx_v_j = ((int)0xbad0bad0);
                            __pyx_v_k = ((int)0xbad0bad0);
                            __pyx_v_l = ((int)0xbad0bad0);

                            /* "src/helpers/helpers.pyx":1480
 *     # loop over water molecules
 *     for i in prange(nwat, nogil=True):
 *         if hbond[i] == 0:             # <<<<<<<<<<<<<<
 *             # loop over h atoms
 *             for j in range(2):
 */
                            __pyx_t_10 = __pyx_v_i;
                            if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_hbond.shape[0];
                            __pyx_t_11 = (((*((char *) ( /* dim=0 */ (__pyx_v_hbond.data + __pyx_t_10 * __pyx_v_hbond.strides[0]) ))) == 0) != 0);
                            if (__pyx_t_11) {

                              /* "src/helpers/helpers.pyx":1482
 *         if hbond[i] == 0:
 *             # loop over h atoms
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 if hbond[i] == 0:
 *                     idx = i*3+1+j
 */
                              for (__pyx_t_12 = 0; __pyx_t_12 < 2; __pyx_t_12+=1) {
                                __pyx_v_j = __pyx_t_12;

                                /* "src/helpers/helpers.pyx":1483
 *             # loop over h atoms
 *             for j in range(2):
 *                 if hbond[i] == 0:             # <<<<<<<<<<<<<<
 *                     idx = i*3+1+j
 *                     idx3 = i*3
 */
                                __pyx_t_10 = __pyx_v_i;
                                if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_hbond.shape[0];
                                __pyx_t_11 = (((*((char *) ( /* dim=0 */ (__pyx_v_hbond.data + __pyx_t_10 * __pyx_v_hbond.strides[0]) ))) == 0) != 0);
                                if (__pyx_t_11) {

                                  /* "src/helpers/helpers.pyx":1484
 *             for j in range(2):
 *                 if hbond[i] == 0:
 *                     idx = i*3+1+j             # <<<<<<<<<<<<<<
 *                     idx3 = i*3
 *                     # loop over surrounding molecules
 */
                                  __pyx_v_idx = (((__pyx_v_i * 3) + 1) + __pyx_v_j);

                                  /* "src/helpers/helpers.pyx":1485
 *                 if hbond[i] == 0:
 *                     idx = i*3+1+j
 *                     idx3 = i*3             # <<<<<<<<<<<<<<
 *                     # loop over surrounding molecules
 *                     for k in range(nsurr):
 */
                                  __pyx_v_idx3 = (__pyx_v_i * 3);

                                  /* "src/helpers/helpers.pyx":1487
 *                     idx3 = i*3
 *                     # loop over surrounding molecules
 *                     for k in range(nsurr):             # <<<<<<<<<<<<<<
 *                         if hbond[i] == 0:
 *                             # loop over oxygen atoms
 */
                                  __pyx_t_13 = __pyx_v_nsurr;
                                  __pyx_t_14 = __pyx_t_13;
                                  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
                                    __pyx_v_k = __pyx_t_15;

                                    /* "src/helpers/helpers.pyx":1488
 *                     # loop over surrounding molecules
 *                     for k in range(nsurr):
 *                         if hbond[i] == 0:             # <<<<<<<<<<<<<<
 *                             # loop over oxygen atoms
 *                             for l in range(sites_per_res):
 */
                                    __pyx_t_10 = __pyx_v_i;
                                    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_hbond.shape[0];
                                    __pyx_t_11 = (((*((char *) ( /* dim=0 */ (__pyx_v_hbond.data + __pyx_t_10 * __pyx_v_hbond.strides[0]) ))) == 0) != 0);
                                    if (__pyx_t_11) {

                                      /* "src/helpers/helpers.pyx":1490
 *                         if hbond[i] == 0:
 *                             # loop over oxygen atoms
 *                             for l in range(sites_per_res):             # <<<<<<<<<<<<<<
 *                                 idx2 = k*sites_per_res+l
 *                                 dx = coor_surr[idx2,0] - coor_oh2[idx,0]
 */
                                      __pyx_t_16 = __pyx_v_sites_per_res;
                                      __pyx_t_17 = __pyx_t_16;
                                      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
                                        __pyx_v_l = __pyx_t_18;

                                        /* "src/helpers/helpers.pyx":1491
 *                             # loop over oxygen atoms
 *                             for l in range(sites_per_res):
 *                                 idx2 = k*sites_per_res+l             # <<<<<<<<<<<<<<
 *                                 dx = coor_surr[idx2,0] - coor_oh2[idx,0]
 *                                 dy = coor_surr[idx2,1] - coor_oh2[idx,1]
 */
                                        __pyx_v_idx2 = ((__pyx_v_k * __pyx_v_sites_per_res) + __pyx_v_l);

                                        /* "src/helpers/helpers.pyx":1492
 *                             for l in range(sites_per_res):
 *                                 idx2 = k*sites_per_res+l
 *                                 dx = coor_surr[idx2,0] - coor_oh2[idx,0]             # <<<<<<<<<<<<<<
 *                                 dy = coor_surr[idx2,1] - coor_oh2[idx,1]
 *                                 dz = coor_surr[idx2,2] - coor_oh2[idx,2]
 */
                                        __pyx_t_10 = __pyx_v_idx2;
                                        __pyx_t_19 = 0;
                                        if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor_surr.shape[0];
                                        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor_surr.shape[1];
                                        __pyx_t_20 = __pyx_v_idx;
                                        __pyx_t_21 = 0;
                                        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor_oh2.shape[0];
                                        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_coor_oh2.shape[1];
                                        __pyx_v_dx = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_surr.data + __pyx_t_10 * __pyx_v_coor_surr.strides[0]) ) + __pyx_t_19 * __pyx_v_coor_surr.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_oh2.data + __pyx_t_20 * __pyx_v_coor_oh2.strides[0]) ) + __pyx_t_21 * __pyx_v_coor_oh2.strides[1]) ))));

                                        /* "src/helpers/helpers.pyx":1493
 *                                 idx2 = k*sites_per_res+l
 *                                 dx = coor_surr[idx2,0] - coor_oh2[idx,0]
 *                                 dy = coor_surr[idx2,1] - coor_oh2[idx,1]             # <<<<<<<<<<<<<<
 *                                 dz = coor_surr[idx2,2] - coor_oh2[idx,2]
 *                                 dot = dx*dx + dy*dy + dz*dz
 */
                                        __pyx_t_21 = __pyx_v_idx2;
                                        __pyx_t_20 = 1;
                                        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_coor_surr.shape[0];
                                        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor_surr.shape[1];
                                        __pyx_t_19 = __pyx_v_idx;
                                        __pyx_t_10 = 1;
                                        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor_oh2.shape[0];
                                        if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor_oh2.shape[1];
                                        __pyx_v_dy = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_surr.data + __pyx_t_21 * __pyx_v_coor_surr.strides[0]) ) + __pyx_t_20 * __pyx_v_coor_surr.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_oh2.data + __pyx_t_19 * __pyx_v_coor_oh2.strides[0]) ) + __pyx_t_10 * __pyx_v_coor_oh2.strides[1]) ))));

                                        /* "src/helpers/helpers.pyx":1494
 *                                 dx = coor_surr[idx2,0] - coor_oh2[idx,0]
 *                                 dy = coor_surr[idx2,1] - coor_oh2[idx,1]
 *                                 dz = coor_surr[idx2,2] - coor_oh2[idx,2]             # <<<<<<<<<<<<<<
 *                                 dot = dx*dx + dy*dy + dz*dz
 *                                 dist = sqrt(dot)
 */
                                        __pyx_t_10 = __pyx_v_idx2;
                                        __pyx_t_19 = 2;
                                        if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor_surr.shape[0];
                                        if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor_surr.shape[1];
                                        __pyx_t_20 = __pyx_v_idx;
                                        __pyx_t_21 = 2;
                                        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor_oh2.shape[0];
                                        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_coor_oh2.shape[1];
                                        __pyx_v_dz = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_surr.data + __pyx_t_10 * __pyx_v_coor_surr.strides[0]) ) + __pyx_t_19 * __pyx_v_coor_surr.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_oh2.data + __pyx_t_20 * __pyx_v_coor_oh2.strides[0]) ) + __pyx_t_21 * __pyx_v_coor_oh2.strides[1]) ))));

                                        /* "src/helpers/helpers.pyx":1495
 *                                 dy = coor_surr[idx2,1] - coor_oh2[idx,1]
 *                                 dz = coor_surr[idx2,2] - coor_oh2[idx,2]
 *                                 dot = dx*dx + dy*dy + dz*dz             # <<<<<<<<<<<<<<
 *                                 dist = sqrt(dot)
 *                                 if dist < maxdist:
 */
                                        __pyx_v_dot = (((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz));

                                        /* "src/helpers/helpers.pyx":1496
 *                                 dz = coor_surr[idx2,2] - coor_oh2[idx,2]
 *                                 dot = dx*dx + dy*dy + dz*dz
 *                                 dist = sqrt(dot)             # <<<<<<<<<<<<<<
 *                                 if dist < maxdist:
 *                                     dx2 = coor_oh2[idx3,0] - coor_oh2[idx,0]
 */
                                        __pyx_v_dist = sqrt(__pyx_v_dot);

                                        /* "src/helpers/helpers.pyx":1497
 *                                 dot = dx*dx + dy*dy + dz*dz
 *                                 dist = sqrt(dot)
 *                                 if dist < maxdist:             # <<<<<<<<<<<<<<
 *                                     dx2 = coor_oh2[idx3,0] - coor_oh2[idx,0]
 *                                     dy2 = coor_oh2[idx3,1] - coor_oh2[idx,1]
 */
                                        __pyx_t_11 = ((__pyx_v_dist < __pyx_v_maxdist) != 0);
                                        if (__pyx_t_11) {

                                          /* "src/helpers/helpers.pyx":1498
 *                                 dist = sqrt(dot)
 *                                 if dist < maxdist:
 *                                     dx2 = coor_oh2[idx3,0] - coor_oh2[idx,0]             # <<<<<<<<<<<<<<
 *                                     dy2 = coor_oh2[idx3,1] - coor_oh2[idx,1]
 *                                     dz2 = coor_oh2[idx3,2] - coor_oh2[idx,2]
 */
                                          __pyx_t_21 = __pyx_v_idx3;
                                          __pyx_t_20 = 0;
                                          if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_coor_oh2.shape[0];
                                          if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor_oh2.shape[1];
                                          __pyx_t_19 = __pyx_v_idx;
                                          __pyx_t_10 = 0;
                                          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor_oh2.shape[0];
                                          if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor_oh2.shape[1];
                                          __pyx_v_dx2 = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_oh2.data + __pyx_t_21 * __pyx_v_coor_oh2.strides[0]) ) + __pyx_t_20 * __pyx_v_coor_oh2.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_oh2.data + __pyx_t_19 * __pyx_v_coor_oh2.strides[0]) ) + __pyx_t_10 * __pyx_v_coor_oh2.strides[1]) ))));

                                          /* "src/helpers/helpers.pyx":1499
 *                                 if dist < maxdist:
 *                                     dx2 = coor_oh2[idx3,0] - coor_oh2[idx,0]
 *                                     dy2 = coor_oh2[idx3,1] - coor_oh2[idx,1]             # <<<<<<<<<<<<<<
 *                                     dz2 = coor_oh2[idx3,2] - coor_oh2[idx,2]
 *                                     dot2 = dx2*dx2 + dy2*dy2 + dz2*dz2
 */
                                          __pyx_t_10 = __pyx_v_idx3;
                                          __pyx_t_19 = 1;
                                          if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor_oh2.shape[0];
                                          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor_oh2.shape[1];
                                          __pyx_t_20 = __pyx_v_idx;
                                          __pyx_t_21 = 1;
                                          if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor_oh2.shape[0];
                                          if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_coor_oh2.shape[1];
                                          __pyx_v_dy2 = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_oh2.data + __pyx_t_10 * __pyx_v_coor_oh2.strides[0]) ) + __pyx_t_19 * __pyx_v_coor_oh2.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_oh2.data + __pyx_t_20 * __pyx_v_coor_oh2.strides[0]) ) + __pyx_t_21 * __pyx_v_coor_oh2.strides[1]) ))));

                                          /* "src/helpers/helpers.pyx":1500
 *                                     dx2 = coor_oh2[idx3,0] - coor_oh2[idx,0]
 *                                     dy2 = coor_oh2[idx3,1] - coor_oh2[idx,1]
 *                                     dz2 = coor_oh2[idx3,2] - coor_oh2[idx,2]             # <<<<<<<<<<<<<<
 *                                     dot2 = dx2*dx2 + dy2*dy2 + dz2*dz2
 *                                     dist2 = sqrt(dot2)
 */
                                          __pyx_t_21 = __pyx_v_idx3;
                                          __pyx_t_20 = 2;
                                          if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_coor_oh2.shape[0];
                                          if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_coor_oh2.shape[1];
                                          __pyx_t_19 = __pyx_v_idx;
                                          __pyx_t_10 = 2;
                                          if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_coor_oh2.shape[0];
                                          if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor_oh2.shape[1];
                                          __pyx_v_dz2 = ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_oh2.data + __pyx_t_21 * __pyx_v_coor_oh2.strides[0]) ) + __pyx_t_20 * __pyx_v_coor_oh2.strides[1]) ))) - (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor_oh2.data + __pyx_t_19 * __pyx_v_coor_oh2.strides[0]) ) + __pyx_t_10 * __pyx_v_coor_oh2.strides[1]) ))));

                                          /* "src/helpers/helpers.pyx":1501
 *                                     dy2 = coor_oh2[idx3,1] - coor_oh2[idx,1]
 *                                     dz2 = coor_oh2[idx3,2] - coor_oh2[idx,2]
 *                                     dot2 = dx2*dx2 + dy2*dy2 + dz2*dz2             # <<<<<<<<<<<<<<
 *                                     dist2 = sqrt(dot2)
 *                                     cosine = (dx * dx2 + dy * dy2 + dz * dz2) / (dist * dist2)
 */
                                          __pyx_v_dot2 = (((__pyx_v_dx2 * __pyx_v_dx2) + (__pyx_v_dy2 * __pyx_v_dy2)) + (__pyx_v_dz2 * __pyx_v_dz2));

                                          /* "src/helpers/helpers.pyx":1502
 *                                     dz2 = coor_oh2[idx3,2] - coor_oh2[idx,2]
 *                                     dot2 = dx2*dx2 + dy2*dy2 + dz2*dz2
 *                                     dist2 = sqrt(dot2)             # <<<<<<<<<<<<<<
 *                                     cosine = (dx * dx2 + dy * dy2 + dz * dz2) / (dist * dist2)
 *                                     if cosine < -0.95:
 */
                                          __pyx_v_dist2 = sqrt(__pyx_v_dot2);

                                          /* "src/helpers/helpers.pyx":1503
 *                                     dot2 = dx2*dx2 + dy2*dy2 + dz2*dz2
 *                                     dist2 = sqrt(dot2)
 *                                     cosine = (dx * dx2 + dy * dy2 + dz * dz2) / (dist * dist2)             # <<<<<<<<<<<<<<
 *                                     if cosine < -0.95:
 *                                         hbond[i] = 1
 */
                                          __pyx_t_22 = (((__pyx_v_dx * __pyx_v_dx2) + (__pyx_v_dy * __pyx_v_dy2)) + (__pyx_v_dz * __pyx_v_dz2));
                                          __pyx_t_23 = (__pyx_v_dist * __pyx_v_dist2);
                                          if (unlikely(__pyx_t_23 == 0)) {
                                            #ifdef WITH_THREAD
                                            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                            #endif
                                            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                            #ifdef WITH_THREAD
                                            __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                            #endif
                                            __PYX_ERR(0, 1503, __pyx_L8_error)
                                          }
                                          __pyx_v_cosine = (__pyx_t_22 / __pyx_t_23);

                                          /* "src/helpers/helpers.pyx":1504
 *                                     dist2 = sqrt(dot2)
 *                                     cosine = (dx * dx2 + dy * dy2 + dz * dz2) / (dist * dist2)
 *                                     if cosine < -0.95:             # <<<<<<<<<<<<<<
 *                                         hbond[i] = 1
 * 
 */
                                          __pyx_t_11 = ((__pyx_v_cosine < -0.95) != 0);
                                          if (__pyx_t_11) {

                                            /* "src/helpers/helpers.pyx":1505
 *                                     cosine = (dx * dx2 + dy * dy2 + dz * dz2) / (dist * dist2)
 *                                     if cosine < -0.95:
 *                                         hbond[i] = 1             # <<<<<<<<<<<<<<
 * 
 *     return np.asarray(hbond)
 */
                                            __pyx_t_10 = __pyx_v_i;
                                            if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_hbond.shape[0];
                                            *((char *) ( /* dim=0 */ (__pyx_v_hbond.data + __pyx_t_10 * __pyx_v_hbond.strides[0]) )) = 1;

                                            /* "src/helpers/helpers.pyx":1504
 *                                     dist2 = sqrt(dot2)
 *                                     cosine = (dx * dx2 + dy * dy2 + dz * dz2) / (dist * dist2)
 *                                     if cosine < -0.95:             # <<<<<<<<<<<<<<
 *                                         hbond[i] = 1
 * 
 */
                                          }

                                          /* "src/helpers/helpers.pyx":1497
 *                                 dot = dx*dx + dy*dy + dz*dz
 *                                 dist = sqrt(dot)
 *                                 if dist < maxdist:             # <<<<<<<<<<<<<<
 *                                     dx2 = coor_oh2[idx3,0] - coor_oh2[idx,0]
 *                                     dy2 = coor_oh2[idx3,1] - coor_oh2[idx,1]
 */
                                        }
                                      }

                                      /* "src/helpers/helpers.pyx":1488
 *                     # loop over surrounding molecules
 *                     for k in range(nsurr):
 *                         if hbond[i] == 0:             # <<<<<<<<<<<<<<
 *                             # loop over oxygen atoms
 *                             for l in range(sites_per_res):
 */
                                    }
                                  }

                                  /* "src/helpers/helpers.pyx":1483
 *             # loop over h atoms
 *             for j in range(2):
 *                 if hbond[i] == 0:             # <<<<<<<<<<<<<<
 *                     idx = i*3+1+j
 *                     idx3 = i*3
 */
                                }
                              }

                              /* "src/helpers/helpers.pyx":1480
 *     # loop over water molecules
 *     for i in prange(nwat, nogil=True):
 *         if hbond[i] == 0:             # <<<<<<<<<<<<<<
 *             # loop over h atoms
 *             for j in range(2):
 */
                            }
                            goto __pyx_L22;
                            __pyx_L8_error:;
                            {
                                #ifdef WITH_THREAD
                                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                #endif
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_exc_type)
                                #endif /* _OPENMP */
                                if (!__pyx_parallel_exc_type) {
                                  __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                  __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                  __Pyx_GOTREF(__pyx_parallel_exc_type);
                                }
                                #ifdef WITH_THREAD
                                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                #endif
                            }
                            __pyx_parallel_why = 4;
                            goto __pyx_L21;
                            __pyx_L21:;
                            #ifdef _OPENMP
                            #pragma omp critical(__pyx_parallel_lastprivates4)
                            #endif /* _OPENMP */
                            {
                                __pyx_parallel_temp0 = __pyx_v_cosine;
                                __pyx_parallel_temp1 = __pyx_v_dist;
                                __pyx_parallel_temp2 = __pyx_v_dist2;
                                __pyx_parallel_temp3 = __pyx_v_dot;
                                __pyx_parallel_temp4 = __pyx_v_dot2;
                                __pyx_parallel_temp5 = __pyx_v_dx;
                                __pyx_parallel_temp6 = __pyx_v_dx2;
                                __pyx_parallel_temp7 = __pyx_v_dy;
                                __pyx_parallel_temp8 = __pyx_v_dy2;
                                __pyx_parallel_temp9 = __pyx_v_dz;
                                __pyx_parallel_temp10 = __pyx_v_dz2;
                                __pyx_parallel_temp11 = __pyx_v_i;
                                __pyx_parallel_temp12 = __pyx_v_idx;
                                __pyx_parallel_temp13 = __pyx_v_idx2;
                                __pyx_parallel_temp14 = __pyx_v_idx3;
                                __pyx_parallel_temp15 = __pyx_v_j;
                                __pyx_parallel_temp16 = __pyx_v_k;
                                __pyx_parallel_temp17 = __pyx_v_l;
                            }
                            __pyx_L22:;
                            #ifdef _OPENMP
                            #pragma omp flush(__pyx_parallel_why)
                            #endif /* _OPENMP */
                        }
                    }
                    #ifdef _OPENMP
                    Py_END_ALLOW_THREADS
                    #else
{
#ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    #endif /* _OPENMP */
                    /* Clean up any temporaries */
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    #ifndef _OPENMP
}
#endif /* _OPENMP */
                }
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              __pyx_v_cosine = __pyx_parallel_temp0;
              __pyx_v_dist = __pyx_parallel_temp1;
              __pyx_v_dist2 = __pyx_parallel_temp2;
              __pyx_v_dot = __pyx_parallel_temp3;
              __pyx_v_dot2 = __pyx_parallel_temp4;
              __pyx_v_dx = __pyx_parallel_temp5;
              __pyx_v_dx2 = __pyx_parallel_temp6;
              __pyx_v_dy = __pyx_parallel_temp7;
              __pyx_v_dy2 = __pyx_parallel_temp8;
              __pyx_v_dz = __pyx_parallel_temp9;
              __pyx_v_dz2 = __pyx_parallel_temp10;
              __pyx_v_i = __pyx_parallel_temp11;
              __pyx_v_idx = __pyx_parallel_temp12;
              __pyx_v_idx2 = __pyx_parallel_temp13;
              __pyx_v_idx3 = __pyx_parallel_temp14;
              __pyx_v_j = __pyx_parallel_temp15;
              __pyx_v_k = __pyx_parallel_temp16;
              __pyx_v_l = __pyx_parallel_temp17;
              switch (__pyx_parallel_why) {
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L4_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":1479
 * 
 *     # loop over water molecules
 *     for i in prange(nwat, nogil=True):             # <<<<<<<<<<<<<<
 *         if hbond[i] == 0:
 *             # loop over h atoms
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":1507
 *                                         hbond[i] = 1
 * 
 *     return np.asarray(hbond)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_hbond, 1, (PyObject *(*)(char *)) __pyx_memview_get_char, (int (*)(char *, PyObject *)) __pyx_memview_set_char, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":1467
 * 
 * @cython.boundscheck(False)
 * def checkHBond(double [:,:] coor_surr, double [:,:] coor_oh2, int nres_surr, double maxdist):             # <<<<<<<<<<<<<<
 *     # this function is designed only for water hydrogen bonds!
 *     cdef int sites_per_res = coor_surr.shape[0] / nres_surr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("newanalysis.helpers.checkHBond", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_hbond, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor_surr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor_oh2, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1510
 * 
 * @cython.boundscheck(False)
 * def sphHarmMatrix(double [:,:] coor, np.complex128_t [:,:] y_mat, int lmax):             # <<<<<<<<<<<<<<
 *     cdef double r, pol, azi
 *     cdef int nat = coor.shape[0], i, l1, m1, m1r, l2, m2, m2r
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_71sphHarmMatrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_71sphHarmMatrix = {"sphHarmMatrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_71sphHarmMatrix, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_71sphHarmMatrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_y_mat = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_lmax;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sphHarmMatrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_y_mat,&__pyx_n_s_lmax,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y_mat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sphHarmMatrix", 1, 3, 3, 1); __PYX_ERR(0, 1510, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sphHarmMatrix", 1, 3, 3, 2); __PYX_ERR(0, 1510, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sphHarmMatrix") < 0)) __PYX_ERR(0, 1510, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 1510, __pyx_L3_error)
    __pyx_v_y_mat = __Pyx_PyObject_to_MemoryviewSlice_dsds___pyx_t_double_complex(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_y_mat.memview)) __PYX_ERR(0, 1510, __pyx_L3_error)
    __pyx_v_lmax = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_lmax == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1510, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sphHarmMatrix", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1510, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.sphHarmMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_70sphHarmMatrix(__pyx_self, __pyx_v_coor, __pyx_v_y_mat, __pyx_v_lmax);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_70sphHarmMatrix(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_y_mat, int __pyx_v_lmax) {
  double __pyx_v_r;
  double __pyx_v_pol;
  double __pyx_v_azi;
  int __pyx_v_nat;
  int __pyx_v_i;
  int __pyx_v_l1;
  int __pyx_v_m1;
  int __pyx_v_m1r;
  int __pyx_v_l2;
  int __pyx_v_m2;
  int __pyx_v_m2r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  double __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  long __pyx_t_27;
  int __pyx_t_28;
  long __pyx_t_29;
  long __pyx_t_30;
  int __pyx_t_31;
  long __pyx_t_32;
  long __pyx_t_33;
  int __pyx_t_34;
  PyObject *__pyx_t_35 = NULL;
  int __pyx_t_36;
  PyObject *__pyx_t_37 = NULL;
  PyObject *__pyx_t_38 = NULL;
  PyObject *__pyx_t_39 = NULL;
  PyObject *__pyx_t_40 = NULL;
  __pyx_t_double_complex __pyx_t_41;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sphHarmMatrix", 0);

  /* "src/helpers/helpers.pyx":1512
 * def sphHarmMatrix(double [:,:] coor, np.complex128_t [:,:] y_mat, int lmax):
 *     cdef double r, pol, azi
 *     cdef int nat = coor.shape[0], i, l1, m1, m1r, l2, m2, m2r             # <<<<<<<<<<<<<<
 * 
 *     for i in range(nat):
 */
  __pyx_v_nat = (__pyx_v_coor.shape[0]);

  /* "src/helpers/helpers.pyx":1514
 *     cdef int nat = coor.shape[0], i, l1, m1, m1r, l2, m2, m2r
 * 
 *     for i in range(nat):             # <<<<<<<<<<<<<<
 *         r = sqrt(coor[i,0]*coor[i,0] + coor[i,1]*coor[i,1] + coor[i,2]*coor[i,2])
 *         pol = np.arccos(coor[i,2] / r)
 */
  __pyx_t_1 = __pyx_v_nat;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "src/helpers/helpers.pyx":1515
 * 
 *     for i in range(nat):
 *         r = sqrt(coor[i,0]*coor[i,0] + coor[i,1]*coor[i,1] + coor[i,2]*coor[i,2])             # <<<<<<<<<<<<<<
 *         pol = np.arccos(coor[i,2] / r)
 *         azi = np.arctan2(coor[i,1] , coor[i,0])
 */
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = 0;
    if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[0];
    if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_coor.shape[1];
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_7 = 0;
    if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_coor.shape[0];
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_coor.shape[1];
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = 1;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor.shape[0];
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[1];
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = 1;
    if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor.shape[0];
    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[1];
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 2;
    if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coor.shape[0];
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coor.shape[1];
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_15 = 2;
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[0];
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[1];
    __pyx_v_r = sqrt(((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_4 * __pyx_v_coor.strides[0]) ) + __pyx_t_5 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_6 * __pyx_v_coor.strides[0]) ) + __pyx_t_7 * __pyx_v_coor.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_8 * __pyx_v_coor.strides[0]) ) + __pyx_t_9 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_10 * __pyx_v_coor.strides[0]) ) + __pyx_t_11 * __pyx_v_coor.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_12 * __pyx_v_coor.strides[0]) ) + __pyx_t_13 * __pyx_v_coor.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_14 * __pyx_v_coor.strides[0]) ) + __pyx_t_15 * __pyx_v_coor.strides[1]) ))))));

    /* "src/helpers/helpers.pyx":1516
 *     for i in range(nat):
 *         r = sqrt(coor[i,0]*coor[i,0] + coor[i,1]*coor[i,1] + coor[i,2]*coor[i,2])
 *         pol = np.arccos(coor[i,2] / r)             # <<<<<<<<<<<<<<
 *         azi = np.arctan2(coor[i,1] , coor[i,0])
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_np); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_arccos); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_15 = __pyx_v_i;
    __pyx_t_14 = 2;
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[0];
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[1];
    __pyx_t_19 = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_15 * __pyx_v_coor.strides[0]) ) + __pyx_t_14 * __pyx_v_coor.strides[1]) )));
    if (unlikely(__pyx_v_r == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1516, __pyx_L1_error)
    }
    __pyx_t_17 = PyFloat_FromDouble((__pyx_t_19 / __pyx_v_r)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_20 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_20)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_20);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
      }
    }
    __pyx_t_16 = (__pyx_t_20) ? __Pyx_PyObject_Call2Args(__pyx_t_18, __pyx_t_20, __pyx_t_17) : __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_t_17);
    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_19 = __pyx_PyFloat_AsDouble(__pyx_t_16); if (unlikely((__pyx_t_19 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1516, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_pol = __pyx_t_19;

    /* "src/helpers/helpers.pyx":1517
 *         r = sqrt(coor[i,0]*coor[i,0] + coor[i,1]*coor[i,1] + coor[i,2]*coor[i,2])
 *         pol = np.arccos(coor[i,2] / r)
 *         azi = np.arctan2(coor[i,1] , coor[i,0])             # <<<<<<<<<<<<<<
 * 
 *         for l1 in range(lmax+1):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_np); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_arctan2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_15 = 1;
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[0];
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[1];
    __pyx_t_18 = PyFloat_FromDouble((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_14 * __pyx_v_coor.strides[0]) ) + __pyx_t_15 * __pyx_v_coor.strides[1]) )))); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_15 = __pyx_v_i;
    __pyx_t_14 = 0;
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[0];
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[1];
    __pyx_t_20 = PyFloat_FromDouble((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_15 * __pyx_v_coor.strides[0]) ) + __pyx_t_14 * __pyx_v_coor.strides[1]) )))); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_21 = NULL;
    __pyx_t_22 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_21)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_21);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_22 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[3] = {__pyx_t_21, __pyx_t_18, __pyx_t_20};
      __pyx_t_16 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_22, 2+__pyx_t_22); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1517, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[3] = {__pyx_t_21, __pyx_t_18, __pyx_t_20};
      __pyx_t_16 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_22, 2+__pyx_t_22); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1517, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    } else
    #endif
    {
      __pyx_t_23 = PyTuple_New(2+__pyx_t_22); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 1517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      if (__pyx_t_21) {
        __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_21); __pyx_t_21 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_23, 0+__pyx_t_22, __pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_20);
      PyTuple_SET_ITEM(__pyx_t_23, 1+__pyx_t_22, __pyx_t_20);
      __pyx_t_18 = 0;
      __pyx_t_20 = 0;
      __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_23, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_19 = __pyx_PyFloat_AsDouble(__pyx_t_16); if (unlikely((__pyx_t_19 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_azi = __pyx_t_19;

    /* "src/helpers/helpers.pyx":1519
 *         azi = np.arctan2(coor[i,1] , coor[i,0])
 * 
 *         for l1 in range(lmax+1):             # <<<<<<<<<<<<<<
 *             for m1 in range(2*l1+1):
 *                 m1r = m1 - l1
 */
    __pyx_t_24 = (__pyx_v_lmax + 1);
    __pyx_t_25 = __pyx_t_24;
    for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_25; __pyx_t_22+=1) {
      __pyx_v_l1 = __pyx_t_22;

      /* "src/helpers/helpers.pyx":1520
 * 
 *         for l1 in range(lmax+1):
 *             for m1 in range(2*l1+1):             # <<<<<<<<<<<<<<
 *                 m1r = m1 - l1
 *                 for l2 in range(lmax+1):
 */
      __pyx_t_26 = ((2 * __pyx_v_l1) + 1);
      __pyx_t_27 = __pyx_t_26;
      for (__pyx_t_28 = 0; __pyx_t_28 < __pyx_t_27; __pyx_t_28+=1) {
        __pyx_v_m1 = __pyx_t_28;

        /* "src/helpers/helpers.pyx":1521
 *         for l1 in range(lmax+1):
 *             for m1 in range(2*l1+1):
 *                 m1r = m1 - l1             # <<<<<<<<<<<<<<
 *                 for l2 in range(lmax+1):
 *                     for m2 in range(2*l2+1):
 */
        __pyx_v_m1r = (__pyx_v_m1 - __pyx_v_l1);

        /* "src/helpers/helpers.pyx":1522
 *             for m1 in range(2*l1+1):
 *                 m1r = m1 - l1
 *                 for l2 in range(lmax+1):             # <<<<<<<<<<<<<<
 *                     for m2 in range(2*l2+1):
 *                         m2r = m2 - l2
 */
        __pyx_t_29 = (__pyx_v_lmax + 1);
        __pyx_t_30 = __pyx_t_29;
        for (__pyx_t_31 = 0; __pyx_t_31 < __pyx_t_30; __pyx_t_31+=1) {
          __pyx_v_l2 = __pyx_t_31;

          /* "src/helpers/helpers.pyx":1523
 *                 m1r = m1 - l1
 *                 for l2 in range(lmax+1):
 *                     for m2 in range(2*l2+1):             # <<<<<<<<<<<<<<
 *                         m2r = m2 - l2
 *                         y_mat[2*l1+m1,2*l2+m2] += sph_harm(m1r,l1,azi,pol) * np.conjugate(sph_harm(m2r,l2,azi,pol))
 */
          __pyx_t_32 = ((2 * __pyx_v_l2) + 1);
          __pyx_t_33 = __pyx_t_32;
          for (__pyx_t_34 = 0; __pyx_t_34 < __pyx_t_33; __pyx_t_34+=1) {
            __pyx_v_m2 = __pyx_t_34;

            /* "src/helpers/helpers.pyx":1524
 *                 for l2 in range(lmax+1):
 *                     for m2 in range(2*l2+1):
 *                         m2r = m2 - l2             # <<<<<<<<<<<<<<
 *                         y_mat[2*l1+m1,2*l2+m2] += sph_harm(m1r,l1,azi,pol) * np.conjugate(sph_harm(m2r,l2,azi,pol))
 * 
 */
            __pyx_v_m2r = (__pyx_v_m2 - __pyx_v_l2);

            /* "src/helpers/helpers.pyx":1525
 *                     for m2 in range(2*l2+1):
 *                         m2r = m2 - l2
 *                         y_mat[2*l1+m1,2*l2+m2] += sph_harm(m1r,l1,azi,pol) * np.conjugate(sph_harm(m2r,l2,azi,pol))             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_sph_harm); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_23 = __Pyx_PyInt_From_int(__pyx_v_m1r); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_23);
            __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_l1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_18 = PyFloat_FromDouble(__pyx_v_azi); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_21 = PyFloat_FromDouble(__pyx_v_pol); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __pyx_t_35 = NULL;
            __pyx_t_36 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
              __pyx_t_35 = PyMethod_GET_SELF(__pyx_t_17);
              if (likely(__pyx_t_35)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                __Pyx_INCREF(__pyx_t_35);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_17, function);
                __pyx_t_36 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[5] = {__pyx_t_35, __pyx_t_23, __pyx_t_20, __pyx_t_18, __pyx_t_21};
              __pyx_t_16 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_36, 4+__pyx_t_36); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1525, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_35); __pyx_t_35 = 0;
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[5] = {__pyx_t_35, __pyx_t_23, __pyx_t_20, __pyx_t_18, __pyx_t_21};
              __pyx_t_16 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_36, 4+__pyx_t_36); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1525, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_35); __pyx_t_35 = 0;
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            } else
            #endif
            {
              __pyx_t_37 = PyTuple_New(4+__pyx_t_36); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1525, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_37);
              if (__pyx_t_35) {
                __Pyx_GIVEREF(__pyx_t_35); PyTuple_SET_ITEM(__pyx_t_37, 0, __pyx_t_35); __pyx_t_35 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_23);
              PyTuple_SET_ITEM(__pyx_t_37, 0+__pyx_t_36, __pyx_t_23);
              __Pyx_GIVEREF(__pyx_t_20);
              PyTuple_SET_ITEM(__pyx_t_37, 1+__pyx_t_36, __pyx_t_20);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_37, 2+__pyx_t_36, __pyx_t_18);
              __Pyx_GIVEREF(__pyx_t_21);
              PyTuple_SET_ITEM(__pyx_t_37, 3+__pyx_t_36, __pyx_t_21);
              __pyx_t_23 = 0;
              __pyx_t_20 = 0;
              __pyx_t_18 = 0;
              __pyx_t_21 = 0;
              __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_37, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1525, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_37, __pyx_n_s_np); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_37);
            __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_37, __pyx_n_s_conjugate); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_sph_harm); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_m2r); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_23 = __Pyx_PyInt_From_int(__pyx_v_l2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_23);
            __pyx_t_35 = PyFloat_FromDouble(__pyx_v_azi); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_35);
            __pyx_t_38 = PyFloat_FromDouble(__pyx_v_pol); if (unlikely(!__pyx_t_38)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_38);
            __pyx_t_39 = NULL;
            __pyx_t_36 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
              __pyx_t_39 = PyMethod_GET_SELF(__pyx_t_18);
              if (likely(__pyx_t_39)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                __Pyx_INCREF(__pyx_t_39);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_18, function);
                __pyx_t_36 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_18)) {
              PyObject *__pyx_temp[5] = {__pyx_t_39, __pyx_t_20, __pyx_t_23, __pyx_t_35, __pyx_t_38};
              __pyx_t_37 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_36, 4+__pyx_t_36); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1525, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_39); __pyx_t_39 = 0;
              __Pyx_GOTREF(__pyx_t_37);
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
              __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
              PyObject *__pyx_temp[5] = {__pyx_t_39, __pyx_t_20, __pyx_t_23, __pyx_t_35, __pyx_t_38};
              __pyx_t_37 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_36, 4+__pyx_t_36); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1525, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_39); __pyx_t_39 = 0;
              __Pyx_GOTREF(__pyx_t_37);
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
              __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
            } else
            #endif
            {
              __pyx_t_40 = PyTuple_New(4+__pyx_t_36); if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 1525, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_40);
              if (__pyx_t_39) {
                __Pyx_GIVEREF(__pyx_t_39); PyTuple_SET_ITEM(__pyx_t_40, 0, __pyx_t_39); __pyx_t_39 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_20);
              PyTuple_SET_ITEM(__pyx_t_40, 0+__pyx_t_36, __pyx_t_20);
              __Pyx_GIVEREF(__pyx_t_23);
              PyTuple_SET_ITEM(__pyx_t_40, 1+__pyx_t_36, __pyx_t_23);
              __Pyx_GIVEREF(__pyx_t_35);
              PyTuple_SET_ITEM(__pyx_t_40, 2+__pyx_t_36, __pyx_t_35);
              __Pyx_GIVEREF(__pyx_t_38);
              PyTuple_SET_ITEM(__pyx_t_40, 3+__pyx_t_36, __pyx_t_38);
              __pyx_t_20 = 0;
              __pyx_t_23 = 0;
              __pyx_t_35 = 0;
              __pyx_t_38 = 0;
              __pyx_t_37 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_40, NULL); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1525, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_37);
              __Pyx_DECREF(__pyx_t_40); __pyx_t_40 = 0;
            }
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __pyx_t_18 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_21))) {
              __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_21);
              if (likely(__pyx_t_18)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
                __Pyx_INCREF(__pyx_t_18);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_21, function);
              }
            }
            __pyx_t_17 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_21, __pyx_t_18, __pyx_t_37) : __Pyx_PyObject_CallOneArg(__pyx_t_21, __pyx_t_37);
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            __pyx_t_21 = PyNumber_Multiply(__pyx_t_16, __pyx_t_17); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_t_41 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_21); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1525, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            __pyx_t_14 = ((2 * __pyx_v_l1) + __pyx_v_m1);
            __pyx_t_15 = ((2 * __pyx_v_l2) + __pyx_v_m2);
            if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_y_mat.shape[0];
            if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_y_mat.shape[1];
            *((__pyx_t_double_complex *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_y_mat.data + __pyx_t_14 * __pyx_v_y_mat.strides[0]) ) + __pyx_t_15 * __pyx_v_y_mat.strides[1]) )) += __pyx_t_41;
          }
        }
      }
    }
  }

  /* "src/helpers/helpers.pyx":1510
 * 
 * @cython.boundscheck(False)
 * def sphHarmMatrix(double [:,:] coor, np.complex128_t [:,:] y_mat, int lmax):             # <<<<<<<<<<<<<<
 *     cdef double r, pol, azi
 *     cdef int nat = coor.shape[0], i, l1, m1, m1r, l2, m2, m2r
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_35);
  __Pyx_XDECREF(__pyx_t_37);
  __Pyx_XDECREF(__pyx_t_38);
  __Pyx_XDECREF(__pyx_t_39);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_AddTraceback("newanalysis.helpers.sphHarmMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_y_mat, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1528
 * 
 * @cython.boundscheck(False)
 * def calcFourierLaplaceTransform(double [:] data_x, double [:] data_y, double w):             # <<<<<<<<<<<<<<
 *     cdef double wt, wt1
 *     cdef double dt = data_x[1] - data_x[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_73calcFourierLaplaceTransform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_73calcFourierLaplaceTransform = {"calcFourierLaplaceTransform", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_73calcFourierLaplaceTransform, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11newanalysis_7helpers_73calcFourierLaplaceTransform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_data_x = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_data_y = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_w;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcFourierLaplaceTransform (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data_x,&__pyx_n_s_data_y,&__pyx_n_s_w,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcFourierLaplaceTransform", 1, 3, 3, 1); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcFourierLaplaceTransform", 1, 3, 3, 2); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcFourierLaplaceTransform") < 0)) __PYX_ERR(0, 1528, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_data_x = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_data_x.memview)) __PYX_ERR(0, 1528, __pyx_L3_error)
    __pyx_v_data_y = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_data_y.memview)) __PYX_ERR(0, 1528, __pyx_L3_error)
    __pyx_v_w = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_w == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1528, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcFourierLaplaceTransform", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1528, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcFourierLaplaceTransform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_72calcFourierLaplaceTransform(__pyx_self, __pyx_v_data_x, __pyx_v_data_y, __pyx_v_w);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_72calcFourierLaplaceTransform(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_data_x, __Pyx_memviewslice __pyx_v_data_y, double __pyx_v_w) {
  double __pyx_v_wt;
  double __pyx_v_wt1;
  double __pyx_v_dt;
  double __pyx_v_laplace_re;
  double __pyx_v_laplace_im;
  int __pyx_v_i;
  int __pyx_v_n;
  __Pyx_memviewslice __pyx_v_transform = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcFourierLaplaceTransform", 0);

  /* "src/helpers/helpers.pyx":1530
 * def calcFourierLaplaceTransform(double [:] data_x, double [:] data_y, double w):
 *     cdef double wt, wt1
 *     cdef double dt = data_x[1] - data_x[0]             # <<<<<<<<<<<<<<
 *     cdef double laplace_re = 0.0
 *     cdef double laplace_im = 0.0
 */
  __pyx_t_1 = 1;
  if (__pyx_t_1 < 0) __pyx_t_1 += __pyx_v_data_x.shape[0];
  __pyx_t_2 = 0;
  if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_v_data_x.shape[0];
  __pyx_v_dt = ((*((double *) ( /* dim=0 */ (__pyx_v_data_x.data + __pyx_t_1 * __pyx_v_data_x.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_data_x.data + __pyx_t_2 * __pyx_v_data_x.strides[0]) ))));

  /* "src/helpers/helpers.pyx":1531
 *     cdef double wt, wt1
 *     cdef double dt = data_x[1] - data_x[0]
 *     cdef double laplace_re = 0.0             # <<<<<<<<<<<<<<
 *     cdef double laplace_im = 0.0
 *     cdef int i
 */
  __pyx_v_laplace_re = 0.0;

  /* "src/helpers/helpers.pyx":1532
 *     cdef double dt = data_x[1] - data_x[0]
 *     cdef double laplace_re = 0.0
 *     cdef double laplace_im = 0.0             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int n = data_x.shape[0]-1
 */
  __pyx_v_laplace_im = 0.0;

  /* "src/helpers/helpers.pyx":1534
 *     cdef double laplace_im = 0.0
 *     cdef int i
 *     cdef int n = data_x.shape[0]-1             # <<<<<<<<<<<<<<
 *     cdef double [:,:] transform = np.zeros((n,2))
 * 
 */
  __pyx_v_n = ((__pyx_v_data_x.shape[0]) - 1);

  /* "src/helpers/helpers.pyx":1535
 *     cdef int i
 *     cdef int n = data_x.shape[0]-1
 *     cdef double [:,:] transform = np.zeros((n,2))             # <<<<<<<<<<<<<<
 * 
 *     for i in prange(n, nogil=True):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_2);
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_transform = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "src/helpers/helpers.pyx":1537
 *     cdef double [:,:] transform = np.zeros((n,2))
 * 
 *     for i in prange(n, nogil=True):             # <<<<<<<<<<<<<<
 *         wt = w*data_x[i]
 *         wt1 = w*data_x[i+1]
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_8 = __pyx_v_n;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_10 = (__pyx_t_8 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_10 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_1, __pyx_t_11, __pyx_t_12, __pyx_t_2)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_wt) lastprivate(__pyx_v_wt1)
                    #endif /* _OPENMP */
                    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_10; __pyx_t_9++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_9);
                            /* Initialize private variables to invalid values */
                            __pyx_v_wt = ((double)__PYX_NAN());
                            __pyx_v_wt1 = ((double)__PYX_NAN());

                            /* "src/helpers/helpers.pyx":1538
 * 
 *     for i in prange(n, nogil=True):
 *         wt = w*data_x[i]             # <<<<<<<<<<<<<<
 *         wt1 = w*data_x[i+1]
 * 
 */
                            __pyx_t_2 = __pyx_v_i;
                            if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_v_data_x.shape[0];
                            __pyx_v_wt = (__pyx_v_w * (*((double *) ( /* dim=0 */ (__pyx_v_data_x.data + __pyx_t_2 * __pyx_v_data_x.strides[0]) ))));

                            /* "src/helpers/helpers.pyx":1539
 *     for i in prange(n, nogil=True):
 *         wt = w*data_x[i]
 *         wt1 = w*data_x[i+1]             # <<<<<<<<<<<<<<
 * 
 *         transform[i,0] = (cos(wt)*data_y[i] + cos(wt1)*data_y[i+1])*0.5*dt
 */
                            __pyx_t_2 = (__pyx_v_i + 1);
                            if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_v_data_x.shape[0];
                            __pyx_v_wt1 = (__pyx_v_w * (*((double *) ( /* dim=0 */ (__pyx_v_data_x.data + __pyx_t_2 * __pyx_v_data_x.strides[0]) ))));

                            /* "src/helpers/helpers.pyx":1541
 *         wt1 = w*data_x[i+1]
 * 
 *         transform[i,0] = (cos(wt)*data_y[i] + cos(wt1)*data_y[i+1])*0.5*dt             # <<<<<<<<<<<<<<
 *         transform[i,1] = (sin(wt)*data_y[i] + sin(wt1)*data_y[i+1])*0.5*dt
 * 
 */
                            __pyx_t_2 = __pyx_v_i;
                            if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_v_data_y.shape[0];
                            __pyx_t_1 = (__pyx_v_i + 1);
                            if (__pyx_t_1 < 0) __pyx_t_1 += __pyx_v_data_y.shape[0];
                            __pyx_t_11 = __pyx_v_i;
                            __pyx_t_12 = 0;
                            if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_transform.shape[0];
                            if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_transform.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_transform.data + __pyx_t_11 * __pyx_v_transform.strides[0]) ) + __pyx_t_12 * __pyx_v_transform.strides[1]) )) = ((((cos(__pyx_v_wt) * (*((double *) ( /* dim=0 */ (__pyx_v_data_y.data + __pyx_t_2 * __pyx_v_data_y.strides[0]) )))) + (cos(__pyx_v_wt1) * (*((double *) ( /* dim=0 */ (__pyx_v_data_y.data + __pyx_t_1 * __pyx_v_data_y.strides[0]) ))))) * 0.5) * __pyx_v_dt);

                            /* "src/helpers/helpers.pyx":1542
 * 
 *         transform[i,0] = (cos(wt)*data_y[i] + cos(wt1)*data_y[i+1])*0.5*dt
 *         transform[i,1] = (sin(wt)*data_y[i] + sin(wt1)*data_y[i+1])*0.5*dt             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n):
 */
                            __pyx_t_1 = __pyx_v_i;
                            if (__pyx_t_1 < 0) __pyx_t_1 += __pyx_v_data_y.shape[0];
                            __pyx_t_2 = (__pyx_v_i + 1);
                            if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_v_data_y.shape[0];
                            __pyx_t_12 = __pyx_v_i;
                            __pyx_t_11 = 1;
                            if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_transform.shape[0];
                            if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_transform.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_transform.data + __pyx_t_12 * __pyx_v_transform.strides[0]) ) + __pyx_t_11 * __pyx_v_transform.strides[1]) )) = ((((sin(__pyx_v_wt) * (*((double *) ( /* dim=0 */ (__pyx_v_data_y.data + __pyx_t_1 * __pyx_v_data_y.strides[0]) )))) + (sin(__pyx_v_wt1) * (*((double *) ( /* dim=0 */ (__pyx_v_data_y.data + __pyx_t_2 * __pyx_v_data_y.strides[0]) ))))) * 0.5) * __pyx_v_dt);
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":1537
 *     cdef double [:,:] transform = np.zeros((n,2))
 * 
 *     for i in prange(n, nogil=True):             # <<<<<<<<<<<<<<
 *         wt = w*data_x[i]
 *         wt1 = w*data_x[i+1]
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":1544
 *         transform[i,1] = (sin(wt)*data_y[i] + sin(wt1)*data_y[i+1])*0.5*dt
 * 
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         laplace_re += transform[i,0]
 *         laplace_im += transform[i,1]
 */
  __pyx_t_10 = __pyx_v_n;
  __pyx_t_9 = __pyx_t_10;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_9; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "src/helpers/helpers.pyx":1545
 * 
 *     for i in range(n):
 *         laplace_re += transform[i,0]             # <<<<<<<<<<<<<<
 *         laplace_im += transform[i,1]
 * 
 */
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_1 = 0;
    if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_v_transform.shape[0];
    if (__pyx_t_1 < 0) __pyx_t_1 += __pyx_v_transform.shape[1];
    __pyx_v_laplace_re = (__pyx_v_laplace_re + (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_transform.data + __pyx_t_2 * __pyx_v_transform.strides[0]) ) + __pyx_t_1 * __pyx_v_transform.strides[1]) ))));

    /* "src/helpers/helpers.pyx":1546
 *     for i in range(n):
 *         laplace_re += transform[i,0]
 *         laplace_im += transform[i,1]             # <<<<<<<<<<<<<<
 * 
 *     return float(laplace_re), float(laplace_im)
 */
    __pyx_t_1 = __pyx_v_i;
    __pyx_t_2 = 1;
    if (__pyx_t_1 < 0) __pyx_t_1 += __pyx_v_transform.shape[0];
    if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_v_transform.shape[1];
    __pyx_v_laplace_im = (__pyx_v_laplace_im + (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_transform.data + __pyx_t_1 * __pyx_v_transform.strides[0]) ) + __pyx_t_2 * __pyx_v_transform.strides[1]) ))));
  }

  /* "src/helpers/helpers.pyx":1548
 *         laplace_im += transform[i,1]
 * 
 *     return float(laplace_re), float(laplace_im)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_laplace_re); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_laplace_im); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":1528
 * 
 * @cython.boundscheck(False)
 * def calcFourierLaplaceTransform(double [:] data_x, double [:] data_y, double w):             # <<<<<<<<<<<<<<
 *     cdef double wt, wt1
 *     cdef double dt = data_x[1] - data_x[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_AddTraceback("newanalysis.helpers.calcFourierLaplaceTransform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_transform, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_data_x, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_data_y, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1551
 * 
 * @cython.boundscheck(False)
 * def calcRotationMatrix(double [:,:] coorA, double [:,:] coorB):             # <<<<<<<<<<<<<<
 *     """
 *     calcRotationMatrix(coor,coorA,coorB)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_75calcRotationMatrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_74calcRotationMatrix[] = "\n    calcRotationMatrix(coor,coorA,coorB)\n\n    Applies the Berthold-Horn-algorithm to a set of coordinates xyz, inplace.\n\n    Args:\n        coor               .. coordinates of all atoms\n        coorA              .. template coordinates\n        coorB              .. corresponding coordinates of the current frame\n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_75calcRotationMatrix = {"calcRotationMatrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_75calcRotationMatrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_74calcRotationMatrix};
static PyObject *__pyx_pw_11newanalysis_7helpers_75calcRotationMatrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coorA = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coorB = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcRotationMatrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coorA,&__pyx_n_s_coorB,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coorA)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coorB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcRotationMatrix", 1, 2, 2, 1); __PYX_ERR(0, 1551, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcRotationMatrix") < 0)) __PYX_ERR(0, 1551, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_coorA = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coorA.memview)) __PYX_ERR(0, 1551, __pyx_L3_error)
    __pyx_v_coorB = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coorB.memview)) __PYX_ERR(0, 1551, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcRotationMatrix", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1551, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.calcRotationMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_74calcRotationMatrix(__pyx_self, __pyx_v_coorA, __pyx_v_coorB);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_74calcRotationMatrix(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coorA, __Pyx_memviewslice __pyx_v_coorB) {
  __Pyx_memviewslice __pyx_v_R = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcRotationMatrix", 0);

  /* "src/helpers/helpers.pyx":1562
 *         coorB              .. corresponding coordinates of the current frame
 *     """
 *     cdef double [:,:] R = np.zeros((3,3))             # <<<<<<<<<<<<<<
 * 
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_tuple_) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_tuple_);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_R = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "src/helpers/helpers.pyx":1564
 *     cdef double [:,:] R = np.zeros((3,3))
 * 
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)             # <<<<<<<<<<<<<<
 * 
 *     return np.asarray(R)
 */
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_R.shape[0];
  if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_R.shape[1];
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_coorA.shape[0];
  if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coorA.shape[1];
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coorB.shape[0];
  if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coorB.shape[1];
  GetRotation((&(*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_5 * __pyx_v_R.strides[0]) ) + __pyx_t_6 * __pyx_v_R.strides[1]) )))), (__pyx_v_coorA.shape[0]), (&(*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coorA.data + __pyx_t_7 * __pyx_v_coorA.strides[0]) ) + __pyx_t_8 * __pyx_v_coorA.strides[1]) )))), (&(*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coorB.data + __pyx_t_9 * __pyx_v_coorB.strides[0]) ) + __pyx_t_10 * __pyx_v_coorB.strides[1]) )))), 0);

  /* "src/helpers/helpers.pyx":1566
 *     GetRotation(&R[0,0], coorA.shape[0], &coorA[0,0], &coorB[0,0], 0)
 * 
 *     return np.asarray(R)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_R, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_11, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/helpers/helpers.pyx":1551
 * 
 * @cython.boundscheck(False)
 * def calcRotationMatrix(double [:,:] coorA, double [:,:] coorB):             # <<<<<<<<<<<<<<
 *     """
 *     calcRotationMatrix(coor,coorA,coorB)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("newanalysis.helpers.calcRotationMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_R, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coorA, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coorB, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/helpers/helpers.pyx":1569
 * 
 * @cython.boundscheck(False)
 * def applyRotationMatrix(double [:,:] coor, double [:,:] R):             # <<<<<<<<<<<<<<
 *     """
 *     calcRotationMatrix(coor,coorA,coorB)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11newanalysis_7helpers_77applyRotationMatrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11newanalysis_7helpers_76applyRotationMatrix[] = "\n    calcRotationMatrix(coor,coorA,coorB)\n\n    Applies the Berthold-Horn-algorithm to a set of coordinates xyz, inplace.\n\n    Args:\n        coor               .. coordinates of all atoms\n        coorA              .. template coordinates\n        coorB              .. corresponding coordinates of the current frame\n    ";
static PyMethodDef __pyx_mdef_11newanalysis_7helpers_77applyRotationMatrix = {"applyRotationMatrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11newanalysis_7helpers_77applyRotationMatrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11newanalysis_7helpers_76applyRotationMatrix};
static PyObject *__pyx_pw_11newanalysis_7helpers_77applyRotationMatrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_coor = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_R = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applyRotationMatrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coor,&__pyx_n_s_R,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_R)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applyRotationMatrix", 1, 2, 2, 1); __PYX_ERR(0, 1569, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applyRotationMatrix") < 0)) __PYX_ERR(0, 1569, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_coor = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_coor.memview)) __PYX_ERR(0, 1569, __pyx_L3_error)
    __pyx_v_R = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_R.memview)) __PYX_ERR(0, 1569, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applyRotationMatrix", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1569, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("newanalysis.helpers.applyRotationMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11newanalysis_7helpers_76applyRotationMatrix(__pyx_self, __pyx_v_coor, __pyx_v_R);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11newanalysis_7helpers_76applyRotationMatrix(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_coor, __Pyx_memviewslice __pyx_v_R) {
  CYTHON_UNUSED int __pyx_v_N;
  double __pyx_v_tmpx;
  double __pyx_v_tmpy;
  double __pyx_v_tmpz;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  __Pyx_RefNannySetupContext("applyRotationMatrix", 0);

  /* "src/helpers/helpers.pyx":1580
 *         coorB              .. corresponding coordinates of the current frame
 *     """
 *     cdef int N = coor.shape[0]             # <<<<<<<<<<<<<<
 *     cdef double tmpx, tmpy, tmpz
 *     cdef int i
 */
  __pyx_v_N = (__pyx_v_coor.shape[0]);

  /* "src/helpers/helpers.pyx":1584
 *     cdef int i
 * 
 *     for i in prange(N, nogil=True):             # <<<<<<<<<<<<<<
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_1 = __pyx_v_N;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_3 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_tmpx) lastprivate(__pyx_v_tmpy) lastprivate(__pyx_v_tmpz)
                    #endif /* _OPENMP */
                    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_2);
                            /* Initialize private variables to invalid values */
                            __pyx_v_tmpx = ((double)__PYX_NAN());
                            __pyx_v_tmpy = ((double)__PYX_NAN());
                            __pyx_v_tmpz = ((double)__PYX_NAN());

                            /* "src/helpers/helpers.pyx":1585
 * 
 *     for i in prange(N, nogil=True):
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]             # <<<<<<<<<<<<<<
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 */
                            __pyx_t_4 = 0;
                            __pyx_t_5 = 0;
                            if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_R.shape[0];
                            if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_R.shape[1];
                            __pyx_t_6 = __pyx_v_i;
                            __pyx_t_7 = 0;
                            if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_coor.shape[0];
                            if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_coor.shape[1];
                            __pyx_t_8 = 0;
                            __pyx_t_9 = 1;
                            if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_R.shape[0];
                            if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_R.shape[1];
                            __pyx_t_10 = __pyx_v_i;
                            __pyx_t_11 = 1;
                            if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor.shape[0];
                            if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[1];
                            __pyx_t_12 = 0;
                            __pyx_t_13 = 2;
                            if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_R.shape[0];
                            if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_R.shape[1];
                            __pyx_t_14 = __pyx_v_i;
                            __pyx_t_15 = 2;
                            if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[0];
                            if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[1];
                            __pyx_v_tmpx = ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_4 * __pyx_v_R.strides[0]) ) + __pyx_t_5 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_6 * __pyx_v_coor.strides[0]) ) + __pyx_t_7 * __pyx_v_coor.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_8 * __pyx_v_R.strides[0]) ) + __pyx_t_9 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_10 * __pyx_v_coor.strides[0]) ) + __pyx_t_11 * __pyx_v_coor.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_12 * __pyx_v_R.strides[0]) ) + __pyx_t_13 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_14 * __pyx_v_coor.strides[0]) ) + __pyx_t_15 * __pyx_v_coor.strides[1]) )))));

                            /* "src/helpers/helpers.pyx":1586
 *     for i in prange(N, nogil=True):
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]             # <<<<<<<<<<<<<<
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 *         coor[i,0] = tmpx
 */
                            __pyx_t_15 = 1;
                            __pyx_t_14 = 0;
                            if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_R.shape[0];
                            if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_R.shape[1];
                            __pyx_t_13 = __pyx_v_i;
                            __pyx_t_12 = 0;
                            if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_coor.shape[0];
                            if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_coor.shape[1];
                            __pyx_t_11 = 1;
                            __pyx_t_10 = 1;
                            if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_R.shape[0];
                            if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_R.shape[1];
                            __pyx_t_9 = __pyx_v_i;
                            __pyx_t_8 = 1;
                            if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_coor.shape[0];
                            if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_coor.shape[1];
                            __pyx_t_7 = 1;
                            __pyx_t_6 = 2;
                            if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_R.shape[0];
                            if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_R.shape[1];
                            __pyx_t_5 = __pyx_v_i;
                            __pyx_t_4 = 2;
                            if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_coor.shape[0];
                            if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_coor.shape[1];
                            __pyx_v_tmpy = ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_15 * __pyx_v_R.strides[0]) ) + __pyx_t_14 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_13 * __pyx_v_coor.strides[0]) ) + __pyx_t_12 * __pyx_v_coor.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_11 * __pyx_v_R.strides[0]) ) + __pyx_t_10 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_9 * __pyx_v_coor.strides[0]) ) + __pyx_t_8 * __pyx_v_coor.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_7 * __pyx_v_R.strides[0]) ) + __pyx_t_6 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_5 * __pyx_v_coor.strides[0]) ) + __pyx_t_4 * __pyx_v_coor.strides[1]) )))));

                            /* "src/helpers/helpers.pyx":1587
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]             # <<<<<<<<<<<<<<
 *         coor[i,0] = tmpx
 *         coor[i,1] = tmpy
 */
                            __pyx_t_4 = 2;
                            __pyx_t_5 = 0;
                            if (__pyx_t_4 < 0) __pyx_t_4 += __pyx_v_R.shape[0];
                            if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_R.shape[1];
                            __pyx_t_6 = __pyx_v_i;
                            __pyx_t_7 = 0;
                            if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_v_coor.shape[0];
                            if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_coor.shape[1];
                            __pyx_t_8 = 2;
                            __pyx_t_9 = 1;
                            if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_R.shape[0];
                            if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_R.shape[1];
                            __pyx_t_10 = __pyx_v_i;
                            __pyx_t_11 = 1;
                            if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_coor.shape[0];
                            if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_coor.shape[1];
                            __pyx_t_12 = 2;
                            __pyx_t_13 = 2;
                            if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_R.shape[0];
                            if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_R.shape[1];
                            __pyx_t_14 = __pyx_v_i;
                            __pyx_t_15 = 2;
                            if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[0];
                            if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[1];
                            __pyx_v_tmpz = ((((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_4 * __pyx_v_R.strides[0]) ) + __pyx_t_5 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_6 * __pyx_v_coor.strides[0]) ) + __pyx_t_7 * __pyx_v_coor.strides[1]) )))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_8 * __pyx_v_R.strides[0]) ) + __pyx_t_9 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_10 * __pyx_v_coor.strides[0]) ) + __pyx_t_11 * __pyx_v_coor.strides[1]) ))))) + ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_R.data + __pyx_t_12 * __pyx_v_R.strides[0]) ) + __pyx_t_13 * __pyx_v_R.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_14 * __pyx_v_coor.strides[0]) ) + __pyx_t_15 * __pyx_v_coor.strides[1]) )))));

                            /* "src/helpers/helpers.pyx":1588
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 *         coor[i,0] = tmpx             # <<<<<<<<<<<<<<
 *         coor[i,1] = tmpy
 *         coor[i,2] = tmpz
 */
                            __pyx_t_15 = __pyx_v_i;
                            __pyx_t_14 = 0;
                            if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[0];
                            if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_15 * __pyx_v_coor.strides[0]) ) + __pyx_t_14 * __pyx_v_coor.strides[1]) )) = __pyx_v_tmpx;

                            /* "src/helpers/helpers.pyx":1589
 *         tmpz = R[2,0] * coor[i,0] + R[2,1] * coor[i,1] + R[2,2] * coor[i,2]
 *         coor[i,0] = tmpx
 *         coor[i,1] = tmpy             # <<<<<<<<<<<<<<
 *         coor[i,2] = tmpz
 */
                            __pyx_t_14 = __pyx_v_i;
                            __pyx_t_15 = 1;
                            if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[0];
                            if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_14 * __pyx_v_coor.strides[0]) ) + __pyx_t_15 * __pyx_v_coor.strides[1]) )) = __pyx_v_tmpy;

                            /* "src/helpers/helpers.pyx":1590
 *         coor[i,0] = tmpx
 *         coor[i,1] = tmpy
 *         coor[i,2] = tmpz             # <<<<<<<<<<<<<<
 */
                            __pyx_t_15 = __pyx_v_i;
                            __pyx_t_14 = 2;
                            if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_coor.shape[0];
                            if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_coor.shape[1];
                            *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_coor.data + __pyx_t_15 * __pyx_v_coor.strides[0]) ) + __pyx_t_14 * __pyx_v_coor.strides[1]) )) = __pyx_v_tmpz;
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "src/helpers/helpers.pyx":1584
 *     cdef int i
 * 
 *     for i in prange(N, nogil=True):             # <<<<<<<<<<<<<<
 *         tmpx = R[0,0] * coor[i,0] + R[0,1] * coor[i,1] + R[0,2] * coor[i,2]
 *         tmpy = R[1,0] * coor[i,0] + R[1,1] * coor[i,1] + R[1,2] * coor[i,2]
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "src/helpers/helpers.pyx":1569
 * 
 * @cython.boundscheck(False)
 * def applyRotationMatrix(double [:,:] coor, double [:,:] R):             # <<<<<<<<<<<<<<
 *     """
 *     calcRotationMatrix(coor,coorA,coorB)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coor, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_R, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":736
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":739
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":742
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":745
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":748
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":752
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":754
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":932
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":933
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":936
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":938
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":939
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":945
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 945, __pyx_L3_error)

      /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":946
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 946, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 947, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 947, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":951
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 951, __pyx_L3_error)

      /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":952
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 952, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 953, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 953, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":957
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 957, __pyx_L3_error)

      /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":958
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 958, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":959
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 959, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 959, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":981
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":996
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":1006
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":1013
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":1020
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(2, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(2, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 122, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 123, __pyx_L3_error)
    } else {

      /* "View.MemoryView":123
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(2, 122, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(2, 122, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":129
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 129, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(2, 129, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":130
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 133, __pyx_L1_error)

    /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 136, __pyx_L1_error)

    /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":139
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":140
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(2, 140, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":141
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(2, 141, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(2, 141, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":144
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":145
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 148, __pyx_L1_error)

    /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(2, 151, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":153
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(2, 153, __pyx_L1_error)

      /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":154
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 157, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":158
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":159
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 160, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":161
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":162
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":164
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(2, 164, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":166
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":169
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":170
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 170, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":174
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(2, 176, __pyx_L1_error)

      /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":179
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":180
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(2, 180, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(2, 180, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":181
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":182
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":186
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 187, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":188
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 189, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 192, __pyx_L1_error)

    /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":193
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":194
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":195
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":196
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":199
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":200
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":203
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":205
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":207
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":216
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":218
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":219
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":223
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":227
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":228
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":231
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":234
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":237
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":240
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(2, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":249
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":252
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(2, 252, __pyx_L1_error)

    /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":253
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":255
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":282
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":284
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":300
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":304
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":307
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":309
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(2, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 345, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 345, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":346
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":347
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":349
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 349, __pyx_L1_error)

    /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":351
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":352
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":356
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":357
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":359
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":361
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(2, 361, __pyx_L1_error)

      /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":364
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":366
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":368
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":370
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":374
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":377
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":378
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":385
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":388
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":387
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":389
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":391
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":395
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 397, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 397, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":398
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 398, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(2, 398, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":400
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":405
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":407
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 407, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 407, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 410, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":411
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":413
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(2, 413, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":414
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 418, __pyx_L1_error)

    /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":420
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 420, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 420, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 422, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":423
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 424, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":427
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(2, 427, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":429
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":435
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 435, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":436
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(2, 436, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":439
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(2, 445, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 445, __pyx_L1_error)

  /* "View.MemoryView":446
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(2, 446, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 446, __pyx_L1_error)

  /* "View.MemoryView":447
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 445, __pyx_L1_error)

  /* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":451
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":456
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 456, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":459
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":461
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(2, 461, __pyx_L1_error)

      /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":462
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":464
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":466
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":468
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":470
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 470, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":475
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 475, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":476
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":479
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":482
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(2, 482, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":483
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":488
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":491
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":493
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":498
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 498, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":499
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":494
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 494, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(2, 494, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 495, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 495, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":504
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":510
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 510, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":512
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(2, 514, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 520, __pyx_L1_error)

    /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":525
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":528
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":530
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":533
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":535
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":538
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":540
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":542
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":543
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":544
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":545
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":546
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":547
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":554
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(2, 554, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":555
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(2, 555, __pyx_L1_error)

  /* "View.MemoryView":556
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":560
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":564
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 570, __pyx_L1_error)

    /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":572
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__20, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":579
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(2, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":583
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":587
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":591
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":596
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":598
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":599
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":601
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":603
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":607
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":609
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":613
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":616
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":622
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 622, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":623
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 628, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":629
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":633
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":635
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":636
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 636, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":641
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":645
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":647
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":648
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 648, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":653
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":658
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":659
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":660
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":664
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":672
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":674
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":676
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":677
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":678
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 679, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 679, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(2, 682, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__2);
            __Pyx_GIVEREF(__pyx_slice__2);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__2);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 682, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":683
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":685
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__2); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 685, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":686
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":689
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(2, 689, __pyx_L1_error)

        /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":691
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":692
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 692, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":694
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 694, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":696
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__2);
        __Pyx_GIVEREF(__pyx_slice__2);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__2);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 696, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":698
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":701
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":711
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":718
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":722
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(2, 722, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":725
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 725, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":726
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":728
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":729
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":735
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":736
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":741
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":742
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 746, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 746, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":751
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 751, __pyx_L1_error)

      /* "View.MemoryView":748
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 748, __pyx_L1_error)

      /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":755
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":756
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":757
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":758
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":760
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 760, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 760, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":761
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 761, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 761, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":762
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":764
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":765
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":766
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 768, __pyx_L1_error)

      /* "View.MemoryView":774
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":778
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 778, __pyx_L1_error) }

    /* "View.MemoryView":779
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 779, __pyx_L1_error) }

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 777, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":783
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 782, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":830
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":832
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 832, __pyx_L1_error)

      /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":835
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 838, __pyx_L1_error)

      /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":843
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":845
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":848
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":850
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":855
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":859
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":861
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":863
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":866
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":868
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":871
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":875
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":878
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":884
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":885
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":886
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":890
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":892
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":897
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":899
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":900
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 899, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":902
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":904
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":912
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":913
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(2, 917, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(2, 917, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":918
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":920
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":921
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":923
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":926
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":928
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 928, __pyx_L1_error)

      /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":931
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 931, __pyx_L1_error)

    /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":933
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":935
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":937
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":944
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":946
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":947
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":951
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":952
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":953
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":954
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":957
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 957, __pyx_L1_error)

      /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":959
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":977
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":981
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":983
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":987
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(2, 987, __pyx_L1_error)

    /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":989
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":993
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 1056, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1111
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1113
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1121
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1122
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1124
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1126
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1127
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1129
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1131
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1132
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1135
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1137
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1147
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1148
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1154
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1155
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1157
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1158
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1159
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1160
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1162
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1163
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1167
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1168
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1173
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1179
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1181
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1182
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1184
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1197
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1198
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1199
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1201
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1202
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1203
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1205
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1219
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1220
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1222
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1224
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 1224, __pyx_L1_error)

    /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1227
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1228
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1229
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1230
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1231
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1233
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1237
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1239
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1242
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1244
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1246
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1254
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1253
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(2, 1253, __pyx_L1_error)

  /* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1258
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 1258, __pyx_L1_error)

  /* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1263
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 1263, __pyx_L1_error)

    /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1265
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(2, 1265, __pyx_L1_error)
  }

  /* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1276
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1277
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1279
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1280
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1281
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1285
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1289
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1291
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1294
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1295
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1297
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 1297, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 1300, __pyx_L1_error)

      /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1305
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1307
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(2, 1307, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1308
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1314
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1320
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1321
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1322
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1323
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1329
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(2, 1329, __pyx_L1_error)

    /* "View.MemoryView":1330
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(2, 1330, __pyx_L1_error)

    /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1332
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1333
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1334
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1337
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1344
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1346
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1347
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1348
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1349
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1351
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1352
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1353
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1354
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1367
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1374
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1381
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1384
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1386
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1388
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1389
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1391
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1400
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1401
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1403
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1411
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1412
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1415
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1416
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1417
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1419
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1420
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1422
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "newanalysis.helpers.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "newanalysis.helpers.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "newanalysis.helpers.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "newanalysis.helpers._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_helpers(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_helpers},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "helpers",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_B1, __pyx_k_B1, sizeof(__pyx_k_B1), 0, 0, 1, 1},
  {&__pyx_n_s_B2, __pyx_k_B2, sizeof(__pyx_k_B2), 0, 0, 1, 1},
  {&__pyx_n_s_B3, __pyx_k_B3, sizeof(__pyx_k_B3), 0, 0, 1, 1},
  {&__pyx_n_s_B_out, __pyx_k_B_out, sizeof(__pyx_k_B_out), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_Exx, __pyx_k_Exx, sizeof(__pyx_k_Exx), 0, 0, 1, 1},
  {&__pyx_n_s_Eyy, __pyx_k_Eyy, sizeof(__pyx_k_Eyy), 0, 0, 1, 1},
  {&__pyx_n_s_Ezz, __pyx_k_Ezz, sizeof(__pyx_k_Ezz), 0, 0, 1, 1},
  {&__pyx_n_s_H1x, __pyx_k_H1x, sizeof(__pyx_k_H1x), 0, 0, 1, 1},
  {&__pyx_n_s_H1y, __pyx_k_H1y, sizeof(__pyx_k_H1y), 0, 0, 1, 1},
  {&__pyx_n_s_H1z, __pyx_k_H1z, sizeof(__pyx_k_H1z), 0, 0, 1, 1},
  {&__pyx_n_s_H2x, __pyx_k_H2x, sizeof(__pyx_k_H2x), 0, 0, 1, 1},
  {&__pyx_n_s_H2y, __pyx_k_H2y, sizeof(__pyx_k_H2y), 0, 0, 1, 1},
  {&__pyx_n_s_H2z, __pyx_k_H2z, sizeof(__pyx_k_H2z), 0, 0, 1, 1},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_k_Incompatible_checksums_s_vs_0xb0, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xb0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_n_s_NQRdipTen, __pyx_k_NQRdipTen, sizeof(__pyx_k_NQRdipTen), 0, 0, 1, 1},
  {&__pyx_n_s_NQRself, __pyx_k_NQRself, sizeof(__pyx_k_NQRself), 0, 0, 1, 1},
  {&__pyx_n_s_NQRselfAndB, __pyx_k_NQRselfAndB, sizeof(__pyx_k_NQRselfAndB), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 1, 1},
  {&__pyx_n_s_SphereinCube, __pyx_k_SphereinCube, sizeof(__pyx_k_SphereinCube), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_a1, __pyx_k_a1, sizeof(__pyx_k_a1), 0, 0, 1, 1},
  {&__pyx_n_s_a2, __pyx_k_a2, sizeof(__pyx_k_a2), 0, 0, 1, 1},
  {&__pyx_n_s_actr, __pyx_k_actr, sizeof(__pyx_k_actr), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_an_first, __pyx_k_an_first, sizeof(__pyx_k_an_first), 0, 0, 1, 1},
  {&__pyx_n_s_an_last, __pyx_k_an_last, sizeof(__pyx_k_an_last), 0, 0, 1, 1},
  {&__pyx_n_s_applyRotationMatrix, __pyx_k_applyRotationMatrix, sizeof(__pyx_k_applyRotationMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_apr, __pyx_k_apr, sizeof(__pyx_k_apr), 0, 0, 1, 1},
  {&__pyx_n_s_arccos, __pyx_k_arccos, sizeof(__pyx_k_arccos), 0, 0, 1, 1},
  {&__pyx_n_s_arctan2, __pyx_k_arctan2, sizeof(__pyx_k_arctan2), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_atomicCurrent, __pyx_k_atomicCurrent, sizeof(__pyx_k_atomicCurrent), 0, 0, 1, 1},
  {&__pyx_n_s_atoms_per_residue, __pyx_k_atoms_per_residue, sizeof(__pyx_k_atoms_per_residue), 0, 0, 1, 1},
  {&__pyx_n_s_auf, __pyx_k_auf, sizeof(__pyx_k_auf), 0, 0, 1, 1},
  {&__pyx_n_s_auf3, __pyx_k_auf3, sizeof(__pyx_k_auf3), 0, 0, 1, 1},
  {&__pyx_n_s_auf6, __pyx_k_auf6, sizeof(__pyx_k_auf6), 0, 0, 1, 1},
  {&__pyx_n_s_auf_x1, __pyx_k_auf_x1, sizeof(__pyx_k_auf_x1), 0, 0, 1, 1},
  {&__pyx_n_s_auf_x2, __pyx_k_auf_x2, sizeof(__pyx_k_auf_x2), 0, 0, 1, 1},
  {&__pyx_n_s_auf_y1, __pyx_k_auf_y1, sizeof(__pyx_k_auf_y1), 0, 0, 1, 1},
  {&__pyx_n_s_auf_y2, __pyx_k_auf_y2, sizeof(__pyx_k_auf_y2), 0, 0, 1, 1},
  {&__pyx_n_s_auf_z1, __pyx_k_auf_z1, sizeof(__pyx_k_auf_z1), 0, 0, 1, 1},
  {&__pyx_n_s_auf_z2, __pyx_k_auf_z2, sizeof(__pyx_k_auf_z2), 0, 0, 1, 1},
  {&__pyx_n_s_aufpunkt, __pyx_k_aufpunkt, sizeof(__pyx_k_aufpunkt), 0, 0, 1, 1},
  {&__pyx_n_s_azi, __pyx_k_azi, sizeof(__pyx_k_azi), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_boxl, __pyx_k_boxl, sizeof(__pyx_k_boxl), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_c1, __pyx_k_c1, sizeof(__pyx_k_c1), 0, 0, 1, 1},
  {&__pyx_n_s_c2, __pyx_k_c2, sizeof(__pyx_k_c2), 0, 0, 1, 1},
  {&__pyx_n_s_cI, __pyx_k_cI, sizeof(__pyx_k_cI), 0, 0, 1, 1},
  {&__pyx_n_s_cL, __pyx_k_cL, sizeof(__pyx_k_cL), 0, 0, 1, 1},
  {&__pyx_n_s_c_rv, __pyx_k_c_rv, sizeof(__pyx_k_c_rv), 0, 0, 1, 1},
  {&__pyx_n_s_calcAngularDisplacement, __pyx_k_calcAngularDisplacement, sizeof(__pyx_k_calcAngularDisplacement), 0, 0, 1, 1},
  {&__pyx_n_s_calcAngularMomentum, __pyx_k_calcAngularMomentum, sizeof(__pyx_k_calcAngularMomentum), 0, 0, 1, 1},
  {&__pyx_n_s_calcDipDipEnergyAtomic, __pyx_k_calcDipDipEnergyAtomic, sizeof(__pyx_k_calcDipDipEnergyAtomic), 0, 0, 1, 1},
  {&__pyx_n_s_calcEnergyAA, __pyx_k_calcEnergyAA, sizeof(__pyx_k_calcEnergyAA), 0, 0, 1, 1},
  {&__pyx_n_s_calcEnergyAASep, __pyx_k_calcEnergyAASep, sizeof(__pyx_k_calcEnergyAASep), 0, 0, 1, 1},
  {&__pyx_n_s_calcEnergyAAhisto, __pyx_k_calcEnergyAAhisto, sizeof(__pyx_k_calcEnergyAAhisto), 0, 0, 1, 1},
  {&__pyx_n_s_calcEnergyAAhisto1, __pyx_k_calcEnergyAAhisto1, sizeof(__pyx_k_calcEnergyAAhisto1), 0, 0, 1, 1},
  {&__pyx_n_s_calcEnergyAApermind, __pyx_k_calcEnergyAApermind, sizeof(__pyx_k_calcEnergyAApermind), 0, 0, 1, 1},
  {&__pyx_n_s_calcEnergyAApermindhisto, __pyx_k_calcEnergyAApermindhisto, sizeof(__pyx_k_calcEnergyAApermindhisto), 0, 0, 1, 1},
  {&__pyx_n_s_calcEnergyAtomic, __pyx_k_calcEnergyAtomic, sizeof(__pyx_k_calcEnergyAtomic), 0, 0, 1, 1},
  {&__pyx_n_s_calcEnergyAtomicVoro, __pyx_k_calcEnergyAtomicVoro, sizeof(__pyx_k_calcEnergyAtomicVoro), 0, 0, 1, 1},
  {&__pyx_n_s_calcEnergyDouble, __pyx_k_calcEnergyDouble, sizeof(__pyx_k_calcEnergyDouble), 0, 0, 1, 1},
  {&__pyx_n_s_calcEnergyMuA, __pyx_k_calcEnergyMuA, sizeof(__pyx_k_calcEnergyMuA), 0, 0, 1, 1},
  {&__pyx_n_s_calcFourierLaplaceTransform, __pyx_k_calcFourierLaplaceTransform, sizeof(__pyx_k_calcFourierLaplaceTransform), 0, 0, 1, 1},
  {&__pyx_n_s_calcInertiaTensor, __pyx_k_calcInertiaTensor, sizeof(__pyx_k_calcInertiaTensor), 0, 0, 1, 1},
  {&__pyx_n_s_calcOctant, __pyx_k_calcOctant, sizeof(__pyx_k_calcOctant), 0, 0, 1, 1},
  {&__pyx_n_s_calcResidenceTimeseries, __pyx_k_calcResidenceTimeseries, sizeof(__pyx_k_calcResidenceTimeseries), 0, 0, 1, 1},
  {&__pyx_n_s_calcRotationMatrix, __pyx_k_calcRotationMatrix, sizeof(__pyx_k_calcRotationMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_cat_first, __pyx_k_cat_first, sizeof(__pyx_k_cat_first), 0, 0, 1, 1},
  {&__pyx_n_s_cat_last, __pyx_k_cat_last, sizeof(__pyx_k_cat_last), 0, 0, 1, 1},
  {&__pyx_n_s_ccom, __pyx_k_ccom, sizeof(__pyx_k_ccom), 0, 0, 1, 1},
  {&__pyx_n_s_cds, __pyx_k_cds, sizeof(__pyx_k_cds), 0, 0, 1, 1},
  {&__pyx_n_s_center, __pyx_k_center, sizeof(__pyx_k_center), 0, 0, 1, 1},
  {&__pyx_n_s_centerOrientBox, __pyx_k_centerOrientBox, sizeof(__pyx_k_centerOrientBox), 0, 0, 1, 1},
  {&__pyx_n_s_centerToPointOrientBox, __pyx_k_centerToPointOrientBox, sizeof(__pyx_k_centerToPointOrientBox), 0, 0, 1, 1},
  {&__pyx_n_s_charges, __pyx_k_charges, sizeof(__pyx_k_charges), 0, 0, 1, 1},
  {&__pyx_n_s_charges1, __pyx_k_charges1, sizeof(__pyx_k_charges1), 0, 0, 1, 1},
  {&__pyx_n_s_checkHBond, __pyx_k_checkHBond, sizeof(__pyx_k_checkHBond), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cn, __pyx_k_cn, sizeof(__pyx_k_cn), 0, 0, 1, 1},
  {&__pyx_n_s_coct, __pyx_k_coct, sizeof(__pyx_k_coct), 0, 0, 1, 1},
  {&__pyx_n_s_collectiveDipoleMomentWaterShell, __pyx_k_collectiveDipoleMomentWaterShell, sizeof(__pyx_k_collectiveDipoleMomentWaterShell), 0, 0, 1, 1},
  {&__pyx_n_s_com, __pyx_k_com, sizeof(__pyx_k_com), 0, 0, 1, 1},
  {&__pyx_n_s_comByResidue, __pyx_k_comByResidue, sizeof(__pyx_k_comByResidue), 0, 0, 1, 1},
  {&__pyx_n_s_coms, __pyx_k_coms, sizeof(__pyx_k_coms), 0, 0, 1, 1},
  {&__pyx_n_s_comslt, __pyx_k_comslt, sizeof(__pyx_k_comslt), 0, 0, 1, 1},
  {&__pyx_n_s_conjugate, __pyx_k_conjugate, sizeof(__pyx_k_conjugate), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_coor, __pyx_k_coor, sizeof(__pyx_k_coor), 0, 0, 1, 1},
  {&__pyx_n_s_coorA, __pyx_k_coorA, sizeof(__pyx_k_coorA), 0, 0, 1, 1},
  {&__pyx_n_s_coorB, __pyx_k_coorB, sizeof(__pyx_k_coorB), 0, 0, 1, 1},
  {&__pyx_n_s_coor_core, __pyx_k_coor_core, sizeof(__pyx_k_coor_core), 0, 0, 1, 1},
  {&__pyx_n_s_coor_oh2, __pyx_k_coor_oh2, sizeof(__pyx_k_coor_oh2), 0, 0, 1, 1},
  {&__pyx_n_s_coor_surr, __pyx_k_coor_surr, sizeof(__pyx_k_coor_surr), 0, 0, 1, 1},
  {&__pyx_n_s_cosine, __pyx_k_cosine, sizeof(__pyx_k_cosine), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_ctr, __pyx_k_ctr, sizeof(__pyx_k_ctr), 0, 0, 1, 1},
  {&__pyx_n_s_cxyz, __pyx_k_cxyz, sizeof(__pyx_k_cxyz), 0, 0, 1, 1},
  {&__pyx_n_s_data_x, __pyx_k_data_x, sizeof(__pyx_k_data_x), 0, 0, 1, 1},
  {&__pyx_n_s_data_y, __pyx_k_data_y, sizeof(__pyx_k_data_y), 0, 0, 1, 1},
  {&__pyx_n_s_deltaA, __pyx_k_deltaA, sizeof(__pyx_k_deltaA), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dip, __pyx_k_dip, sizeof(__pyx_k_dip), 0, 0, 1, 1},
  {&__pyx_n_s_dipByResidue, __pyx_k_dipByResidue, sizeof(__pyx_k_dipByResidue), 0, 0, 1, 1},
  {&__pyx_n_s_dipTen, __pyx_k_dipTen, sizeof(__pyx_k_dipTen), 0, 0, 1, 1},
  {&__pyx_n_s_dip_wat, __pyx_k_dip_wat, sizeof(__pyx_k_dip_wat), 0, 0, 1, 1},
  {&__pyx_n_s_dipol, __pyx_k_dipol, sizeof(__pyx_k_dipol), 0, 0, 1, 1},
  {&__pyx_n_s_dipoleMomentNeutralSelection, __pyx_k_dipoleMomentNeutralSelection, sizeof(__pyx_k_dipoleMomentNeutralSelection), 0, 0, 1, 1},
  {&__pyx_n_s_dipt, __pyx_k_dipt, sizeof(__pyx_k_dipt), 0, 0, 1, 1},
  {&__pyx_n_s_dist, __pyx_k_dist, sizeof(__pyx_k_dist), 0, 0, 1, 1},
  {&__pyx_n_s_dist2, __pyx_k_dist2, sizeof(__pyx_k_dist2), 0, 0, 1, 1},
  {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
  {&__pyx_n_s_dot2, __pyx_k_dot2, sizeof(__pyx_k_dot2), 0, 0, 1, 1},
  {&__pyx_n_s_drude, __pyx_k_drude, sizeof(__pyx_k_drude), 0, 0, 1, 1},
  {&__pyx_n_s_ds, __pyx_k_ds, sizeof(__pyx_k_ds), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_dx, __pyx_k_dx, sizeof(__pyx_k_dx), 0, 0, 1, 1},
  {&__pyx_n_s_dx2, __pyx_k_dx2, sizeof(__pyx_k_dx2), 0, 0, 1, 1},
  {&__pyx_n_s_dy, __pyx_k_dy, sizeof(__pyx_k_dy), 0, 0, 1, 1},
  {&__pyx_n_s_dy2, __pyx_k_dy2, sizeof(__pyx_k_dy2), 0, 0, 1, 1},
  {&__pyx_n_s_dz, __pyx_k_dz, sizeof(__pyx_k_dz), 0, 0, 1, 1},
  {&__pyx_n_s_dz2, __pyx_k_dz2, sizeof(__pyx_k_dz2), 0, 0, 1, 1},
  {&__pyx_n_s_edip, __pyx_k_edip, sizeof(__pyx_k_edip), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_energy, __pyx_k_energy, sizeof(__pyx_k_energy), 0, 0, 1, 1},
  {&__pyx_n_s_energy_ind, __pyx_k_energy_ind, sizeof(__pyx_k_energy_ind), 0, 0, 1, 1},
  {&__pyx_n_s_energy_octant, __pyx_k_energy_octant, sizeof(__pyx_k_energy_octant), 0, 0, 1, 1},
  {&__pyx_n_s_energy_octant_per_atom, __pyx_k_energy_octant_per_atom, sizeof(__pyx_k_energy_octant_per_atom), 0, 0, 1, 1},
  {&__pyx_n_s_energy_per_atom, __pyx_k_energy_per_atom, sizeof(__pyx_k_energy_per_atom), 0, 0, 1, 1},
  {&__pyx_n_s_energy_perm, __pyx_k_energy_perm, sizeof(__pyx_k_energy_perm), 0, 0, 1, 1},
  {&__pyx_n_s_energy_xyz, __pyx_k_energy_xyz, sizeof(__pyx_k_energy_xyz), 0, 0, 1, 1},
  {&__pyx_n_s_energy_xyz_per_atom, __pyx_k_energy_xyz_per_atom, sizeof(__pyx_k_energy_xyz_per_atom), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_epa, __pyx_k_epa, sizeof(__pyx_k_epa), 0, 0, 1, 1},
  {&__pyx_n_s_epa1, __pyx_k_epa1, sizeof(__pyx_k_epa1), 0, 0, 1, 1},
  {&__pyx_n_s_epa_ind, __pyx_k_epa_ind, sizeof(__pyx_k_epa_ind), 0, 0, 1, 1},
  {&__pyx_n_s_epa_oct, __pyx_k_epa_oct, sizeof(__pyx_k_epa_oct), 0, 0, 1, 1},
  {&__pyx_n_s_epa_perm, __pyx_k_epa_perm, sizeof(__pyx_k_epa_perm), 0, 0, 1, 1},
  {&__pyx_n_s_epa_xyz, __pyx_k_epa_xyz, sizeof(__pyx_k_epa_xyz), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_exclude_begin, __pyx_k_exclude_begin, sizeof(__pyx_k_exclude_begin), 0, 0, 1, 1},
  {&__pyx_n_s_exclude_end, __pyx_k_exclude_end, sizeof(__pyx_k_exclude_end), 0, 0, 1, 1},
  {&__pyx_n_s_f1, __pyx_k_f1, sizeof(__pyx_k_f1), 0, 0, 1, 1},
  {&__pyx_n_s_f2, __pyx_k_f2, sizeof(__pyx_k_f2), 0, 0, 1, 1},
  {&__pyx_n_s_f2_0, __pyx_k_f2_0, sizeof(__pyx_k_f2_0), 0, 0, 1, 1},
  {&__pyx_n_s_f2_1, __pyx_k_f2_1, sizeof(__pyx_k_f2_1), 0, 0, 1, 1},
  {&__pyx_n_s_f2_2, __pyx_k_f2_2, sizeof(__pyx_k_f2_2), 0, 0, 1, 1},
  {&__pyx_n_s_f2_x, __pyx_k_f2_x, sizeof(__pyx_k_f2_x), 0, 0, 1, 1},
  {&__pyx_n_s_f2_y, __pyx_k_f2_y, sizeof(__pyx_k_f2_y), 0, 0, 1, 1},
  {&__pyx_n_s_f2_z, __pyx_k_f2_z, sizeof(__pyx_k_f2_z), 0, 0, 1, 1},
  {&__pyx_n_s_findDS, __pyx_k_findDS, sizeof(__pyx_k_findDS), 0, 0, 1, 1},
  {&__pyx_n_s_findNearestAtom, __pyx_k_findNearestAtom, sizeof(__pyx_k_findNearestAtom), 0, 0, 1, 1},
  {&__pyx_n_s_first, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_frame, __pyx_k_frame, sizeof(__pyx_k_frame), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gfunc, __pyx_k_gfunc, sizeof(__pyx_k_gfunc), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_hbond, __pyx_k_hbond, sizeof(__pyx_k_hbond), 0, 0, 1, 1},
  {&__pyx_n_s_histo, __pyx_k_histo, sizeof(__pyx_k_histo), 0, 0, 1, 1},
  {&__pyx_n_s_histo_bins, __pyx_k_histo_bins, sizeof(__pyx_k_histo_bins), 0, 0, 1, 1},
  {&__pyx_n_s_histo_error, __pyx_k_histo_error, sizeof(__pyx_k_histo_error), 0, 0, 1, 1},
  {&__pyx_n_s_histo_ind, __pyx_k_histo_ind, sizeof(__pyx_k_histo_ind), 0, 0, 1, 1},
  {&__pyx_n_s_histo_max, __pyx_k_histo_max, sizeof(__pyx_k_histo_max), 0, 0, 1, 1},
  {&__pyx_n_s_histo_min, __pyx_k_histo_min, sizeof(__pyx_k_histo_min), 0, 0, 1, 1},
  {&__pyx_n_s_histo_perm, __pyx_k_histo_perm, sizeof(__pyx_k_histo_perm), 0, 0, 1, 1},
  {&__pyx_n_s_histo_width, __pyx_k_histo_width, sizeof(__pyx_k_histo_width), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_idx2, __pyx_k_idx2, sizeof(__pyx_k_idx2), 0, 0, 1, 1},
  {&__pyx_n_s_idx3, __pyx_k_idx3, sizeof(__pyx_k_idx3), 0, 0, 1, 1},
  {&__pyx_n_s_idx4, __pyx_k_idx4, sizeof(__pyx_k_idx4), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_ind, __pyx_k_ind, sizeof(__pyx_k_ind), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
  {&__pyx_n_s_integral, __pyx_k_integral, sizeof(__pyx_k_integral), 0, 0, 1, 1},
  {&__pyx_n_s_islt, __pyx_k_islt, sizeof(__pyx_k_islt), 0, 0, 1, 1},
  {&__pyx_n_s_isolute, __pyx_k_isolute, sizeof(__pyx_k_isolute), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_l1, __pyx_k_l1, sizeof(__pyx_k_l1), 0, 0, 1, 1},
  {&__pyx_n_s_l2, __pyx_k_l2, sizeof(__pyx_k_l2), 0, 0, 1, 1},
  {&__pyx_n_s_laplace_im, __pyx_k_laplace_im, sizeof(__pyx_k_laplace_im), 0, 0, 1, 1},
  {&__pyx_n_s_laplace_re, __pyx_k_laplace_re, sizeof(__pyx_k_laplace_re), 0, 0, 1, 1},
  {&__pyx_n_s_last, __pyx_k_last, sizeof(__pyx_k_last), 0, 0, 1, 1},
  {&__pyx_n_s_lmax, __pyx_k_lmax, sizeof(__pyx_k_lmax), 0, 0, 1, 1},
  {&__pyx_n_s_m1, __pyx_k_m1, sizeof(__pyx_k_m1), 0, 0, 1, 1},
  {&__pyx_n_s_m1r, __pyx_k_m1r, sizeof(__pyx_k_m1r), 0, 0, 1, 1},
  {&__pyx_n_s_m2, __pyx_k_m2, sizeof(__pyx_k_m2), 0, 0, 1, 1},
  {&__pyx_n_s_m2r, __pyx_k_m2r, sizeof(__pyx_k_m2r), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_masses, __pyx_k_masses, sizeof(__pyx_k_masses), 0, 0, 1, 1},
  {&__pyx_n_s_maxdist, __pyx_k_maxdist, sizeof(__pyx_k_maxdist), 0, 0, 1, 1},
  {&__pyx_n_s_maxshell, __pyx_k_maxshell, sizeof(__pyx_k_maxshell), 0, 0, 1, 1},
  {&__pyx_n_s_mdcage_ts, __pyx_k_mdcage_ts, sizeof(__pyx_k_mdcage_ts), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mindist, __pyx_k_mindist, sizeof(__pyx_k_mindist), 0, 0, 1, 1},
  {&__pyx_n_s_mindist2, __pyx_k_mindist2, sizeof(__pyx_k_mindist2), 0, 0, 1, 1},
  {&__pyx_n_s_minvec, __pyx_k_minvec, sizeof(__pyx_k_minvec), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_msd, __pyx_k_msd, sizeof(__pyx_k_msd), 0, 0, 1, 1},
  {&__pyx_n_s_mu_solute, __pyx_k_mu_solute, sizeof(__pyx_k_mu_solute), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n1, __pyx_k_n1, sizeof(__pyx_k_n1), 0, 0, 1, 1},
  {&__pyx_n_s_n2, __pyx_k_n2, sizeof(__pyx_k_n2), 0, 0, 1, 1},
  {&__pyx_n_s_n3, __pyx_k_n3, sizeof(__pyx_k_n3), 0, 0, 1, 1},
  {&__pyx_n_s_n_core, __pyx_k_n_core, sizeof(__pyx_k_n_core), 0, 0, 1, 1},
  {&__pyx_n_s_n_surr, __pyx_k_n_surr, sizeof(__pyx_k_n_surr), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_nat, __pyx_k_nat, sizeof(__pyx_k_nat), 0, 0, 1, 1},
  {&__pyx_n_s_natoms, __pyx_k_natoms, sizeof(__pyx_k_natoms), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_newanalysis_helpers, __pyx_k_newanalysis_helpers, sizeof(__pyx_k_newanalysis_helpers), 0, 0, 1, 1},
  {&__pyx_n_s_next_id, __pyx_k_next_id, sizeof(__pyx_k_next_id), 0, 0, 1, 1},
  {&__pyx_n_s_nmol, __pyx_k_nmol, sizeof(__pyx_k_nmol), 0, 0, 1, 1},
  {&__pyx_n_s_nmolecules, __pyx_k_nmolecules, sizeof(__pyx_k_nmolecules), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_nres, __pyx_k_nres, sizeof(__pyx_k_nres), 0, 0, 1, 1},
  {&__pyx_n_s_nres_surr, __pyx_k_nres_surr, sizeof(__pyx_k_nres_surr), 0, 0, 1, 1},
  {&__pyx_n_s_nres_wat, __pyx_k_nres_wat, sizeof(__pyx_k_nres_wat), 0, 0, 1, 1},
  {&__pyx_n_s_nshells, __pyx_k_nshells, sizeof(__pyx_k_nshells), 0, 0, 1, 1},
  {&__pyx_n_s_nsurr, __pyx_k_nsurr, sizeof(__pyx_k_nsurr), 0, 0, 1, 1},
  {&__pyx_n_s_nt, __pyx_k_nt, sizeof(__pyx_k_nt), 0, 0, 1, 1},
  {&__pyx_n_s_numpoints, __pyx_k_numpoints, sizeof(__pyx_k_numpoints), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_nwat, __pyx_k_nwat, sizeof(__pyx_k_nwat), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_octants, __pyx_k_octants, sizeof(__pyx_k_octants), 0, 0, 1, 1},
  {&__pyx_n_s_oxyquinol, __pyx_k_oxyquinol, sizeof(__pyx_k_oxyquinol), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pol, __pyx_k_pol, sizeof(__pyx_k_pol), 0, 0, 1, 1},
  {&__pyx_n_s_pyE, __pyx_k_pyE, sizeof(__pyx_k_pyE), 0, 0, 1, 1},
  {&__pyx_n_s_py_B1, __pyx_k_py_B1, sizeof(__pyx_k_py_B1), 0, 0, 1, 1},
  {&__pyx_n_s_py_B2, __pyx_k_py_B2, sizeof(__pyx_k_py_B2), 0, 0, 1, 1},
  {&__pyx_n_s_py_B3, __pyx_k_py_B3, sizeof(__pyx_k_py_B3), 0, 0, 1, 1},
  {&__pyx_n_s_py_charges, __pyx_k_py_charges, sizeof(__pyx_k_py_charges), 0, 0, 1, 1},
  {&__pyx_n_s_py_dipt, __pyx_k_py_dipt, sizeof(__pyx_k_py_dipt), 0, 0, 1, 1},
  {&__pyx_n_s_py_xyz, __pyx_k_py_xyz, sizeof(__pyx_k_py_xyz), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_qq, __pyx_k_qq, sizeof(__pyx_k_qq), 0, 0, 1, 1},
  {&__pyx_n_s_qq_diff, __pyx_k_qq_diff, sizeof(__pyx_k_qq_diff), 0, 0, 1, 1},
  {&__pyx_n_s_qqr, __pyx_k_qqr, sizeof(__pyx_k_qqr), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_r2, __pyx_k_r2, sizeof(__pyx_k_r2), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_rep, __pyx_k_rep, sizeof(__pyx_k_rep), 0, 0, 1, 1},
  {&__pyx_n_s_residue_first_atom, __pyx_k_residue_first_atom, sizeof(__pyx_k_residue_first_atom), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_rfa, __pyx_k_rfa, sizeof(__pyx_k_rfa), 0, 0, 1, 1},
  {&__pyx_n_s_roxy, __pyx_k_roxy, sizeof(__pyx_k_roxy), 0, 0, 1, 1},
  {&__pyx_n_s_rtre, __pyx_k_rtre, sizeof(__pyx_k_rtre), 0, 0, 1, 1},
  {&__pyx_n_s_rv, __pyx_k_rv, sizeof(__pyx_k_rv), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_special, __pyx_k_scipy_special, sizeof(__pyx_k_scipy_special), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_shell, __pyx_k_shell, sizeof(__pyx_k_shell), 0, 0, 1, 1},
  {&__pyx_n_s_shift, __pyx_k_shift, sizeof(__pyx_k_shift), 0, 0, 1, 1},
  {&__pyx_n_s_sites_per_res, __pyx_k_sites_per_res, sizeof(__pyx_k_sites_per_res), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sphHarmMatrix, __pyx_k_sphHarmMatrix, sizeof(__pyx_k_sphHarmMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_sph_harm, __pyx_k_sph_harm, sizeof(__pyx_k_sph_harm), 0, 0, 1, 1},
  {&__pyx_n_s_squared_r_oxy, __pyx_k_squared_r_oxy, sizeof(__pyx_k_squared_r_oxy), 0, 0, 1, 1},
  {&__pyx_n_s_squared_r_tre, __pyx_k_squared_r_tre, sizeof(__pyx_k_squared_r_tre), 0, 0, 1, 1},
  {&__pyx_kp_s_src_helpers_helpers_pyx, __pyx_k_src_helpers_helpers_pyx, sizeof(__pyx_k_src_helpers_helpers_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_store, __pyx_k_store, sizeof(__pyx_k_store), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_sumMDCage, __pyx_k_sumMDCage, sizeof(__pyx_k_sumMDCage), 0, 0, 1, 1},
  {&__pyx_n_s_sumMDCageSingle, __pyx_k_sumMDCageSingle, sizeof(__pyx_k_sumMDCageSingle), 0, 0, 1, 1},
  {&__pyx_n_s_sumr, __pyx_k_sumr, sizeof(__pyx_k_sumr), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tmp, __pyx_k_tmp, sizeof(__pyx_k_tmp), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_ener, __pyx_k_tmp_ener, sizeof(__pyx_k_tmp_ener), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_ind, __pyx_k_tmp_ind, sizeof(__pyx_k_tmp_ind), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_perm, __pyx_k_tmp_perm, sizeof(__pyx_k_tmp_perm), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_x, __pyx_k_tmp_x, sizeof(__pyx_k_tmp_x), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_y, __pyx_k_tmp_y, sizeof(__pyx_k_tmp_y), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_z, __pyx_k_tmp_z, sizeof(__pyx_k_tmp_z), 0, 0, 1, 1},
  {&__pyx_n_s_tmpx, __pyx_k_tmpx, sizeof(__pyx_k_tmpx), 0, 0, 1, 1},
  {&__pyx_n_s_tmpy, __pyx_k_tmpy, sizeof(__pyx_k_tmpy), 0, 0, 1, 1},
  {&__pyx_n_s_tmpz, __pyx_k_tmpz, sizeof(__pyx_k_tmpz), 0, 0, 1, 1},
  {&__pyx_n_s_tn, __pyx_k_tn, sizeof(__pyx_k_tn), 0, 0, 1, 1},
  {&__pyx_n_s_tot_mass, __pyx_k_tot_mass, sizeof(__pyx_k_tot_mass), 0, 0, 1, 1},
  {&__pyx_n_s_transform, __pyx_k_transform, sizeof(__pyx_k_transform), 0, 0, 1, 1},
  {&__pyx_n_s_trehalose, __pyx_k_trehalose, sizeof(__pyx_k_trehalose), 0, 0, 1, 1},
  {&__pyx_n_s_ts, __pyx_k_ts, sizeof(__pyx_k_ts), 0, 0, 1, 1},
  {&__pyx_n_s_tyH, __pyx_k_tyH, sizeof(__pyx_k_tyH), 0, 0, 1, 1},
  {&__pyx_n_s_tzH, __pyx_k_tzH, sizeof(__pyx_k_tzH), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_vel, __pyx_k_vel, sizeof(__pyx_k_vel), 0, 0, 1, 1},
  {&__pyx_n_s_velcom, __pyx_k_velcom, sizeof(__pyx_k_velcom), 0, 0, 1, 1},
  {&__pyx_n_s_velcomByResidue, __pyx_k_velcomByResidue, sizeof(__pyx_k_velcomByResidue), 0, 0, 1, 1},
  {&__pyx_n_s_vels, __pyx_k_vels, sizeof(__pyx_k_vels), 0, 0, 1, 1},
  {&__pyx_n_s_vol, __pyx_k_vol, sizeof(__pyx_k_vol), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_waterRotationMatrix, __pyx_k_waterRotationMatrix, sizeof(__pyx_k_waterRotationMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_wt, __pyx_k_wt, sizeof(__pyx_k_wt), 0, 0, 1, 1},
  {&__pyx_n_s_wt1, __pyx_k_wt1, sizeof(__pyx_k_wt1), 0, 0, 1, 1},
  {&__pyx_n_s_wts, __pyx_k_wts, sizeof(__pyx_k_wts), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xyz, __pyx_k_xyz, sizeof(__pyx_k_xyz), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y_mat, __pyx_k_y_mat, sizeof(__pyx_k_y_mat), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 947, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 133, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(2, 148, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(2, 151, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(2, 2, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(2, 404, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(2, 613, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 832, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "src/helpers/helpers.pyx":196
 *     cdef double[3] comslt
 *     cdef int i, j, k, nmol = com.shape[0]
 *     cdef double [:,:] R = np.zeros((3,3))             # <<<<<<<<<<<<<<
 *     cdef double tmpx, tmpy, tmpz
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(2, __pyx_int_3, __pyx_int_3); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "src/helpers/helpers.pyx":448
 *         energy += epa[i]
 * 
 *     return energy * 1390.02, np.asarray(histo)[:,:] * 1390.02 , histo_error, np.asarray(count)[:,:]             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_slice__2 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__2)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_slice__2, __pyx_slice__2); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "src/helpers/helpers.pyx":736
 *     cdef int x, y, z, idx4, c1=cat_first, c2=cat_last, a1=an_first, a2=an_last
 *     cdef int *cds = <int *> ds.data
 *     cdef np.ndarray[np.float64_t,ndim=1] energy = np.zeros(8,dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_xyz = np.zeros(3,dtype=np.float64)
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_octant = np.zeros(8,dtype=np.float64)
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_int_8); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "src/helpers/helpers.pyx":737
 *     cdef int *cds = <int *> ds.data
 *     cdef np.ndarray[np.float64_t,ndim=1] energy = np.zeros(8,dtype=np.float64)
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_xyz = np.zeros(3,dtype=np.float64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float64_t,ndim=1] energy_octant = np.zeros(8,dtype=np.float64)
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "src/helpers/helpers.pyx":804
 *     """
 *     cdef double* c_rv = <double *> rv.data
 *     cdef np.ndarray[np.float64_t,ndim=1] dipt = np.empty(6,dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *     cdef double f1 = pow(r2,-1.5)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_int_6); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "../../../../../scratch/data/andras/anaconda3/envs/mdanalysis_new/lib/python3.9/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(2, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__20 = PyTuple_New(1); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(2, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__20, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "src/helpers/helpers.pyx":24
 * 
 * @cython.boundscheck(False)
 * def SphereinCube(double A, int numpoints, double gfunc, double deltaA):             # <<<<<<<<<<<<<<
 *     cdef int i, j, k, sumr
 *     cdef double vol,x,y,z
 */
  __pyx_tuple__26 = PyTuple_Pack(12, __pyx_n_s_A, __pyx_n_s_numpoints, __pyx_n_s_gfunc, __pyx_n_s_deltaA, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_sumr, __pyx_n_s_vol, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(4, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_SphereinCube, 24, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 24, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":41
 * 
 * @cython.boundscheck(False)
 * def velcomByResidue(double [:,:] vels, double [:] masses, int nres, int [:] apr, int [:] rfa):             # <<<<<<<<<<<<<<
 *     """
 *     velcomByResidue(vels,masses,nres,atoms_per_residue)
 */
  __pyx_tuple__28 = PyTuple_Pack(11, __pyx_n_s_vels, __pyx_n_s_masses, __pyx_n_s_nres, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_velcom, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_actr, __pyx_n_s_tot_mass); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(5, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_velcomByResidue, 41, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 41, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":73
 * 
 * @cython.boundscheck(False)
 * def comByResidue(double [:,:] coor, double [:] masses, int nres, int [:] apr, int [:] rfa):             # <<<<<<<<<<<<<<
 *     """
 *     comByResidue(coor,masses,nres,atoms_per_residue)
 */
  __pyx_tuple__30 = PyTuple_Pack(11, __pyx_n_s_coor, __pyx_n_s_masses, __pyx_n_s_nres, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_com, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_actr, __pyx_n_s_tot_mass); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(5, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_comByResidue, 73, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 73, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":106
 * 
 * @cython.boundscheck(False)
 * def dipByResidue(double [:,:] coor, double [:] charges, double [:] masses, int nres, int [:] apr, int [:] rfa, double [:,:] com):             # <<<<<<<<<<<<<<
 *     """
 *     dipByResidue(coor,charges,masses,nresidues,atoms_per_residue,com)
 */
  __pyx_tuple__32 = PyTuple_Pack(12, __pyx_n_s_coor, __pyx_n_s_charges, __pyx_n_s_masses, __pyx_n_s_nres, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_com, __pyx_n_s_dip, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_actr); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(7, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_dipByResidue, 106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 106, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":133
 * 
 * @cython.boundscheck(False)
 * def dipoleMomentNeutralSelection(double [:,:] coor, double [:] charges):             # <<<<<<<<<<<<<<
 * 
 *     cdef double [:] dip = np.zeros(3)
 */
  __pyx_tuple__34 = PyTuple_Pack(5, __pyx_n_s_coor, __pyx_n_s_charges, __pyx_n_s_dip, __pyx_n_s_i, __pyx_n_s_natoms); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_dipoleMomentNeutralSelection, 133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 133, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":147
 * 
 * @cython.boundscheck(False)
 * def collectiveDipoleMomentWaterShells(double [:,:] coor, double [:] charges, int [:] ds, int nshells):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i,j,shell
 */
  __pyx_tuple__36 = PyTuple_Pack(10, __pyx_n_s_coor, __pyx_n_s_charges, __pyx_n_s_ds, __pyx_n_s_nshells, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_shell, __pyx_n_s_natoms, __pyx_n_s_nmol, __pyx_n_s_dip); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(4, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_collectiveDipoleMomentWaterShell, 147, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 147, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":166
 * 
 * @cython.boundscheck(False)
 * def atomicCurrent(double [:,:] vel, double [:] charges, double [:,:] result, int ctr):             # <<<<<<<<<<<<<<
 *     cdef int i, natoms=len(vel)
 * 
 */
  __pyx_tuple__38 = PyTuple_Pack(6, __pyx_n_s_vel, __pyx_n_s_charges, __pyx_n_s_result, __pyx_n_s_ctr, __pyx_n_s_i, __pyx_n_s_natoms); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_atomicCurrent, 166, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 166, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":175
 * 
 * @cython.boundscheck(False)
 * def centerOrientBox(double [:,:] com, double [:,:] coor, double boxl, int isolute,             # <<<<<<<<<<<<<<
 *                     int [:] apr, int [:] rfa, double [:,:] coorA, double [:,:] coorB):
 *     """
 */
  __pyx_tuple__40 = PyTuple_Pack(18, __pyx_n_s_com, __pyx_n_s_coor, __pyx_n_s_boxl, __pyx_n_s_isolute, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_coorA, __pyx_n_s_coorB, __pyx_n_s_shift, __pyx_n_s_comslt, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_nmol, __pyx_n_s_R, __pyx_n_s_tmpx, __pyx_n_s_tmpy, __pyx_n_s_tmpz); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(8, 0, 18, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_centerOrientBox, 175, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 175, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":223
 * 
 * @cython.boundscheck(False)
 * def centerToPointOrientBox(double [:,:] com, double [:,:] coor, double [:] center, double boxl,             # <<<<<<<<<<<<<<
 *                            int [:] apr, int [:] rfa, double [:,:] coorA, double [:,:] coorB):
 *     """
 */
  __pyx_tuple__42 = PyTuple_Pack(17, __pyx_n_s_com, __pyx_n_s_coor, __pyx_n_s_center, __pyx_n_s_boxl, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_coorA, __pyx_n_s_coorB, __pyx_n_s_shift, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_nmol, __pyx_n_s_R, __pyx_n_s_tmpx, __pyx_n_s_tmpy, __pyx_n_s_tmpz); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(8, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_centerToPointOrientBox, 223, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 223, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":266
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAA(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules)
 */
  __pyx_tuple__44 = PyTuple_Pack(17, __pyx_n_s_coor, __pyx_n_s_charges, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_isolute, __pyx_n_s_nmol, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_idx, __pyx_n_s_idx2, __pyx_n_s_epa, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_r, __pyx_n_s_energy); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(6, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcEnergyAA, 266, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 266, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":301
 * 
 * @cython.boundscheck(False)
 * def calcEnergyMuA(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double [:] mu_solute):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyMuA(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules,mu_solute)
 */
  __pyx_tuple__46 = PyTuple_Pack(15, __pyx_n_s_coor, __pyx_n_s_charges, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_isolute, __pyx_n_s_nmol, __pyx_n_s_mu_solute, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_idx2, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_r, __pyx_n_s_energy); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(7, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcEnergyMuA, 301, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 301, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":329
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAApermind(double [:,:] coor, double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int first, int last, double[:] drude):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, resnum_from, resnum_to, drude_list)
 */
  __pyx_tuple__48 = PyTuple_Pack(25, __pyx_n_s_coor, __pyx_n_s_coms, __pyx_n_s_charges, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_isolute, __pyx_n_s_first, __pyx_n_s_last, __pyx_n_s_drude, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_idx, __pyx_n_s_idx2, __pyx_n_s_histo_error, __pyx_n_s_epa_ind, __pyx_n_s_epa_perm, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_r, __pyx_n_s_qq, __pyx_n_s_energy_perm, __pyx_n_s_energy_ind, __pyx_n_s_qq_diff); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(9, 0, 25, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcEnergyAApermind, 329, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 329, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":376
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAAhisto(double [:,:] coor,  double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double histo_min, double histo_max, int histo_bins, int[:] trehalose, int[:] oxyquinol):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAAhisto(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, min_histo, max_histo, bins_hist,array indices, array indices 2)
 */
  __pyx_tuple__50 = PyTuple_Pack(34, __pyx_n_s_coor, __pyx_n_s_coms, __pyx_n_s_charges, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_isolute, __pyx_n_s_nmol, __pyx_n_s_histo_min, __pyx_n_s_histo_max, __pyx_n_s_histo_bins, __pyx_n_s_trehalose, __pyx_n_s_oxyquinol, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_idx, __pyx_n_s_idx2, __pyx_n_s_histo_error, __pyx_n_s_epa, __pyx_n_s_histo, __pyx_n_s_count, __pyx_n_s_store, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_r, __pyx_n_s_rtre, __pyx_n_s_tmp, __pyx_n_s_tmp_ener, __pyx_n_s_histo_width, __pyx_n_s_squared_r_tre, __pyx_n_s_squared_r_oxy, __pyx_n_s_energy, __pyx_n_s_roxy); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(12, 0, 34, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcEnergyAAhisto, 376, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 376, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":451
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAAhisto1(double [:,:] coor,  double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double histo_min, double histo_max, int histo_bins, int[:] trehalose):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAAhisto(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, min_histo, max_histo, bins_hist,array indices)
 */
  __pyx_tuple__52 = PyTuple_Pack(31, __pyx_n_s_coor, __pyx_n_s_coms, __pyx_n_s_charges, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_isolute, __pyx_n_s_nmol, __pyx_n_s_histo_min, __pyx_n_s_histo_max, __pyx_n_s_histo_bins, __pyx_n_s_trehalose, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_idx, __pyx_n_s_idx2, __pyx_n_s_histo_error, __pyx_n_s_epa, __pyx_n_s_histo, __pyx_n_s_count, __pyx_n_s_store, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_r, __pyx_n_s_rtre, __pyx_n_s_tmp, __pyx_n_s_tmp_ener, __pyx_n_s_histo_width, __pyx_n_s_squared_r_tre, __pyx_n_s_energy); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(11, 0, 31, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcEnergyAAhisto1, 451, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 451, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":518
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAApermindhisto(double [:,:] coor, double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int first, int last, double[:] drude,double histo_min, double histo_max, int histo_bins,):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, resnum_from, resnum_to, drude_list, min_histo, max_histo, bins_histo)
 */
  __pyx_tuple__54 = PyTuple_Pack(33, __pyx_n_s_coor, __pyx_n_s_coms, __pyx_n_s_charges, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_isolute, __pyx_n_s_first, __pyx_n_s_last, __pyx_n_s_drude, __pyx_n_s_histo_min, __pyx_n_s_histo_max, __pyx_n_s_histo_bins, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_idx, __pyx_n_s_idx2, __pyx_n_s_histo_error, __pyx_n_s_epa_ind, __pyx_n_s_epa_perm, __pyx_n_s_histo_perm, __pyx_n_s_histo_ind, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_r, __pyx_n_s_qq, __pyx_n_s_energy_perm, __pyx_n_s_energy_ind, __pyx_n_s_histo_width, __pyx_n_s_tmp_perm, __pyx_n_s_tmp_ind, __pyx_n_s_qq_diff); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(12, 0, 33, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcEnergyAApermindhisto, 518, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 518, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":583
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAtomic(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, int exclude_begin=-1, int exclude_end=-1):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAtomic(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules)
 */
  __pyx_tuple__56 = PyTuple_Pack(18, __pyx_n_s_coor, __pyx_n_s_charges, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_isolute, __pyx_n_s_nmol, __pyx_n_s_exclude_begin, __pyx_n_s_exclude_end, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_idx, __pyx_n_s_idx2, __pyx_n_s_epa, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_r); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(8, 0, 18, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcEnergyAtomic, 583, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 583, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":613
 * 
 * @cython.boundscheck(False)
 * def calcEnergyDouble(double [:,:] coor, double [:] charges1,  int [:] apr, int [:] rfa, int isolute, int nmol, int start, int end):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyDouble(xyz, charges_1, charges_2, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules,start_res,end_res)
 */
  __pyx_tuple__58 = PyTuple_Pack(18, __pyx_n_s_coor, __pyx_n_s_charges1, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_isolute, __pyx_n_s_nmol, __pyx_n_s_start, __pyx_n_s_end, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_idx, __pyx_n_s_idx2, __pyx_n_s_epa1, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_r); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(8, 0, 18, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcEnergyDouble, 613, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 613, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":645
 * 
 * @cython.boundscheck(False)
 * def calcDipDipEnergyAtomic(double [:,:] coms, double [:,:] dipol,  int isolute, int nmol, int exclude_begin=-1, int exclude_end=-1):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcDipDipEnergyAtomic(coms, dipol, resnum_solute, nmolecules)
 */
  __pyx_tuple__60 = PyTuple_Pack(9, __pyx_n_s_coms, __pyx_n_s_dipol, __pyx_n_s_isolute, __pyx_n_s_nmol, __pyx_n_s_exclude_begin, __pyx_n_s_exclude_end, __pyx_n_s_i, __pyx_n_s_edip, __pyx_n_s_r); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(6, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcDipDipEnergyAtomic, 645, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 645, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":666
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAtomicVoro(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, char [:] ds, int maxshell):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAtomic(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, delaunay_shell)
 */
  __pyx_tuple__62 = PyTuple_Pack(18, __pyx_n_s_coor, __pyx_n_s_charges, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_isolute, __pyx_n_s_nmol, __pyx_n_s_ds, __pyx_n_s_maxshell, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_idx, __pyx_n_s_idx2, __pyx_n_s_epa, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_r); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(8, 0, 18, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcEnergyAtomicVoro, 666, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 666, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":699
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAASep(np.ndarray[np.float64_t,ndim=2,mode="c"] xyz,             # <<<<<<<<<<<<<<
 *                  np.ndarray[np.float64_t,ndim=1] charges,
 *                  np.ndarray[np.int32_t,ndim=1,mode="c"] atoms_per_residue,
 */
  __pyx_tuple__64 = PyTuple_Pack(48, __pyx_n_s_xyz, __pyx_n_s_charges, __pyx_n_s_atoms_per_residue, __pyx_n_s_residue_first_atom, __pyx_n_s_ds, __pyx_n_s_isolute, __pyx_n_s_nmolecules, __pyx_n_s_cat_first, __pyx_n_s_cat_last, __pyx_n_s_an_first, __pyx_n_s_an_last, __pyx_n_s_octants, __pyx_n_s_cxyz, __pyx_n_s_q, __pyx_n_s_apr, __pyx_n_s_rfa, __pyx_n_s_coct, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_idx, __pyx_n_s_idx2, __pyx_n_s_idx3, __pyx_n_s_nmol, __pyx_n_s_islt, __pyx_n_s_energy_per_atom, __pyx_n_s_epa, __pyx_n_s_energy_xyz_per_atom, __pyx_n_s_epa_xyz, __pyx_n_s_energy_octant_per_atom, __pyx_n_s_epa_oct, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_r, __pyx_n_s_qqr, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_idx4, __pyx_n_s_c1, __pyx_n_s_c2, __pyx_n_s_a1, __pyx_n_s_a2, __pyx_n_s_cds, __pyx_n_s_energy, __pyx_n_s_energy_xyz, __pyx_n_s_energy_octant); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(12, 0, 48, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcEnergyAASep, 699, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 699, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":787
 * 
 * @cython.boundscheck(False)
 * def findDS(char [:,:,:] ds, double [:,:] cn, int n1, int n2, int shell, int t):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, j
 */
  __pyx_tuple__66 = PyTuple_Pack(8, __pyx_n_s_ds, __pyx_n_s_cn, __pyx_n_s_n1, __pyx_n_s_n2, __pyx_n_s_shell, __pyx_n_s_t, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(6, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_findDS, 787, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 787, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":797
 * 
 * @cython.boundscheck(False)
 * def dipTen(np.ndarray[np.float64_t,ndim=1] rv,             # <<<<<<<<<<<<<<
 *            np.float64_t r2):
 *     """
 */
  __pyx_tuple__68 = PyTuple_Pack(9, __pyx_n_s_rv, __pyx_n_s_r2, __pyx_n_s_c_rv, __pyx_n_s_dipt, __pyx_n_s_f1, __pyx_n_s_f2, __pyx_n_s_f2_0, __pyx_n_s_f2_1, __pyx_n_s_f2_2); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_dipTen, 797, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 797, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":822
 * 
 * @cython.boundscheck(False)
 * def NQRself(np.ndarray[np.float64_t,ndim=2] py_xyz):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules
 */
  __pyx_tuple__70 = PyTuple_Pack(21, __pyx_n_s_py_xyz, __pyx_n_s_nwat, __pyx_n_s_xyz, __pyx_n_s_H1x, __pyx_n_s_H1y, __pyx_n_s_H1z, __pyx_n_s_H2x, __pyx_n_s_H2y, __pyx_n_s_H2z, __pyx_n_s_n2, __pyx_n_s_n3, __pyx_n_s_Exx, __pyx_n_s_Eyy, __pyx_n_s_Ezz, __pyx_n_s_i, __pyx_n_s_k, __pyx_n_s_ind, __pyx_n_s_py_dipt, __pyx_n_s_dipt, __pyx_n_s_B, __pyx_n_s_T); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 21, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_NQRself, 822, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 822, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":897
 * 
 * @cython.boundscheck(False)
 * def waterRotationMatrix(double [:,:] coor):             # <<<<<<<<<<<<<<
 *     cdef int nwat = len(coor)/3 # number of water molecules
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 */
  __pyx_tuple__72 = PyTuple_Pack(16, __pyx_n_s_coor, __pyx_n_s_coor, __pyx_n_s_nwat, __pyx_n_s_H1x, __pyx_n_s_H1y, __pyx_n_s_H1z, __pyx_n_s_H2x, __pyx_n_s_H2y, __pyx_n_s_H2z, __pyx_n_s_n2, __pyx_n_s_n3, __pyx_n_s_i, __pyx_n_s_k, __pyx_n_s_ind, __pyx_n_s_B_out, __pyx_n_s_B); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_waterRotationMatrix, 897, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 897, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":955
 * 
 * @cython.boundscheck(False)
 * def NQRselfAndB(np.ndarray[np.float64_t,ndim=2] py_xyz):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules
 */
  __pyx_tuple__74 = PyTuple_Pack(27, __pyx_n_s_py_xyz, __pyx_n_s_nwat, __pyx_n_s_xyz, __pyx_n_s_H1x, __pyx_n_s_H1y, __pyx_n_s_H1z, __pyx_n_s_H2x, __pyx_n_s_H2y, __pyx_n_s_H2z, __pyx_n_s_n2, __pyx_n_s_n3, __pyx_n_s_Exx, __pyx_n_s_Eyy, __pyx_n_s_Ezz, __pyx_n_s_i, __pyx_n_s_k, __pyx_n_s_ind, __pyx_n_s_py_dipt, __pyx_n_s_dipt, __pyx_n_s_py_B1, __pyx_n_s_B1, __pyx_n_s_py_B2, __pyx_n_s_B2, __pyx_n_s_py_B3, __pyx_n_s_B3, __pyx_n_s_B, __pyx_n_s_T); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 27, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_NQRselfAndB, 955, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 955, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1049
 * 
 * @cython.boundscheck(False)
 * def NQRdipTen(np.ndarray[np.float64_t,ndim=2] py_xyz,             # <<<<<<<<<<<<<<
 *               np.ndarray[np.float64_t,ndim=1] py_charges,
 *               aufpunkt):
 */
  __pyx_tuple__76 = PyTuple_Pack(35, __pyx_n_s_py_xyz, __pyx_n_s_py_charges, __pyx_n_s_aufpunkt, __pyx_n_s_n, __pyx_n_s_auf, __pyx_n_s_auf3, __pyx_n_s_auf6, __pyx_n_s_xyz, __pyx_n_s_charges, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_r2, __pyx_n_s_f1, __pyx_n_s_f2, __pyx_n_s_f2_x, __pyx_n_s_f2_y, __pyx_n_s_f2_z, __pyx_n_s_auf_x1, __pyx_n_s_auf_y1, __pyx_n_s_auf_z1, __pyx_n_s_auf_x2, __pyx_n_s_auf_y2, __pyx_n_s_auf_z2, __pyx_n_s_tyH, __pyx_n_s_tzH, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_pyE, __pyx_n_s_py_dipt, __pyx_n_s_dipt, __pyx_n_s_E, __pyx_n_s_B, __pyx_n_s_T); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(3, 0, 35, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_NQRdipTen, 1049, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 1049, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1286
 * 
 * 
 * def calcOctant(np.ndarray[np.float64_t,ndim=2,mode="c"] com,             # <<<<<<<<<<<<<<
 *                isolute, nmolecules):
 *     """
 */
  __pyx_tuple__78 = PyTuple_Pack(12, __pyx_n_s_com, __pyx_n_s_isolute, __pyx_n_s_nmolecules, __pyx_n_s_ccom, __pyx_n_s_nmol, __pyx_n_s_islt, __pyx_n_s_j, __pyx_n_s_octants, __pyx_n_s_coct, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(3, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcOctant, 1286, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 1286, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1326
 * 
 * @cython.boundscheck(False)
 * def sumMDCage(double [:,:,:,:] mdcage_ts,             # <<<<<<<<<<<<<<
 *               double [:,:] dip_wat,
 *               int nres_wat, char [:] ds, int maxshell, int rep, int frame):
 */
  __pyx_tuple__80 = PyTuple_Pack(10, __pyx_n_s_mdcage_ts, __pyx_n_s_dip_wat, __pyx_n_s_nres_wat, __pyx_n_s_ds, __pyx_n_s_maxshell, __pyx_n_s_rep, __pyx_n_s_frame, __pyx_n_s_w, __pyx_n_s_shell, __pyx_n_s_i); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(7, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_sumMDCage, 1326, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 1326, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1341
 * 
 * @cython.boundscheck(False)
 * def sumMDCageSingle(double [:,:,:] mdcage_ts, double [:,:] dip_wat,             # <<<<<<<<<<<<<<
 *                     char [:] ds, int maxshell, int frame):
 * 
 */
  __pyx_tuple__82 = PyTuple_Pack(9, __pyx_n_s_mdcage_ts, __pyx_n_s_dip_wat, __pyx_n_s_ds, __pyx_n_s_maxshell, __pyx_n_s_frame, __pyx_n_s_w, __pyx_n_s_shell, __pyx_n_s_i, __pyx_n_s_nres_wat); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(5, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_sumMDCageSingle, 1341, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 1341, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1356
 * 
 * @cython.boundscheck(False)
 * def calcAngularMomentum(double [:,:] coor, double [:,:] vel, double [:] masses, int natoms):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.float64_t, ndim=1] L = np.zeros(3)
 */
  __pyx_tuple__84 = PyTuple_Pack(7, __pyx_n_s_coor, __pyx_n_s_vel, __pyx_n_s_masses, __pyx_n_s_natoms, __pyx_n_s_L, __pyx_n_s_cL, __pyx_n_s_i); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcAngularMomentum, 1356, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 1356, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1370
 * 
 * @cython.boundscheck(False)
 * def calcInertiaTensor(double [:,:] coor, double [:] masses, int natoms):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.float64_t, ndim=2] I = np.zeros((3,3))
 */
  __pyx_tuple__86 = PyTuple_Pack(9, __pyx_n_s_coor, __pyx_n_s_masses, __pyx_n_s_natoms, __pyx_n_s_I, __pyx_n_s_cI, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 1370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(3, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcInertiaTensor, 1370, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 1370, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1396
 * 
 * @cython.boundscheck(False)
 * def calcResidenceTimeseries(char [:,:] ds, int nshells):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nmol    = len(ds)
 */
  __pyx_tuple__88 = PyTuple_Pack(8, __pyx_n_s_ds, __pyx_n_s_nshells, __pyx_n_s_nmol, __pyx_n_s_nt, __pyx_n_s_ts, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_ind); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcResidenceTimeseries, 1396, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 1396, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1413
 * 
 * @cython.boundscheck(False)
 * def calcAngularDisplacement(double [:,:] wts, double dt):             # <<<<<<<<<<<<<<
 * 
 *     cdef int tn = wts.shape[0]
 */
  __pyx_tuple__90 = PyTuple_Pack(9, __pyx_n_s_wts, __pyx_n_s_dt, __pyx_n_s_tn, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_integral, __pyx_n_s_msd, __pyx_n_s_ctr); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcAngularDisplacement, 1413, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 1413, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1441
 * 
 * @cython.boundscheck(False)
 * def findNearestAtom(double [:,:] coor_core, double [:,:] coor_surr, double [:] mindist,             # <<<<<<<<<<<<<<
 *                     double [:] mindist2, double [:,:] minvec, int [:] next_id):
 * 
 */
  __pyx_tuple__92 = PyTuple_Pack(14, __pyx_n_s_coor_core, __pyx_n_s_coor_surr, __pyx_n_s_mindist, __pyx_n_s_mindist2, __pyx_n_s_minvec, __pyx_n_s_next_id, __pyx_n_s_n_core, __pyx_n_s_n_surr, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_tmp_x, __pyx_n_s_tmp_y, __pyx_n_s_tmp_z, __pyx_n_s_dist2); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(6, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_findNearestAtom, 1441, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 1441, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1467
 * 
 * @cython.boundscheck(False)
 * def checkHBond(double [:,:] coor_surr, double [:,:] coor_oh2, int nres_surr, double maxdist):             # <<<<<<<<<<<<<<
 *     # this function is designed only for water hydrogen bonds!
 *     cdef int sites_per_res = coor_surr.shape[0] / nres_surr
 */
  __pyx_tuple__94 = PyTuple_Pack(26, __pyx_n_s_coor_surr, __pyx_n_s_coor_oh2, __pyx_n_s_nres_surr, __pyx_n_s_maxdist, __pyx_n_s_sites_per_res, __pyx_n_s_nsurr, __pyx_n_s_nwat, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_l, __pyx_n_s_idx, __pyx_n_s_idx2, __pyx_n_s_idx3, __pyx_n_s_hbond, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_dx2, __pyx_n_s_dy2, __pyx_n_s_dz2, __pyx_n_s_dot, __pyx_n_s_dot2, __pyx_n_s_dist, __pyx_n_s_dist2, __pyx_n_s_cosine); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(4, 0, 26, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_checkHBond, 1467, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 1467, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1510
 * 
 * @cython.boundscheck(False)
 * def sphHarmMatrix(double [:,:] coor, np.complex128_t [:,:] y_mat, int lmax):             # <<<<<<<<<<<<<<
 *     cdef double r, pol, azi
 *     cdef int nat = coor.shape[0], i, l1, m1, m1r, l2, m2, m2r
 */
  __pyx_tuple__96 = PyTuple_Pack(14, __pyx_n_s_coor, __pyx_n_s_y_mat, __pyx_n_s_lmax, __pyx_n_s_r, __pyx_n_s_pol, __pyx_n_s_azi, __pyx_n_s_nat, __pyx_n_s_i, __pyx_n_s_l1, __pyx_n_s_m1, __pyx_n_s_m1r, __pyx_n_s_l2, __pyx_n_s_m2, __pyx_n_s_m2r); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(3, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_sphHarmMatrix, 1510, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 1510, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1528
 * 
 * @cython.boundscheck(False)
 * def calcFourierLaplaceTransform(double [:] data_x, double [:] data_y, double w):             # <<<<<<<<<<<<<<
 *     cdef double wt, wt1
 *     cdef double dt = data_x[1] - data_x[0]
 */
  __pyx_tuple__98 = PyTuple_Pack(11, __pyx_n_s_data_x, __pyx_n_s_data_y, __pyx_n_s_w, __pyx_n_s_wt, __pyx_n_s_wt1, __pyx_n_s_dt, __pyx_n_s_laplace_re, __pyx_n_s_laplace_im, __pyx_n_s_i, __pyx_n_s_n, __pyx_n_s_transform); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(3, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcFourierLaplaceTransform, 1528, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 1528, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1551
 * 
 * @cython.boundscheck(False)
 * def calcRotationMatrix(double [:,:] coorA, double [:,:] coorB):             # <<<<<<<<<<<<<<
 *     """
 *     calcRotationMatrix(coor,coorA,coorB)
 */
  __pyx_tuple__100 = PyTuple_Pack(3, __pyx_n_s_coorA, __pyx_n_s_coorB, __pyx_n_s_R); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_calcRotationMatrix, 1551, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 1551, __pyx_L1_error)

  /* "src/helpers/helpers.pyx":1569
 * 
 * @cython.boundscheck(False)
 * def applyRotationMatrix(double [:,:] coor, double [:,:] R):             # <<<<<<<<<<<<<<
 *     """
 *     calcRotationMatrix(coor,coorA,coorB)
 */
  __pyx_tuple__102 = PyTuple_Pack(7, __pyx_n_s_coor, __pyx_n_s_R, __pyx_n_s_N, __pyx_n_s_tmpx, __pyx_n_s_tmpy, __pyx_n_s_tmpz, __pyx_n_s_i); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 1569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_helpers_helpers_pyx, __pyx_n_s_applyRotationMatrix, 1569, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 1569, __pyx_L1_error)

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(2, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(2, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__108 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(2, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__109 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_2400 = PyFloat_FromDouble(0.2400); if (unlikely(!__pyx_float_0_2400)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_8086 = PyFloat_FromDouble(1.8086); if (unlikely(!__pyx_float_1_8086)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1390_02 = PyFloat_FromDouble(1390.02); if (unlikely(!__pyx_float_1390_02)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2_0487 = PyFloat_FromDouble(-2.0487); if (unlikely(!__pyx_float_neg_2_0487)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(2, 105, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(2, 105, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(2, 105, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(2, 279, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(2, 279, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(2, 330, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(2, 330, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(2, 330, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(2, 965, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(2, 965, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(2, 965, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(1, 200, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(1, 223, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(1, 227, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(1, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(1, 771, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(1, 773, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(1, 775, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(1, 777, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(1, 779, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(1, 781, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(1, 783, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(1, 785, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(1, 787, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(1, 789, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(1, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inithelpers(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inithelpers(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_helpers(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_helpers(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_helpers(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static PyThread_type_lock __pyx_t_3[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'helpers' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_helpers(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("helpers", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_newanalysis__helpers) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "newanalysis.helpers")) {
      if (unlikely(PyDict_SetItemString(modules, "newanalysis.helpers", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "src/helpers/helpers.pyx":4
 * # vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/helpers/helpers.pyx":7
 * cimport numpy as np
 * 
 * from scipy.special import sph_harm             # <<<<<<<<<<<<<<
 * 
 * from cython.parallel cimport prange, parallel
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_sph_harm);
  __Pyx_GIVEREF(__pyx_n_s_sph_harm);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_sph_harm);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_special, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_sph_harm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sph_harm, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":24
 * 
 * @cython.boundscheck(False)
 * def SphereinCube(double A, int numpoints, double gfunc, double deltaA):             # <<<<<<<<<<<<<<
 *     cdef int i, j, k, sumr
 *     cdef double vol,x,y,z
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_1SphereinCube, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SphereinCube, __pyx_t_2) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":41
 * 
 * @cython.boundscheck(False)
 * def velcomByResidue(double [:,:] vels, double [:] masses, int nres, int [:] apr, int [:] rfa):             # <<<<<<<<<<<<<<
 *     """
 *     velcomByResidue(vels,masses,nres,atoms_per_residue)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_3velcomByResidue, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_velcomByResidue, __pyx_t_2) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":73
 * 
 * @cython.boundscheck(False)
 * def comByResidue(double [:,:] coor, double [:] masses, int nres, int [:] apr, int [:] rfa):             # <<<<<<<<<<<<<<
 *     """
 *     comByResidue(coor,masses,nres,atoms_per_residue)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_5comByResidue, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_comByResidue, __pyx_t_2) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":106
 * 
 * @cython.boundscheck(False)
 * def dipByResidue(double [:,:] coor, double [:] charges, double [:] masses, int nres, int [:] apr, int [:] rfa, double [:,:] com):             # <<<<<<<<<<<<<<
 *     """
 *     dipByResidue(coor,charges,masses,nresidues,atoms_per_residue,com)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_7dipByResidue, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dipByResidue, __pyx_t_2) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":133
 * 
 * @cython.boundscheck(False)
 * def dipoleMomentNeutralSelection(double [:,:] coor, double [:] charges):             # <<<<<<<<<<<<<<
 * 
 *     cdef double [:] dip = np.zeros(3)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_9dipoleMomentNeutralSelection, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dipoleMomentNeutralSelection, __pyx_t_2) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":147
 * 
 * @cython.boundscheck(False)
 * def collectiveDipoleMomentWaterShells(double [:,:] coor, double [:] charges, int [:] ds, int nshells):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i,j,shell
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_11collectiveDipoleMomentWaterShells, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collectiveDipoleMomentWaterShell, __pyx_t_2) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":166
 * 
 * @cython.boundscheck(False)
 * def atomicCurrent(double [:,:] vel, double [:] charges, double [:,:] result, int ctr):             # <<<<<<<<<<<<<<
 *     cdef int i, natoms=len(vel)
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_13atomicCurrent, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_atomicCurrent, __pyx_t_2) < 0) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":175
 * 
 * @cython.boundscheck(False)
 * def centerOrientBox(double [:,:] com, double [:,:] coor, double boxl, int isolute,             # <<<<<<<<<<<<<<
 *                     int [:] apr, int [:] rfa, double [:,:] coorA, double [:,:] coorB):
 *     """
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_15centerOrientBox, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_centerOrientBox, __pyx_t_2) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":223
 * 
 * @cython.boundscheck(False)
 * def centerToPointOrientBox(double [:,:] com, double [:,:] coor, double [:] center, double boxl,             # <<<<<<<<<<<<<<
 *                            int [:] apr, int [:] rfa, double [:,:] coorA, double [:,:] coorB):
 *     """
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_17centerToPointOrientBox, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_centerToPointOrientBox, __pyx_t_2) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":266
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAA(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_19calcEnergyAA, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEnergyAA, __pyx_t_2) < 0) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":301
 * 
 * @cython.boundscheck(False)
 * def calcEnergyMuA(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double [:] mu_solute):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyMuA(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules,mu_solute)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_21calcEnergyMuA, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEnergyMuA, __pyx_t_2) < 0) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":329
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAApermind(double [:,:] coor, double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int first, int last, double[:] drude):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, resnum_from, resnum_to, drude_list)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_23calcEnergyAApermind, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEnergyAApermind, __pyx_t_2) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":376
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAAhisto(double [:,:] coor,  double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double histo_min, double histo_max, int histo_bins, int[:] trehalose, int[:] oxyquinol):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAAhisto(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, min_histo, max_histo, bins_hist,array indices, array indices 2)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_25calcEnergyAAhisto, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEnergyAAhisto, __pyx_t_2) < 0) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":451
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAAhisto1(double [:,:] coor,  double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, double histo_min, double histo_max, int histo_bins, int[:] trehalose):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAAhisto(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, min_histo, max_histo, bins_hist,array indices)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_27calcEnergyAAhisto1, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEnergyAAhisto1, __pyx_t_2) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":518
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAApermindhisto(double [:,:] coor, double[:,:] coms, double [:] charges, int [:] apr, int [:] rfa, int isolute, int first, int last, double[:] drude,double histo_min, double histo_max, int histo_bins,):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAA(xyz, coms, charges, atoms_per_residue, residue_first_atom, resnum_solute, resnum_from, resnum_to, drude_list, min_histo, max_histo, bins_histo)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_29calcEnergyAApermindhisto, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEnergyAApermindhisto, __pyx_t_2) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":583
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAtomic(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, int exclude_begin=-1, int exclude_end=-1):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAtomic(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_31calcEnergyAtomic, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEnergyAtomic, __pyx_t_2) < 0) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":613
 * 
 * @cython.boundscheck(False)
 * def calcEnergyDouble(double [:,:] coor, double [:] charges1,  int [:] apr, int [:] rfa, int isolute, int nmol, int start, int end):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyDouble(xyz, charges_1, charges_2, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules,start_res,end_res)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_33calcEnergyDouble, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEnergyDouble, __pyx_t_2) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":645
 * 
 * @cython.boundscheck(False)
 * def calcDipDipEnergyAtomic(double [:,:] coms, double [:,:] dipol,  int isolute, int nmol, int exclude_begin=-1, int exclude_end=-1):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcDipDipEnergyAtomic(coms, dipol, resnum_solute, nmolecules)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_35calcDipDipEnergyAtomic, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcDipDipEnergyAtomic, __pyx_t_2) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":666
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAtomicVoro(double [:,:] coor, double [:] charges, int [:] apr, int [:] rfa, int isolute, int nmol, char [:] ds, int maxshell):             # <<<<<<<<<<<<<<
 *     """
 *     energy = calcEnergyAtomic(xyz, charges, atoms_per_residue, residue_first_atom, resnum_solute, nmolecules, delaunay_shell)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_37calcEnergyAtomicVoro, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEnergyAtomicVoro, __pyx_t_2) < 0) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":699
 * 
 * @cython.boundscheck(False)
 * def calcEnergyAASep(np.ndarray[np.float64_t,ndim=2,mode="c"] xyz,             # <<<<<<<<<<<<<<
 *                  np.ndarray[np.float64_t,ndim=1] charges,
 *                  np.ndarray[np.int32_t,ndim=1,mode="c"] atoms_per_residue,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_39calcEnergyAASep, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEnergyAASep, __pyx_t_2) < 0) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":787
 * 
 * @cython.boundscheck(False)
 * def findDS(char [:,:,:] ds, double [:,:] cn, int n1, int n2, int shell, int t):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, j
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_41findDS, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_findDS, __pyx_t_2) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":797
 * 
 * @cython.boundscheck(False)
 * def dipTen(np.ndarray[np.float64_t,ndim=1] rv,             # <<<<<<<<<<<<<<
 *            np.float64_t r2):
 *     """
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_43dipTen, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dipTen, __pyx_t_2) < 0) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":822
 * 
 * @cython.boundscheck(False)
 * def NQRself(np.ndarray[np.float64_t,ndim=2] py_xyz):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_45NQRself, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NQRself, __pyx_t_2) < 0) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":897
 * 
 * @cython.boundscheck(False)
 * def waterRotationMatrix(double [:,:] coor):             # <<<<<<<<<<<<<<
 *     cdef int nwat = len(coor)/3 # number of water molecules
 *     cdef double H1x,H1y,H1z,H2x,H2y,H2z,n2,n3
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_47waterRotationMatrix, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_waterRotationMatrix, __pyx_t_2) < 0) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":955
 * 
 * @cython.boundscheck(False)
 * def NQRselfAndB(np.ndarray[np.float64_t,ndim=2] py_xyz):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nwat = len(py_xyz)/3 # number of water molecules
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_49NQRselfAndB, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NQRselfAndB, __pyx_t_2) < 0) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1049
 * 
 * @cython.boundscheck(False)
 * def NQRdipTen(np.ndarray[np.float64_t,ndim=2] py_xyz,             # <<<<<<<<<<<<<<
 *               np.ndarray[np.float64_t,ndim=1] py_charges,
 *               aufpunkt):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_51NQRdipTen, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NQRdipTen, __pyx_t_2) < 0) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1286
 * 
 * 
 * def calcOctant(np.ndarray[np.float64_t,ndim=2,mode="c"] com,             # <<<<<<<<<<<<<<
 *                isolute, nmolecules):
 *     """
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_53calcOctant, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcOctant, __pyx_t_2) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1326
 * 
 * @cython.boundscheck(False)
 * def sumMDCage(double [:,:,:,:] mdcage_ts,             # <<<<<<<<<<<<<<
 *               double [:,:] dip_wat,
 *               int nres_wat, char [:] ds, int maxshell, int rep, int frame):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_55sumMDCage, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sumMDCage, __pyx_t_2) < 0) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1341
 * 
 * @cython.boundscheck(False)
 * def sumMDCageSingle(double [:,:,:] mdcage_ts, double [:,:] dip_wat,             # <<<<<<<<<<<<<<
 *                     char [:] ds, int maxshell, int frame):
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_57sumMDCageSingle, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sumMDCageSingle, __pyx_t_2) < 0) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1356
 * 
 * @cython.boundscheck(False)
 * def calcAngularMomentum(double [:,:] coor, double [:,:] vel, double [:] masses, int natoms):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.float64_t, ndim=1] L = np.zeros(3)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_59calcAngularMomentum, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcAngularMomentum, __pyx_t_2) < 0) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1370
 * 
 * @cython.boundscheck(False)
 * def calcInertiaTensor(double [:,:] coor, double [:] masses, int natoms):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.float64_t, ndim=2] I = np.zeros((3,3))
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_61calcInertiaTensor, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcInertiaTensor, __pyx_t_2) < 0) __PYX_ERR(0, 1370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1396
 * 
 * @cython.boundscheck(False)
 * def calcResidenceTimeseries(char [:,:] ds, int nshells):             # <<<<<<<<<<<<<<
 * 
 *     cdef int nmol    = len(ds)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_63calcResidenceTimeseries, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcResidenceTimeseries, __pyx_t_2) < 0) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1413
 * 
 * @cython.boundscheck(False)
 * def calcAngularDisplacement(double [:,:] wts, double dt):             # <<<<<<<<<<<<<<
 * 
 *     cdef int tn = wts.shape[0]
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_65calcAngularDisplacement, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcAngularDisplacement, __pyx_t_2) < 0) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1441
 * 
 * @cython.boundscheck(False)
 * def findNearestAtom(double [:,:] coor_core, double [:,:] coor_surr, double [:] mindist,             # <<<<<<<<<<<<<<
 *                     double [:] mindist2, double [:,:] minvec, int [:] next_id):
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_67findNearestAtom, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_findNearestAtom, __pyx_t_2) < 0) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1467
 * 
 * @cython.boundscheck(False)
 * def checkHBond(double [:,:] coor_surr, double [:,:] coor_oh2, int nres_surr, double maxdist):             # <<<<<<<<<<<<<<
 *     # this function is designed only for water hydrogen bonds!
 *     cdef int sites_per_res = coor_surr.shape[0] / nres_surr
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_69checkHBond, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_checkHBond, __pyx_t_2) < 0) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1510
 * 
 * @cython.boundscheck(False)
 * def sphHarmMatrix(double [:,:] coor, np.complex128_t [:,:] y_mat, int lmax):             # <<<<<<<<<<<<<<
 *     cdef double r, pol, azi
 *     cdef int nat = coor.shape[0], i, l1, m1, m1r, l2, m2, m2r
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_71sphHarmMatrix, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sphHarmMatrix, __pyx_t_2) < 0) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1528
 * 
 * @cython.boundscheck(False)
 * def calcFourierLaplaceTransform(double [:] data_x, double [:] data_y, double w):             # <<<<<<<<<<<<<<
 *     cdef double wt, wt1
 *     cdef double dt = data_x[1] - data_x[0]
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_73calcFourierLaplaceTransform, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcFourierLaplaceTransform, __pyx_t_2) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1551
 * 
 * @cython.boundscheck(False)
 * def calcRotationMatrix(double [:,:] coorA, double [:,:] coorB):             # <<<<<<<<<<<<<<
 *     """
 *     calcRotationMatrix(coor,coorA,coorB)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_75calcRotationMatrix, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcRotationMatrix, __pyx_t_2) < 0) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1569
 * 
 * @cython.boundscheck(False)
 * def applyRotationMatrix(double [:,:] coor, double [:,:] R):             # <<<<<<<<<<<<<<
 *     """
 *     calcRotationMatrix(coor,coorA,coorB)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11newanalysis_7helpers_77applyRotationMatrix, NULL, __pyx_n_s_newanalysis_helpers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_applyRotationMatrix, __pyx_t_2) < 0) __PYX_ERR(0, 1569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/helpers/helpers.pyx":1
 * # -*- Mode: python; tab-width: 4; indent-tabs-mode:nil; encoding: utf-8 -*-             # <<<<<<<<<<<<<<
 * # vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":209
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__104, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__105, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__106, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__107, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__108, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":316
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":317
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_3[0] = PyThread_allocate_lock();
  __pyx_t_3[1] = PyThread_allocate_lock();
  __pyx_t_3[2] = PyThread_allocate_lock();
  __pyx_t_3[3] = PyThread_allocate_lock();
  __pyx_t_3[4] = PyThread_allocate_lock();
  __pyx_t_3[5] = PyThread_allocate_lock();
  __pyx_t_3[6] = PyThread_allocate_lock();
  __pyx_t_3[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_3, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":549
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":995
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 995, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init newanalysis.helpers", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init newanalysis.helpers");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* None */
static void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname) {
    #ifdef WITH_THREAD
    PyGILState_STATE gilstate = PyGILState_Ensure();
    #endif
    __Pyx_RaiseUnboundLocalError(varname);
    #ifdef WITH_THREAD
    PyGILState_Release(gilstate);
    #endif
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* None */
  static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* None */
  static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* BytesEquals */
  static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
  static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* GetAttr */
  static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* decode_c_string */
  static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* GetAttr3 */
  static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SwapException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
  static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
  static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* MemviewSliceIsContig */
  static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
  static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
  static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_char(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_char, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_char(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 3,
                                                 &__Pyx_TypeInfo_char, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsdsds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 4,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 3,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_char(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_char, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds___pyx_t_double_complex(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo___pyx_t_double_complex, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(double *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj) {
    double value = __pyx_PyFloat_AsDouble(obj);
    if ((value == (double)-1) && PyErr_Occurred())
        return 0;
    *(double *) itemp = value;
    return 1;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_int(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_int(*(int *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_int(const char *itemp, PyObject *obj) {
    int value = __Pyx_PyInt_As_int(obj);
    if ((value == (int)-1) && PyErr_Occurred())
        return 0;
    *(int *) itemp = value;
    return 1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_char(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_char(*(char *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_char(const char *itemp, PyObject *obj) {
    char value = __Pyx_PyInt_As_char(obj);
    if ((value == (char)-1) && PyErr_Occurred())
        return 0;
    *(char *) itemp = value;
    return 1;
}

/* FromPy */
  static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_double_complex_from_parts(
               (double)cval.real,
               (double)cval.imag);
}

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
